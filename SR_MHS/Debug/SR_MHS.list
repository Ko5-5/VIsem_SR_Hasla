
SR_MHS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a93c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000fc4  0800aadc  0800aadc  0001aadc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800baa0  0800baa0  0002051c  2**0
                  CONTENTS
  4 .ARM          00000008  0800baa0  0800baa0  0001baa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800baa8  0800baa8  0002051c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800baa8  0800baa8  0001baa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800baac  0800baac  0001baac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000051c  20000000  0800bab0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000fcc  2000051c  0800bfcc  0002051c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200014e8  0800bfcc  000214e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002051c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000212d1  00000000  00000000  0002054c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004536  00000000  00000000  0004181d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001800  00000000  00000000  00045d58  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001668  00000000  00000000  00047558  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00007223  00000000  00000000  00048bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00016dff  00000000  00000000  0004fde3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009408f  00000000  00000000  00066be2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000fac71  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006afc  00000000  00000000  000facec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000051c 	.word	0x2000051c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800aac4 	.word	0x0800aac4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000520 	.word	0x20000520
 80001dc:	0800aac4 	.word	0x0800aac4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b08a      	sub	sp, #40	; 0x28
 8000594:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000596:	f107 0314 	add.w	r3, r7, #20
 800059a:	2200      	movs	r2, #0
 800059c:	601a      	str	r2, [r3, #0]
 800059e:	605a      	str	r2, [r3, #4]
 80005a0:	609a      	str	r2, [r3, #8]
 80005a2:	60da      	str	r2, [r3, #12]
 80005a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005a6:	2300      	movs	r3, #0
 80005a8:	613b      	str	r3, [r7, #16]
 80005aa:	4b4a      	ldr	r3, [pc, #296]	; (80006d4 <MX_GPIO_Init+0x144>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ae:	4a49      	ldr	r2, [pc, #292]	; (80006d4 <MX_GPIO_Init+0x144>)
 80005b0:	f043 0304 	orr.w	r3, r3, #4
 80005b4:	6313      	str	r3, [r2, #48]	; 0x30
 80005b6:	4b47      	ldr	r3, [pc, #284]	; (80006d4 <MX_GPIO_Init+0x144>)
 80005b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ba:	f003 0304 	and.w	r3, r3, #4
 80005be:	613b      	str	r3, [r7, #16]
 80005c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005c2:	2300      	movs	r3, #0
 80005c4:	60fb      	str	r3, [r7, #12]
 80005c6:	4b43      	ldr	r3, [pc, #268]	; (80006d4 <MX_GPIO_Init+0x144>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ca:	4a42      	ldr	r2, [pc, #264]	; (80006d4 <MX_GPIO_Init+0x144>)
 80005cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005d0:	6313      	str	r3, [r2, #48]	; 0x30
 80005d2:	4b40      	ldr	r3, [pc, #256]	; (80006d4 <MX_GPIO_Init+0x144>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005da:	60fb      	str	r3, [r7, #12]
 80005dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005de:	2300      	movs	r3, #0
 80005e0:	60bb      	str	r3, [r7, #8]
 80005e2:	4b3c      	ldr	r3, [pc, #240]	; (80006d4 <MX_GPIO_Init+0x144>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	4a3b      	ldr	r2, [pc, #236]	; (80006d4 <MX_GPIO_Init+0x144>)
 80005e8:	f043 0301 	orr.w	r3, r3, #1
 80005ec:	6313      	str	r3, [r2, #48]	; 0x30
 80005ee:	4b39      	ldr	r3, [pc, #228]	; (80006d4 <MX_GPIO_Init+0x144>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f2:	f003 0301 	and.w	r3, r3, #1
 80005f6:	60bb      	str	r3, [r7, #8]
 80005f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005fa:	2300      	movs	r3, #0
 80005fc:	607b      	str	r3, [r7, #4]
 80005fe:	4b35      	ldr	r3, [pc, #212]	; (80006d4 <MX_GPIO_Init+0x144>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000602:	4a34      	ldr	r2, [pc, #208]	; (80006d4 <MX_GPIO_Init+0x144>)
 8000604:	f043 0302 	orr.w	r3, r3, #2
 8000608:	6313      	str	r3, [r2, #48]	; 0x30
 800060a:	4b32      	ldr	r3, [pc, #200]	; (80006d4 <MX_GPIO_Init+0x144>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060e:	f003 0302 	and.w	r3, r3, #2
 8000612:	607b      	str	r3, [r7, #4]
 8000614:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, COL1_Pin|COL2_Pin|COL3_Pin|CS_RTC_Pin
 8000616:	2200      	movs	r2, #0
 8000618:	f44f 7178 	mov.w	r1, #992	; 0x3e0
 800061c:	482e      	ldr	r0, [pc, #184]	; (80006d8 <MX_GPIO_Init+0x148>)
 800061e:	f002 f9cb 	bl	80029b8 <HAL_GPIO_WritePin>
                          |CS_FLASH_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PWR_LED_GPIO_Port, PWR_LED_Pin, GPIO_PIN_RESET);
 8000622:	2200      	movs	r2, #0
 8000624:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000628:	482c      	ldr	r0, [pc, #176]	; (80006dc <MX_GPIO_Init+0x14c>)
 800062a:	f002 f9c5 	bl	80029b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = ROW3_Pin|ROW2_Pin|ROW1_Pin;
 800062e:	231c      	movs	r3, #28
 8000630:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000632:	4b2b      	ldr	r3, [pc, #172]	; (80006e0 <MX_GPIO_Init+0x150>)
 8000634:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000636:	2300      	movs	r3, #0
 8000638:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800063a:	f107 0314 	add.w	r3, r7, #20
 800063e:	4619      	mov	r1, r3
 8000640:	4825      	ldr	r0, [pc, #148]	; (80006d8 <MX_GPIO_Init+0x148>)
 8000642:	f002 f81f 	bl	8002684 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = COL1_Pin|COL2_Pin|COL3_Pin|CS_RTC_Pin
 8000646:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 800064a:	617b      	str	r3, [r7, #20]
                          |CS_FLASH_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800064c:	2301      	movs	r3, #1
 800064e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000650:	2300      	movs	r3, #0
 8000652:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000654:	2300      	movs	r3, #0
 8000656:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000658:	f107 0314 	add.w	r3, r7, #20
 800065c:	4619      	mov	r1, r3
 800065e:	481e      	ldr	r0, [pc, #120]	; (80006d8 <MX_GPIO_Init+0x148>)
 8000660:	f002 f810 	bl	8002684 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ROT_BUT_Pin;
 8000664:	2302      	movs	r3, #2
 8000666:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000668:	2300      	movs	r3, #0
 800066a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800066c:	2301      	movs	r3, #1
 800066e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ROT_BUT_GPIO_Port, &GPIO_InitStruct);
 8000670:	f107 0314 	add.w	r3, r7, #20
 8000674:	4619      	mov	r1, r3
 8000676:	4819      	ldr	r0, [pc, #100]	; (80006dc <MX_GPIO_Init+0x14c>)
 8000678:	f002 f804 	bl	8002684 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PWR_LED_Pin;
 800067c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000680:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000682:	2301      	movs	r3, #1
 8000684:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000686:	2300      	movs	r3, #0
 8000688:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800068a:	2300      	movs	r3, #0
 800068c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PWR_LED_GPIO_Port, &GPIO_InitStruct);
 800068e:	f107 0314 	add.w	r3, r7, #20
 8000692:	4619      	mov	r1, r3
 8000694:	4811      	ldr	r0, [pc, #68]	; (80006dc <MX_GPIO_Init+0x14c>)
 8000696:	f001 fff5 	bl	8002684 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800069a:	2200      	movs	r2, #0
 800069c:	2100      	movs	r1, #0
 800069e:	2008      	movs	r0, #8
 80006a0:	f001 ffb9 	bl	8002616 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80006a4:	2008      	movs	r0, #8
 80006a6:	f001 ffd2 	bl	800264e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80006aa:	2200      	movs	r2, #0
 80006ac:	2100      	movs	r1, #0
 80006ae:	2009      	movs	r0, #9
 80006b0:	f001 ffb1 	bl	8002616 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80006b4:	2009      	movs	r0, #9
 80006b6:	f001 ffca 	bl	800264e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80006ba:	2200      	movs	r2, #0
 80006bc:	2100      	movs	r1, #0
 80006be:	200a      	movs	r0, #10
 80006c0:	f001 ffa9 	bl	8002616 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80006c4:	200a      	movs	r0, #10
 80006c6:	f001 ffc2 	bl	800264e <HAL_NVIC_EnableIRQ>

}
 80006ca:	bf00      	nop
 80006cc:	3728      	adds	r7, #40	; 0x28
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	40023800 	.word	0x40023800
 80006d8:	40020000 	.word	0x40020000
 80006dc:	40020400 	.word	0x40020400
 80006e0:	10110000 	.word	0x10110000

080006e4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80006e8:	4b12      	ldr	r3, [pc, #72]	; (8000734 <MX_I2C1_Init+0x50>)
 80006ea:	4a13      	ldr	r2, [pc, #76]	; (8000738 <MX_I2C1_Init+0x54>)
 80006ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80006ee:	4b11      	ldr	r3, [pc, #68]	; (8000734 <MX_I2C1_Init+0x50>)
 80006f0:	4a12      	ldr	r2, [pc, #72]	; (800073c <MX_I2C1_Init+0x58>)
 80006f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006f4:	4b0f      	ldr	r3, [pc, #60]	; (8000734 <MX_I2C1_Init+0x50>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006fa:	4b0e      	ldr	r3, [pc, #56]	; (8000734 <MX_I2C1_Init+0x50>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000700:	4b0c      	ldr	r3, [pc, #48]	; (8000734 <MX_I2C1_Init+0x50>)
 8000702:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000706:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000708:	4b0a      	ldr	r3, [pc, #40]	; (8000734 <MX_I2C1_Init+0x50>)
 800070a:	2200      	movs	r2, #0
 800070c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800070e:	4b09      	ldr	r3, [pc, #36]	; (8000734 <MX_I2C1_Init+0x50>)
 8000710:	2200      	movs	r2, #0
 8000712:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000714:	4b07      	ldr	r3, [pc, #28]	; (8000734 <MX_I2C1_Init+0x50>)
 8000716:	2200      	movs	r2, #0
 8000718:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800071a:	4b06      	ldr	r3, [pc, #24]	; (8000734 <MX_I2C1_Init+0x50>)
 800071c:	2200      	movs	r2, #0
 800071e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000720:	4804      	ldr	r0, [pc, #16]	; (8000734 <MX_I2C1_Init+0x50>)
 8000722:	f002 f97b 	bl	8002a1c <HAL_I2C_Init>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800072c:	f000 fcfe 	bl	800112c <Error_Handler>
  }

}
 8000730:	bf00      	nop
 8000732:	bd80      	pop	{r7, pc}
 8000734:	20000998 	.word	0x20000998
 8000738:	40005400 	.word	0x40005400
 800073c:	00061a80 	.word	0x00061a80

08000740 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b08a      	sub	sp, #40	; 0x28
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000748:	f107 0314 	add.w	r3, r7, #20
 800074c:	2200      	movs	r2, #0
 800074e:	601a      	str	r2, [r3, #0]
 8000750:	605a      	str	r2, [r3, #4]
 8000752:	609a      	str	r2, [r3, #8]
 8000754:	60da      	str	r2, [r3, #12]
 8000756:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4a19      	ldr	r2, [pc, #100]	; (80007c4 <HAL_I2C_MspInit+0x84>)
 800075e:	4293      	cmp	r3, r2
 8000760:	d12b      	bne.n	80007ba <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	613b      	str	r3, [r7, #16]
 8000766:	4b18      	ldr	r3, [pc, #96]	; (80007c8 <HAL_I2C_MspInit+0x88>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	4a17      	ldr	r2, [pc, #92]	; (80007c8 <HAL_I2C_MspInit+0x88>)
 800076c:	f043 0302 	orr.w	r3, r3, #2
 8000770:	6313      	str	r3, [r2, #48]	; 0x30
 8000772:	4b15      	ldr	r3, [pc, #84]	; (80007c8 <HAL_I2C_MspInit+0x88>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	f003 0302 	and.w	r3, r3, #2
 800077a:	613b      	str	r3, [r7, #16]
 800077c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800077e:	23c0      	movs	r3, #192	; 0xc0
 8000780:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000782:	2312      	movs	r3, #18
 8000784:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000786:	2301      	movs	r3, #1
 8000788:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800078a:	2303      	movs	r3, #3
 800078c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800078e:	2304      	movs	r3, #4
 8000790:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000792:	f107 0314 	add.w	r3, r7, #20
 8000796:	4619      	mov	r1, r3
 8000798:	480c      	ldr	r0, [pc, #48]	; (80007cc <HAL_I2C_MspInit+0x8c>)
 800079a:	f001 ff73 	bl	8002684 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	60fb      	str	r3, [r7, #12]
 80007a2:	4b09      	ldr	r3, [pc, #36]	; (80007c8 <HAL_I2C_MspInit+0x88>)
 80007a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a6:	4a08      	ldr	r2, [pc, #32]	; (80007c8 <HAL_I2C_MspInit+0x88>)
 80007a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007ac:	6413      	str	r3, [r2, #64]	; 0x40
 80007ae:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <HAL_I2C_MspInit+0x88>)
 80007b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007b6:	60fb      	str	r3, [r7, #12]
 80007b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80007ba:	bf00      	nop
 80007bc:	3728      	adds	r7, #40	; 0x28
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	40005400 	.word	0x40005400
 80007c8:	40023800 	.word	0x40023800
 80007cc:	40020400 	.word	0x40020400

080007d0 <XORCipher>:

/*! \brief Funkcja szyfrująca hasło przy pomocy operacji binarnego XOR
 * 	Funkcja szyfrująca hasło przy pomocy operacji binarnego XOR, dostaje tablice char oraz klucz do szyfrowania
 */
void XORCipher(uint8_t* string, uint8_t* key)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b084      	sub	sp, #16
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
 80007d8:	6039      	str	r1, [r7, #0]
	for(int i = 0; i < strlen(string); i++)
 80007da:	2300      	movs	r3, #0
 80007dc:	60fb      	str	r3, [r7, #12]
 80007de:	e018      	b.n	8000812 <XORCipher+0x42>
	{
		string[i] = string[i] ^ key[i % 8];
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	687a      	ldr	r2, [r7, #4]
 80007e4:	4413      	add	r3, r2
 80007e6:	7819      	ldrb	r1, [r3, #0]
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	425a      	negs	r2, r3
 80007ec:	f003 0307 	and.w	r3, r3, #7
 80007f0:	f002 0207 	and.w	r2, r2, #7
 80007f4:	bf58      	it	pl
 80007f6:	4253      	negpl	r3, r2
 80007f8:	461a      	mov	r2, r3
 80007fa:	683b      	ldr	r3, [r7, #0]
 80007fc:	4413      	add	r3, r2
 80007fe:	781a      	ldrb	r2, [r3, #0]
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	6878      	ldr	r0, [r7, #4]
 8000804:	4403      	add	r3, r0
 8000806:	404a      	eors	r2, r1
 8000808:	b2d2      	uxtb	r2, r2
 800080a:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < strlen(string); i++)
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	3301      	adds	r3, #1
 8000810:	60fb      	str	r3, [r7, #12]
 8000812:	6878      	ldr	r0, [r7, #4]
 8000814:	f7ff fce4 	bl	80001e0 <strlen>
 8000818:	4602      	mov	r2, r0
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	429a      	cmp	r2, r3
 800081e:	d8df      	bhi.n	80007e0 <XORCipher+0x10>
	}
}
 8000820:	bf00      	nop
 8000822:	3710      	adds	r7, #16
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}

08000828 <OLED_page_sc>:

/*! \brief Funkcja wyświetlająca ekran wyboru strony
 * 	Funkcja wyświetlająca ekran wyboru strony na wyświetlaczu OLED przy pomocy połączenia I2C
 */
void OLED_page_sc(){
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af02      	add	r7, sp, #8
	static uint32_t lastRefresh = 0;
	if(HAL_GetTick() - lastRefresh > 1000){
 800082e:	f001 fde9 	bl	8002404 <HAL_GetTick>
 8000832:	4602      	mov	r2, r0
 8000834:	4b2f      	ldr	r3, [pc, #188]	; (80008f4 <OLED_page_sc+0xcc>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	1ad3      	subs	r3, r2, r3
 800083a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800083e:	d955      	bls.n	80008ec <OLED_page_sc+0xc4>
		SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000840:	2000      	movs	r0, #0
 8000842:	f000 fdeb 	bl	800141c <SSD1306_Fill>
		SSD1306_GotoXY (4,6);
 8000846:	2106      	movs	r1, #6
 8000848:	2004      	movs	r0, #4
 800084a:	f000 fe5f 	bl	800150c <SSD1306_GotoXY>
		SSD1306_Puts ("--MHS--", &Font_11x18, 1);
 800084e:	2201      	movs	r2, #1
 8000850:	4929      	ldr	r1, [pc, #164]	; (80008f8 <OLED_page_sc+0xd0>)
 8000852:	482a      	ldr	r0, [pc, #168]	; (80008fc <OLED_page_sc+0xd4>)
 8000854:	f000 fef0 	bl	8001638 <SSD1306_Puts>
		SSD1306_GotoXY (4,25);
 8000858:	2119      	movs	r1, #25
 800085a:	2004      	movs	r0, #4
 800085c:	f000 fe56 	bl	800150c <SSD1306_GotoXY>
		SSD1306_Puts ("PAGE", &Font_11x18, 1);
 8000860:	2201      	movs	r2, #1
 8000862:	4925      	ldr	r1, [pc, #148]	; (80008f8 <OLED_page_sc+0xd0>)
 8000864:	4826      	ldr	r0, [pc, #152]	; (8000900 <OLED_page_sc+0xd8>)
 8000866:	f000 fee7 	bl	8001638 <SSD1306_Puts>
		SSD1306_GotoXY (4,44);
 800086a:	212c      	movs	r1, #44	; 0x2c
 800086c:	2004      	movs	r0, #4
 800086e:	f000 fe4d 	bl	800150c <SSD1306_GotoXY>
		SSD1306_Puts ("NUMBER:", &Font_11x18, 1);
 8000872:	2201      	movs	r2, #1
 8000874:	4920      	ldr	r1, [pc, #128]	; (80008f8 <OLED_page_sc+0xd0>)
 8000876:	4823      	ldr	r0, [pc, #140]	; (8000904 <OLED_page_sc+0xdc>)
 8000878:	f000 fede 	bl	8001638 <SSD1306_Puts>
		SSD1306_DrawLine(0, 1, 128, 1, SSD1306_COLOR_WHITE);
 800087c:	2301      	movs	r3, #1
 800087e:	9300      	str	r3, [sp, #0]
 8000880:	2301      	movs	r3, #1
 8000882:	2280      	movs	r2, #128	; 0x80
 8000884:	2101      	movs	r1, #1
 8000886:	2000      	movs	r0, #0
 8000888:	f000 fefb 	bl	8001682 <SSD1306_DrawLine>
		SSD1306_DrawLine(0, 0, 0, 64, SSD1306_COLOR_WHITE);
 800088c:	2301      	movs	r3, #1
 800088e:	9300      	str	r3, [sp, #0]
 8000890:	2340      	movs	r3, #64	; 0x40
 8000892:	2200      	movs	r2, #0
 8000894:	2100      	movs	r1, #0
 8000896:	2000      	movs	r0, #0
 8000898:	f000 fef3 	bl	8001682 <SSD1306_DrawLine>
		SSD1306_DrawLine(128, 0, 128, 64, SSD1306_COLOR_WHITE);
 800089c:	2301      	movs	r3, #1
 800089e:	9300      	str	r3, [sp, #0]
 80008a0:	2340      	movs	r3, #64	; 0x40
 80008a2:	2280      	movs	r2, #128	; 0x80
 80008a4:	2100      	movs	r1, #0
 80008a6:	2080      	movs	r0, #128	; 0x80
 80008a8:	f000 feeb 	bl	8001682 <SSD1306_DrawLine>
		SSD1306_DrawLine(0, 64, 128, 64, SSD1306_COLOR_WHITE);
 80008ac:	2301      	movs	r3, #1
 80008ae:	9300      	str	r3, [sp, #0]
 80008b0:	2340      	movs	r3, #64	; 0x40
 80008b2:	2280      	movs	r2, #128	; 0x80
 80008b4:	2140      	movs	r1, #64	; 0x40
 80008b6:	2000      	movs	r0, #0
 80008b8:	f000 fee3 	bl	8001682 <SSD1306_DrawLine>
		SSD1306_DrawRectangle(100, 2, 27, 62, SSD1306_COLOR_WHITE);
 80008bc:	2301      	movs	r3, #1
 80008be:	9300      	str	r3, [sp, #0]
 80008c0:	233e      	movs	r3, #62	; 0x3e
 80008c2:	221b      	movs	r2, #27
 80008c4:	2102      	movs	r1, #2
 80008c6:	2064      	movs	r0, #100	; 0x64
 80008c8:	f000 ffd6 	bl	8001878 <SSD1306_DrawRectangle>
		SSD1306_GotoXY (110,25);
 80008cc:	2119      	movs	r1, #25
 80008ce:	206e      	movs	r0, #110	; 0x6e
 80008d0:	f000 fe1c 	bl	800150c <SSD1306_GotoXY>
		SSD1306_Putc ((char)(pageNumber+'0'), &Font_11x18, 1);
 80008d4:	4b0c      	ldr	r3, [pc, #48]	; (8000908 <OLED_page_sc+0xe0>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	b2db      	uxtb	r3, r3
 80008da:	3330      	adds	r3, #48	; 0x30
 80008dc:	b2db      	uxtb	r3, r3
 80008de:	2201      	movs	r2, #1
 80008e0:	4905      	ldr	r1, [pc, #20]	; (80008f8 <OLED_page_sc+0xd0>)
 80008e2:	4618      	mov	r0, r3
 80008e4:	f000 fe28 	bl	8001538 <SSD1306_Putc>
		SSD1306_UpdateScreen();
 80008e8:	f000 fd6a 	bl	80013c0 <SSD1306_UpdateScreen>
	}
}
 80008ec:	bf00      	nop
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	20000574 	.word	0x20000574
 80008f8:	20000000 	.word	0x20000000
 80008fc:	0800aadc 	.word	0x0800aadc
 8000900:	0800aae4 	.word	0x0800aae4
 8000904:	0800aaec 	.word	0x0800aaec
 8000908:	20000570 	.word	0x20000570

0800090c <OLED_login_sc>:

/*! \brief Funkcja wyświetlająca ekran logowania
 * 	Funkcja wyświetlająca ekran logowania na wyświetlaczu OLED przy pomocy połączenia I2C
 */
void OLED_login_sc(){
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af02      	add	r7, sp, #8
	static uint32_t lastRefresh = 0;
	if(HAL_GetTick() - lastRefresh > 1000){
 8000912:	f001 fd77 	bl	8002404 <HAL_GetTick>
 8000916:	4602      	mov	r2, r0
 8000918:	4b2e      	ldr	r3, [pc, #184]	; (80009d4 <OLED_login_sc+0xc8>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	1ad3      	subs	r3, r2, r3
 800091e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000922:	d954      	bls.n	80009ce <OLED_login_sc+0xc2>
		SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000924:	2000      	movs	r0, #0
 8000926:	f000 fd79 	bl	800141c <SSD1306_Fill>
		SSD1306_GotoXY (4,6);
 800092a:	2106      	movs	r1, #6
 800092c:	2004      	movs	r0, #4
 800092e:	f000 fded 	bl	800150c <SSD1306_GotoXY>
		SSD1306_Puts ("-ENTER-", &Font_11x18, 1);
 8000932:	2201      	movs	r2, #1
 8000934:	4928      	ldr	r1, [pc, #160]	; (80009d8 <OLED_login_sc+0xcc>)
 8000936:	4829      	ldr	r0, [pc, #164]	; (80009dc <OLED_login_sc+0xd0>)
 8000938:	f000 fe7e 	bl	8001638 <SSD1306_Puts>
		SSD1306_GotoXY (4,25);
 800093c:	2119      	movs	r1, #25
 800093e:	2004      	movs	r0, #4
 8000940:	f000 fde4 	bl	800150c <SSD1306_GotoXY>
		SSD1306_Puts ("PASSWORD", &Font_11x18, 1);
 8000944:	2201      	movs	r2, #1
 8000946:	4924      	ldr	r1, [pc, #144]	; (80009d8 <OLED_login_sc+0xcc>)
 8000948:	4825      	ldr	r0, [pc, #148]	; (80009e0 <OLED_login_sc+0xd4>)
 800094a:	f000 fe75 	bl	8001638 <SSD1306_Puts>
		SSD1306_GotoXY (4,44);
 800094e:	212c      	movs	r1, #44	; 0x2c
 8000950:	2004      	movs	r0, #4
 8000952:	f000 fddb 	bl	800150c <SSD1306_GotoXY>
		SSD1306_Puts ("TRIES:", &Font_11x18, 1);
 8000956:	2201      	movs	r2, #1
 8000958:	491f      	ldr	r1, [pc, #124]	; (80009d8 <OLED_login_sc+0xcc>)
 800095a:	4822      	ldr	r0, [pc, #136]	; (80009e4 <OLED_login_sc+0xd8>)
 800095c:	f000 fe6c 	bl	8001638 <SSD1306_Puts>
		SSD1306_DrawLine(0, 1, 128, 1, SSD1306_COLOR_WHITE);
 8000960:	2301      	movs	r3, #1
 8000962:	9300      	str	r3, [sp, #0]
 8000964:	2301      	movs	r3, #1
 8000966:	2280      	movs	r2, #128	; 0x80
 8000968:	2101      	movs	r1, #1
 800096a:	2000      	movs	r0, #0
 800096c:	f000 fe89 	bl	8001682 <SSD1306_DrawLine>
		SSD1306_DrawLine(0, 0, 0, 64, SSD1306_COLOR_WHITE);
 8000970:	2301      	movs	r3, #1
 8000972:	9300      	str	r3, [sp, #0]
 8000974:	2340      	movs	r3, #64	; 0x40
 8000976:	2200      	movs	r2, #0
 8000978:	2100      	movs	r1, #0
 800097a:	2000      	movs	r0, #0
 800097c:	f000 fe81 	bl	8001682 <SSD1306_DrawLine>
		SSD1306_DrawLine(128, 0, 128, 64, SSD1306_COLOR_WHITE);
 8000980:	2301      	movs	r3, #1
 8000982:	9300      	str	r3, [sp, #0]
 8000984:	2340      	movs	r3, #64	; 0x40
 8000986:	2280      	movs	r2, #128	; 0x80
 8000988:	2100      	movs	r1, #0
 800098a:	2080      	movs	r0, #128	; 0x80
 800098c:	f000 fe79 	bl	8001682 <SSD1306_DrawLine>
		SSD1306_DrawLine(0, 64, 128, 64, SSD1306_COLOR_WHITE);
 8000990:	2301      	movs	r3, #1
 8000992:	9300      	str	r3, [sp, #0]
 8000994:	2340      	movs	r3, #64	; 0x40
 8000996:	2280      	movs	r2, #128	; 0x80
 8000998:	2140      	movs	r1, #64	; 0x40
 800099a:	2000      	movs	r0, #0
 800099c:	f000 fe71 	bl	8001682 <SSD1306_DrawLine>
		SSD1306_DrawRectangle(100, 2, 27, 62, SSD1306_COLOR_WHITE);
 80009a0:	2301      	movs	r3, #1
 80009a2:	9300      	str	r3, [sp, #0]
 80009a4:	233e      	movs	r3, #62	; 0x3e
 80009a6:	221b      	movs	r2, #27
 80009a8:	2102      	movs	r1, #2
 80009aa:	2064      	movs	r0, #100	; 0x64
 80009ac:	f000 ff64 	bl	8001878 <SSD1306_DrawRectangle>
		SSD1306_GotoXY (110,25);
 80009b0:	2119      	movs	r1, #25
 80009b2:	206e      	movs	r0, #110	; 0x6e
 80009b4:	f000 fdaa 	bl	800150c <SSD1306_GotoXY>
		SSD1306_Putc ((char)(loginTries+'0'), &Font_11x18, 1);
 80009b8:	4b0b      	ldr	r3, [pc, #44]	; (80009e8 <OLED_login_sc+0xdc>)
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	3330      	adds	r3, #48	; 0x30
 80009be:	b2db      	uxtb	r3, r3
 80009c0:	2201      	movs	r2, #1
 80009c2:	4905      	ldr	r1, [pc, #20]	; (80009d8 <OLED_login_sc+0xcc>)
 80009c4:	4618      	mov	r0, r3
 80009c6:	f000 fdb7 	bl	8001538 <SSD1306_Putc>
		SSD1306_UpdateScreen();
 80009ca:	f000 fcf9 	bl	80013c0 <SSD1306_UpdateScreen>
	}
}
 80009ce:	bf00      	nop
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	20000578 	.word	0x20000578
 80009d8:	20000000 	.word	0x20000000
 80009dc:	0800aaf4 	.word	0x0800aaf4
 80009e0:	0800aafc 	.word	0x0800aafc
 80009e4:	0800ab08 	.word	0x0800ab08
 80009e8:	20000092 	.word	0x20000092

080009ec <OLED_block_sc>:

/*! \brief Funkcja wyświetlająca ekran blokady
 * 	Funkcja wyświetlająca ekran blokady na wyświetlaczu OLED przy pomocy połączenia I2C
 */
void OLED_block_sc(){
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af02      	add	r7, sp, #8
	static uint32_t lastRefresh = 0;
	if(HAL_GetTick() - lastRefresh > 1000){
 80009f2:	f001 fd07 	bl	8002404 <HAL_GetTick>
 80009f6:	4602      	mov	r2, r0
 80009f8:	4b1f      	ldr	r3, [pc, #124]	; (8000a78 <OLED_block_sc+0x8c>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	1ad3      	subs	r3, r2, r3
 80009fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000a02:	d936      	bls.n	8000a72 <OLED_block_sc+0x86>
		SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000a04:	2000      	movs	r0, #0
 8000a06:	f000 fd09 	bl	800141c <SSD1306_Fill>
		SSD1306_GotoXY (4,6);
 8000a0a:	2106      	movs	r1, #6
 8000a0c:	2004      	movs	r0, #4
 8000a0e:	f000 fd7d 	bl	800150c <SSD1306_GotoXY>
		SSD1306_Puts ("- DEVICE  -", &Font_11x18, 1);
 8000a12:	2201      	movs	r2, #1
 8000a14:	4919      	ldr	r1, [pc, #100]	; (8000a7c <OLED_block_sc+0x90>)
 8000a16:	481a      	ldr	r0, [pc, #104]	; (8000a80 <OLED_block_sc+0x94>)
 8000a18:	f000 fe0e 	bl	8001638 <SSD1306_Puts>
		SSD1306_GotoXY (4,25);
 8000a1c:	2119      	movs	r1, #25
 8000a1e:	2004      	movs	r0, #4
 8000a20:	f000 fd74 	bl	800150c <SSD1306_GotoXY>
		SSD1306_Puts ("- BLOCKED -", &Font_11x18, 1);
 8000a24:	2201      	movs	r2, #1
 8000a26:	4915      	ldr	r1, [pc, #84]	; (8000a7c <OLED_block_sc+0x90>)
 8000a28:	4816      	ldr	r0, [pc, #88]	; (8000a84 <OLED_block_sc+0x98>)
 8000a2a:	f000 fe05 	bl	8001638 <SSD1306_Puts>
		SSD1306_DrawLine(0, 1, 128, 1, SSD1306_COLOR_WHITE);
 8000a2e:	2301      	movs	r3, #1
 8000a30:	9300      	str	r3, [sp, #0]
 8000a32:	2301      	movs	r3, #1
 8000a34:	2280      	movs	r2, #128	; 0x80
 8000a36:	2101      	movs	r1, #1
 8000a38:	2000      	movs	r0, #0
 8000a3a:	f000 fe22 	bl	8001682 <SSD1306_DrawLine>
		SSD1306_DrawLine(0, 0, 0, 64, SSD1306_COLOR_WHITE);
 8000a3e:	2301      	movs	r3, #1
 8000a40:	9300      	str	r3, [sp, #0]
 8000a42:	2340      	movs	r3, #64	; 0x40
 8000a44:	2200      	movs	r2, #0
 8000a46:	2100      	movs	r1, #0
 8000a48:	2000      	movs	r0, #0
 8000a4a:	f000 fe1a 	bl	8001682 <SSD1306_DrawLine>
		SSD1306_DrawLine(128, 0, 128, 64, SSD1306_COLOR_WHITE);
 8000a4e:	2301      	movs	r3, #1
 8000a50:	9300      	str	r3, [sp, #0]
 8000a52:	2340      	movs	r3, #64	; 0x40
 8000a54:	2280      	movs	r2, #128	; 0x80
 8000a56:	2100      	movs	r1, #0
 8000a58:	2080      	movs	r0, #128	; 0x80
 8000a5a:	f000 fe12 	bl	8001682 <SSD1306_DrawLine>
		SSD1306_DrawLine(0, 64, 128, 64, SSD1306_COLOR_WHITE);
 8000a5e:	2301      	movs	r3, #1
 8000a60:	9300      	str	r3, [sp, #0]
 8000a62:	2340      	movs	r3, #64	; 0x40
 8000a64:	2280      	movs	r2, #128	; 0x80
 8000a66:	2140      	movs	r1, #64	; 0x40
 8000a68:	2000      	movs	r0, #0
 8000a6a:	f000 fe0a 	bl	8001682 <SSD1306_DrawLine>
		SSD1306_UpdateScreen();
 8000a6e:	f000 fca7 	bl	80013c0 <SSD1306_UpdateScreen>
	}
}
 8000a72:	bf00      	nop
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	2000057c 	.word	0x2000057c
 8000a7c:	20000000 	.word	0x20000000
 8000a80:	0800ab10 	.word	0x0800ab10
 8000a84:	0800ab1c 	.word	0x0800ab1c

08000a88 <sendUSB>:

/*! \brief Funkcja przesyłająca hasło do komputera po USB
 * 	Funkcja dostaje tablice znaków char, którą po literze wysyła do komputera poprzez połączenie USB
 */
void sendUSB(uint8_t *pass){
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b084      	sub	sp, #16
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
	while(*pass != '\0'){
 8000a90:	e066      	b.n	8000b60 <sendUSB+0xd8>
		for(int i=0; i<KEYS_NUM; i++){
 8000a92:	2300      	movs	r3, #0
 8000a94:	60fb      	str	r3, [r7, #12]
 8000a96:	e060      	b.n	8000b5a <sendUSB+0xd2>
			if(*pass == keys[i].value){
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	7819      	ldrb	r1, [r3, #0]
 8000a9c:	4834      	ldr	r0, [pc, #208]	; (8000b70 <sendUSB+0xe8>)
 8000a9e:	68fa      	ldr	r2, [r7, #12]
 8000aa0:	4613      	mov	r3, r2
 8000aa2:	005b      	lsls	r3, r3, #1
 8000aa4:	4413      	add	r3, r2
 8000aa6:	4403      	add	r3, r0
 8000aa8:	3301      	adds	r3, #1
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	4299      	cmp	r1, r3
 8000aae:	d11f      	bne.n	8000af0 <sendUSB+0x68>
				keyboardhid.KEYCODE1 = keys[i].hex_num;
 8000ab0:	492f      	ldr	r1, [pc, #188]	; (8000b70 <sendUSB+0xe8>)
 8000ab2:	68fa      	ldr	r2, [r7, #12]
 8000ab4:	4613      	mov	r3, r2
 8000ab6:	005b      	lsls	r3, r3, #1
 8000ab8:	4413      	add	r3, r2
 8000aba:	440b      	add	r3, r1
 8000abc:	781a      	ldrb	r2, [r3, #0]
 8000abe:	4b2d      	ldr	r3, [pc, #180]	; (8000b74 <sendUSB+0xec>)
 8000ac0:	709a      	strb	r2, [r3, #2]
				USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*)&keyboardhid, sizeof(keyboardhid));
 8000ac2:	2208      	movs	r2, #8
 8000ac4:	492b      	ldr	r1, [pc, #172]	; (8000b74 <sendUSB+0xec>)
 8000ac6:	482c      	ldr	r0, [pc, #176]	; (8000b78 <sendUSB+0xf0>)
 8000ac8:	f007 fad4 	bl	8008074 <USBD_HID_SendReport>
				HAL_Delay(50);
 8000acc:	2032      	movs	r0, #50	; 0x32
 8000ace:	f001 fca5 	bl	800241c <HAL_Delay>
				keyboardhid.KEYCODE1 = 0x00;
 8000ad2:	4b28      	ldr	r3, [pc, #160]	; (8000b74 <sendUSB+0xec>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	709a      	strb	r2, [r3, #2]
				USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*)&keyboardhid, sizeof(keyboardhid));
 8000ad8:	2208      	movs	r2, #8
 8000ada:	4926      	ldr	r1, [pc, #152]	; (8000b74 <sendUSB+0xec>)
 8000adc:	4826      	ldr	r0, [pc, #152]	; (8000b78 <sendUSB+0xf0>)
 8000ade:	f007 fac9 	bl	8008074 <USBD_HID_SendReport>
				HAL_Delay(50);
 8000ae2:	2032      	movs	r0, #50	; 0x32
 8000ae4:	f001 fc9a 	bl	800241c <HAL_Delay>
				pass++;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	3301      	adds	r3, #1
 8000aec:	607b      	str	r3, [r7, #4]
				break;
 8000aee:	e037      	b.n	8000b60 <sendUSB+0xd8>
			}
			else if(*pass == keys[i].shiftValue){
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	7819      	ldrb	r1, [r3, #0]
 8000af4:	481e      	ldr	r0, [pc, #120]	; (8000b70 <sendUSB+0xe8>)
 8000af6:	68fa      	ldr	r2, [r7, #12]
 8000af8:	4613      	mov	r3, r2
 8000afa:	005b      	lsls	r3, r3, #1
 8000afc:	4413      	add	r3, r2
 8000afe:	4403      	add	r3, r0
 8000b00:	3302      	adds	r3, #2
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	4299      	cmp	r1, r3
 8000b06:	d125      	bne.n	8000b54 <sendUSB+0xcc>
				keyboardhid.MODIFIER = 0x02;
 8000b08:	4b1a      	ldr	r3, [pc, #104]	; (8000b74 <sendUSB+0xec>)
 8000b0a:	2202      	movs	r2, #2
 8000b0c:	701a      	strb	r2, [r3, #0]
				keyboardhid.KEYCODE1 = keys[i].hex_num;
 8000b0e:	4918      	ldr	r1, [pc, #96]	; (8000b70 <sendUSB+0xe8>)
 8000b10:	68fa      	ldr	r2, [r7, #12]
 8000b12:	4613      	mov	r3, r2
 8000b14:	005b      	lsls	r3, r3, #1
 8000b16:	4413      	add	r3, r2
 8000b18:	440b      	add	r3, r1
 8000b1a:	781a      	ldrb	r2, [r3, #0]
 8000b1c:	4b15      	ldr	r3, [pc, #84]	; (8000b74 <sendUSB+0xec>)
 8000b1e:	709a      	strb	r2, [r3, #2]
				USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*)&keyboardhid, sizeof(keyboardhid));
 8000b20:	2208      	movs	r2, #8
 8000b22:	4914      	ldr	r1, [pc, #80]	; (8000b74 <sendUSB+0xec>)
 8000b24:	4814      	ldr	r0, [pc, #80]	; (8000b78 <sendUSB+0xf0>)
 8000b26:	f007 faa5 	bl	8008074 <USBD_HID_SendReport>
				HAL_Delay(50);
 8000b2a:	2032      	movs	r0, #50	; 0x32
 8000b2c:	f001 fc76 	bl	800241c <HAL_Delay>
				keyboardhid.MODIFIER = 0x00;
 8000b30:	4b10      	ldr	r3, [pc, #64]	; (8000b74 <sendUSB+0xec>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	701a      	strb	r2, [r3, #0]
				keyboardhid.KEYCODE1 = 0x00;
 8000b36:	4b0f      	ldr	r3, [pc, #60]	; (8000b74 <sendUSB+0xec>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	709a      	strb	r2, [r3, #2]
				USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*)&keyboardhid, sizeof(keyboardhid));
 8000b3c:	2208      	movs	r2, #8
 8000b3e:	490d      	ldr	r1, [pc, #52]	; (8000b74 <sendUSB+0xec>)
 8000b40:	480d      	ldr	r0, [pc, #52]	; (8000b78 <sendUSB+0xf0>)
 8000b42:	f007 fa97 	bl	8008074 <USBD_HID_SendReport>
				HAL_Delay(50);
 8000b46:	2032      	movs	r0, #50	; 0x32
 8000b48:	f001 fc68 	bl	800241c <HAL_Delay>
				pass++;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	3301      	adds	r3, #1
 8000b50:	607b      	str	r3, [r7, #4]
				break;
 8000b52:	e005      	b.n	8000b60 <sendUSB+0xd8>
		for(int i=0; i<KEYS_NUM; i++){
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	3301      	adds	r3, #1
 8000b58:	60fb      	str	r3, [r7, #12]
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	2b2e      	cmp	r3, #46	; 0x2e
 8000b5e:	dd9b      	ble.n	8000a98 <sendUSB+0x10>
	while(*pass != '\0'){
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d194      	bne.n	8000a92 <sendUSB+0xa>
			}
		}
	}
}
 8000b68:	bf00      	nop
 8000b6a:	3710      	adds	r7, #16
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	20000008 	.word	0x20000008
 8000b74:	20000564 	.word	0x20000564
 8000b78:	20000ba4 	.word	0x20000ba4

08000b7c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b7e:	b09b      	sub	sp, #108	; 0x6c
 8000b80:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000b82:	f001 fbd9 	bl	8002338 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000b86:	f000 f937 	bl	8000df8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000b8a:	f7ff fd01 	bl	8000590 <MX_GPIO_Init>
	MX_I2C1_Init();
 8000b8e:	f7ff fda9 	bl	80006e4 <MX_I2C1_Init>
	MX_SPI3_Init();
 8000b92:	f000 fad3 	bl	800113c <MX_SPI3_Init>
	MX_TIM2_Init();
 8000b96:	f001 f81f 	bl	8001bd8 <MX_TIM2_Init>
	if(HAL_GPIO_ReadPin(ROT_BUT_GPIO_Port, ROT_BUT_Pin)){
 8000b9a:	2102      	movs	r1, #2
 8000b9c:	4882      	ldr	r0, [pc, #520]	; (8000da8 <main+0x22c>)
 8000b9e:	f001 fef3 	bl	8002988 <HAL_GPIO_ReadPin>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d006      	beq.n	8000bb6 <main+0x3a>
		MX_USB_DEVICE_Init(0);
 8000ba8:	2000      	movs	r0, #0
 8000baa:	f008 fbdd 	bl	8009368 <MX_USB_DEVICE_Init>
		deviceFLAG = 0;
 8000bae:	4b7f      	ldr	r3, [pc, #508]	; (8000dac <main+0x230>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	701a      	strb	r2, [r3, #0]
 8000bb4:	e005      	b.n	8000bc2 <main+0x46>
	}else{
		MX_USB_DEVICE_Init(1);
 8000bb6:	2001      	movs	r0, #1
 8000bb8:	f008 fbd6 	bl	8009368 <MX_USB_DEVICE_Init>
		deviceFLAG = 1;
 8000bbc:	4b7b      	ldr	r3, [pc, #492]	; (8000dac <main+0x230>)
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	701a      	strb	r2, [r3, #0]
	}
	/* USER CODE BEGIN 2 */

	//---- Inicjalizacja wyświetlacza OLED ----
	SSD1306_Init();
 8000bc2:	f000 fb39 	bl	8001238 <SSD1306_Init>

	//---- Inicjalizacja obsługi enkodera ----
	HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 8000bc6:	213c      	movs	r1, #60	; 0x3c
 8000bc8:	4879      	ldr	r0, [pc, #484]	; (8000db0 <main+0x234>)
 8000bca:	f005 f825 	bl	8005c18 <HAL_TIM_Encoder_Start_IT>

	//---- Inicjalizacja pamięci FLASH ----
	W25qxx_Init();
 8000bce:	f001 f9b7 	bl	8001f40 <W25qxx_Init>
	memcpy(passwordWrite, "0\0", sizeof(passwordWrite));
	XORCipher(passwordWrite, cipherKey);
	W25qxx_WritePage(passwordWrite, 10, 0, 64);
	*/
	//---- Inicjalizacja obsługi macierzy przycisków
	HAL_GPIO_WritePin(COL1_GPIO_Port, COL1_Pin, GPIO_PIN_SET);
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	2120      	movs	r1, #32
 8000bd6:	4877      	ldr	r0, [pc, #476]	; (8000db4 <main+0x238>)
 8000bd8:	f001 feee 	bl	80029b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(COL2_GPIO_Port, COL2_Pin, GPIO_PIN_SET);
 8000bdc:	2201      	movs	r2, #1
 8000bde:	2140      	movs	r1, #64	; 0x40
 8000be0:	4874      	ldr	r0, [pc, #464]	; (8000db4 <main+0x238>)
 8000be2:	f001 fee9 	bl	80029b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(COL3_GPIO_Port, COL3_Pin, GPIO_PIN_SET);
 8000be6:	2201      	movs	r2, #1
 8000be8:	2180      	movs	r1, #128	; 0x80
 8000bea:	4872      	ldr	r0, [pc, #456]	; (8000db4 <main+0x238>)
 8000bec:	f001 fee4 	bl	80029b8 <HAL_GPIO_WritePin>

	//---- LED oznaczający zakończenie setupu
	HAL_GPIO_WritePin(PWR_LED_GPIO_Port, PWR_LED_Pin, 1);
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bf6:	486c      	ldr	r0, [pc, #432]	; (8000da8 <main+0x22c>)
 8000bf8:	f001 fede 	bl	80029b8 <HAL_GPIO_WritePin>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		if(deviceFLAG){
 8000bfc:	4b6b      	ldr	r3, [pc, #428]	; (8000dac <main+0x230>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d05a      	beq.n	8000cba <main+0x13e>
			uint8_t Text[] = "WRITE MODE -> len:nr:password\r\n";
 8000c04:	4b6c      	ldr	r3, [pc, #432]	; (8000db8 <main+0x23c>)
 8000c06:	1d3c      	adds	r4, r7, #4
 8000c08:	461d      	mov	r5, r3
 8000c0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c0e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000c12:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			CDC_Transmit_FS(Text,strlen(Text)); /*when commented the port is recognized*/
 8000c16:	1d3b      	adds	r3, r7, #4
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f7ff fae1 	bl	80001e0 <strlen>
 8000c1e:	4602      	mov	r2, r0
 8000c20:	1d3b      	adds	r3, r7, #4
 8000c22:	4611      	mov	r1, r2
 8000c24:	4618      	mov	r0, r3
 8000c26:	f008 fce9 	bl	80095fc <CDC_Transmit_FS>
			if(ReceivedDataFlag == 1){
 8000c2a:	4b64      	ldr	r3, [pc, #400]	; (8000dbc <main+0x240>)
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	2b01      	cmp	r3, #1
 8000c30:	d13e      	bne.n	8000cb0 <main+0x134>
				ReceivedDataFlag = 0;
 8000c32:	4b62      	ldr	r3, [pc, #392]	; (8000dbc <main+0x240>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	701a      	strb	r2, [r3, #0]
				//MessageLength = sprintf(DataToSend, "Odebrano: %s\n\r", ReceivedData);
				//CDC_Transmit_FS(DataToSend, MessageLength);
				uint8_t text[64];
				for(int i = 0; i<ReceivedLength+1; i++){
 8000c38:	2300      	movs	r3, #0
 8000c3a:	667b      	str	r3, [r7, #100]	; 0x64
 8000c3c:	e00c      	b.n	8000c58 <main+0xdc>
					text[i] = ReceivedData[i];
 8000c3e:	4a60      	ldr	r2, [pc, #384]	; (8000dc0 <main+0x244>)
 8000c40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000c42:	4413      	add	r3, r2
 8000c44:	7819      	ldrb	r1, [r3, #0]
 8000c46:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000c4a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000c4c:	4413      	add	r3, r2
 8000c4e:	460a      	mov	r2, r1
 8000c50:	701a      	strb	r2, [r3, #0]
				for(int i = 0; i<ReceivedLength+1; i++){
 8000c52:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000c54:	3301      	adds	r3, #1
 8000c56:	667b      	str	r3, [r7, #100]	; 0x64
 8000c58:	4b5a      	ldr	r3, [pc, #360]	; (8000dc4 <main+0x248>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	3301      	adds	r3, #1
 8000c5e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000c60:	429a      	cmp	r2, r3
 8000c62:	dbec      	blt.n	8000c3e <main+0xc2>
				}
				memcpy(passwordWrite, text, sizeof(passwordWrite));
 8000c64:	4b58      	ldr	r3, [pc, #352]	; (8000dc8 <main+0x24c>)
 8000c66:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8000c6a:	469c      	mov	ip, r3
 8000c6c:	f104 0e40 	add.w	lr, r4, #64	; 0x40
 8000c70:	4665      	mov	r5, ip
 8000c72:	4626      	mov	r6, r4
 8000c74:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000c76:	6028      	str	r0, [r5, #0]
 8000c78:	6069      	str	r1, [r5, #4]
 8000c7a:	60aa      	str	r2, [r5, #8]
 8000c7c:	60eb      	str	r3, [r5, #12]
 8000c7e:	3410      	adds	r4, #16
 8000c80:	f10c 0c10 	add.w	ip, ip, #16
 8000c84:	4574      	cmp	r4, lr
 8000c86:	d1f3      	bne.n	8000c70 <main+0xf4>
				XORCipher(passwordWrite, cipherKey);
 8000c88:	4950      	ldr	r1, [pc, #320]	; (8000dcc <main+0x250>)
 8000c8a:	484f      	ldr	r0, [pc, #316]	; (8000dc8 <main+0x24c>)
 8000c8c:	f7ff fda0 	bl	80007d0 <XORCipher>
				W25qxx_WritePage(passwordWrite, (uint32_t)ReceivedPassNr, 0, 64);
 8000c90:	4b4f      	ldr	r3, [pc, #316]	; (8000dd0 <main+0x254>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	4619      	mov	r1, r3
 8000c96:	2340      	movs	r3, #64	; 0x40
 8000c98:	2200      	movs	r2, #0
 8000c9a:	484b      	ldr	r0, [pc, #300]	; (8000dc8 <main+0x24c>)
 8000c9c:	f001 fa1c 	bl	80020d8 <W25qxx_WritePage>
				memset(ReceivedData,0, 64);
 8000ca0:	2240      	movs	r2, #64	; 0x40
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	4846      	ldr	r0, [pc, #280]	; (8000dc0 <main+0x244>)
 8000ca6:	f009 f92d 	bl	8009f04 <memset>
				ReceivedPassNr = 0;
 8000caa:	4b49      	ldr	r3, [pc, #292]	; (8000dd0 <main+0x254>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	701a      	strb	r2, [r3, #0]
			}
			HAL_Delay(1000);
 8000cb0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cb4:	f001 fbb2 	bl	800241c <HAL_Delay>
 8000cb8:	e7a0      	b.n	8000bfc <main+0x80>
		}else{
			if(deviceState == 0){
 8000cba:	4b46      	ldr	r3, [pc, #280]	; (8000dd4 <main+0x258>)
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d149      	bne.n	8000d56 <main+0x1da>
				OLED_login_sc();
 8000cc2:	f7ff fe23 	bl	800090c <OLED_login_sc>
				if(keyFlag){
 8000cc6:	4b44      	ldr	r3, [pc, #272]	; (8000dd8 <main+0x25c>)
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	b2db      	uxtb	r3, r3
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d010      	beq.n	8000cf2 <main+0x176>
					loginBuff[loginCounter] = keyPressed;
 8000cd0:	4b42      	ldr	r3, [pc, #264]	; (8000ddc <main+0x260>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	461a      	mov	r2, r3
 8000cd6:	4b42      	ldr	r3, [pc, #264]	; (8000de0 <main+0x264>)
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	b2d9      	uxtb	r1, r3
 8000cdc:	4b41      	ldr	r3, [pc, #260]	; (8000de4 <main+0x268>)
 8000cde:	5499      	strb	r1, [r3, r2]
					loginCounter++;
 8000ce0:	4b3e      	ldr	r3, [pc, #248]	; (8000ddc <main+0x260>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	3301      	adds	r3, #1
 8000ce6:	b2da      	uxtb	r2, r3
 8000ce8:	4b3c      	ldr	r3, [pc, #240]	; (8000ddc <main+0x260>)
 8000cea:	701a      	strb	r2, [r3, #0]
					keyFlag = 0;
 8000cec:	4b3a      	ldr	r3, [pc, #232]	; (8000dd8 <main+0x25c>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	701a      	strb	r2, [r3, #0]
				}
				if(loginCounter == 4){
 8000cf2:	4b3a      	ldr	r3, [pc, #232]	; (8000ddc <main+0x260>)
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	2b04      	cmp	r3, #4
 8000cf8:	d124      	bne.n	8000d44 <main+0x1c8>
					if(login[0] == loginBuff[0] && login[1] == loginBuff[1] && login[2] == loginBuff[2] && login[3] == loginBuff[3]){
 8000cfa:	4b3b      	ldr	r3, [pc, #236]	; (8000de8 <main+0x26c>)
 8000cfc:	781a      	ldrb	r2, [r3, #0]
 8000cfe:	4b39      	ldr	r3, [pc, #228]	; (8000de4 <main+0x268>)
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	429a      	cmp	r2, r3
 8000d04:	d115      	bne.n	8000d32 <main+0x1b6>
 8000d06:	4b38      	ldr	r3, [pc, #224]	; (8000de8 <main+0x26c>)
 8000d08:	785a      	ldrb	r2, [r3, #1]
 8000d0a:	4b36      	ldr	r3, [pc, #216]	; (8000de4 <main+0x268>)
 8000d0c:	785b      	ldrb	r3, [r3, #1]
 8000d0e:	429a      	cmp	r2, r3
 8000d10:	d10f      	bne.n	8000d32 <main+0x1b6>
 8000d12:	4b35      	ldr	r3, [pc, #212]	; (8000de8 <main+0x26c>)
 8000d14:	789a      	ldrb	r2, [r3, #2]
 8000d16:	4b33      	ldr	r3, [pc, #204]	; (8000de4 <main+0x268>)
 8000d18:	789b      	ldrb	r3, [r3, #2]
 8000d1a:	429a      	cmp	r2, r3
 8000d1c:	d109      	bne.n	8000d32 <main+0x1b6>
 8000d1e:	4b32      	ldr	r3, [pc, #200]	; (8000de8 <main+0x26c>)
 8000d20:	78da      	ldrb	r2, [r3, #3]
 8000d22:	4b30      	ldr	r3, [pc, #192]	; (8000de4 <main+0x268>)
 8000d24:	78db      	ldrb	r3, [r3, #3]
 8000d26:	429a      	cmp	r2, r3
 8000d28:	d103      	bne.n	8000d32 <main+0x1b6>
						deviceState = 1;
 8000d2a:	4b2a      	ldr	r3, [pc, #168]	; (8000dd4 <main+0x258>)
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	701a      	strb	r2, [r3, #0]
 8000d30:	e008      	b.n	8000d44 <main+0x1c8>
					}else{
						loginCounter = 0;
 8000d32:	4b2a      	ldr	r3, [pc, #168]	; (8000ddc <main+0x260>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	701a      	strb	r2, [r3, #0]
						loginTries--;
 8000d38:	4b2c      	ldr	r3, [pc, #176]	; (8000dec <main+0x270>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	3b01      	subs	r3, #1
 8000d3e:	b2da      	uxtb	r2, r3
 8000d40:	4b2a      	ldr	r3, [pc, #168]	; (8000dec <main+0x270>)
 8000d42:	701a      	strb	r2, [r3, #0]
					}
				}
				if(loginTries == 0){
 8000d44:	4b29      	ldr	r3, [pc, #164]	; (8000dec <main+0x270>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	f47f af57 	bne.w	8000bfc <main+0x80>
					deviceState = 99;
 8000d4e:	4b21      	ldr	r3, [pc, #132]	; (8000dd4 <main+0x258>)
 8000d50:	2263      	movs	r2, #99	; 0x63
 8000d52:	701a      	strb	r2, [r3, #0]
 8000d54:	e752      	b.n	8000bfc <main+0x80>
				}
			}
			else if(deviceState == 99){
 8000d56:	4b1f      	ldr	r3, [pc, #124]	; (8000dd4 <main+0x258>)
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	2b63      	cmp	r3, #99	; 0x63
 8000d5c:	d102      	bne.n	8000d64 <main+0x1e8>
				OLED_block_sc();
 8000d5e:	f7ff fe45 	bl	80009ec <OLED_block_sc>
 8000d62:	e74b      	b.n	8000bfc <main+0x80>
			}
			else{
				OLED_page_sc();
 8000d64:	f7ff fd60 	bl	8000828 <OLED_page_sc>
				if(keyFlag){
 8000d68:	4b1b      	ldr	r3, [pc, #108]	; (8000dd8 <main+0x25c>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	f43f af44 	beq.w	8000bfc <main+0x80>
					W25qxx_ReadPage(passwordRead, pageNumber*9+keyPressed, 0, 64);
 8000d74:	4b1e      	ldr	r3, [pc, #120]	; (8000df0 <main+0x274>)
 8000d76:	681a      	ldr	r2, [r3, #0]
 8000d78:	4613      	mov	r3, r2
 8000d7a:	00db      	lsls	r3, r3, #3
 8000d7c:	4413      	add	r3, r2
 8000d7e:	4a18      	ldr	r2, [pc, #96]	; (8000de0 <main+0x264>)
 8000d80:	7812      	ldrb	r2, [r2, #0]
 8000d82:	b2d2      	uxtb	r2, r2
 8000d84:	1899      	adds	r1, r3, r2
 8000d86:	2340      	movs	r3, #64	; 0x40
 8000d88:	2200      	movs	r2, #0
 8000d8a:	481a      	ldr	r0, [pc, #104]	; (8000df4 <main+0x278>)
 8000d8c:	f001 fa2a 	bl	80021e4 <W25qxx_ReadPage>
					XORCipher(passwordRead, cipherKey);
 8000d90:	490e      	ldr	r1, [pc, #56]	; (8000dcc <main+0x250>)
 8000d92:	4818      	ldr	r0, [pc, #96]	; (8000df4 <main+0x278>)
 8000d94:	f7ff fd1c 	bl	80007d0 <XORCipher>
					sendUSB(passwordRead);
 8000d98:	4816      	ldr	r0, [pc, #88]	; (8000df4 <main+0x278>)
 8000d9a:	f7ff fe75 	bl	8000a88 <sendUSB>
					keyFlag = 0;
 8000d9e:	4b0e      	ldr	r3, [pc, #56]	; (8000dd8 <main+0x25c>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	701a      	strb	r2, [r3, #0]
		if(deviceFLAG){
 8000da4:	e72a      	b.n	8000bfc <main+0x80>
 8000da6:	bf00      	nop
 8000da8:	40020400 	.word	0x40020400
 8000dac:	20000538 	.word	0x20000538
 8000db0:	20000b38 	.word	0x20000b38
 8000db4:	40020000 	.word	0x40020000
 8000db8:	0800ab28 	.word	0x0800ab28
 8000dbc:	2000056d 	.word	0x2000056d
 8000dc0:	20000a9c 	.word	0x20000a9c
 8000dc4:	200009ec 	.word	0x200009ec
 8000dc8:	20000a58 	.word	0x20000a58
 8000dcc:	20000098 	.word	0x20000098
 8000dd0:	20000adc 	.word	0x20000adc
 8000dd4:	20000539 	.word	0x20000539
 8000dd8:	20000551 	.word	0x20000551
 8000ddc:	2000053a 	.word	0x2000053a
 8000de0:	20000550 	.word	0x20000550
 8000de4:	20000a98 	.word	0x20000a98
 8000de8:	20000094 	.word	0x20000094
 8000dec:	20000092 	.word	0x20000092
 8000df0:	20000570 	.word	0x20000570
 8000df4:	20000a18 	.word	0x20000a18

08000df8 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b094      	sub	sp, #80	; 0x50
 8000dfc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dfe:	f107 0320 	add.w	r3, r7, #32
 8000e02:	2230      	movs	r2, #48	; 0x30
 8000e04:	2100      	movs	r1, #0
 8000e06:	4618      	mov	r0, r3
 8000e08:	f009 f87c 	bl	8009f04 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e0c:	f107 030c 	add.w	r3, r7, #12
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	605a      	str	r2, [r3, #4]
 8000e16:	609a      	str	r2, [r3, #8]
 8000e18:	60da      	str	r2, [r3, #12]
 8000e1a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	60bb      	str	r3, [r7, #8]
 8000e20:	4b27      	ldr	r3, [pc, #156]	; (8000ec0 <SystemClock_Config+0xc8>)
 8000e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e24:	4a26      	ldr	r2, [pc, #152]	; (8000ec0 <SystemClock_Config+0xc8>)
 8000e26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e2a:	6413      	str	r3, [r2, #64]	; 0x40
 8000e2c:	4b24      	ldr	r3, [pc, #144]	; (8000ec0 <SystemClock_Config+0xc8>)
 8000e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e34:	60bb      	str	r3, [r7, #8]
 8000e36:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e38:	2300      	movs	r3, #0
 8000e3a:	607b      	str	r3, [r7, #4]
 8000e3c:	4b21      	ldr	r3, [pc, #132]	; (8000ec4 <SystemClock_Config+0xcc>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a20      	ldr	r2, [pc, #128]	; (8000ec4 <SystemClock_Config+0xcc>)
 8000e42:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e46:	6013      	str	r3, [r2, #0]
 8000e48:	4b1e      	ldr	r3, [pc, #120]	; (8000ec4 <SystemClock_Config+0xcc>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e50:	607b      	str	r3, [r7, #4]
 8000e52:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e54:	2301      	movs	r3, #1
 8000e56:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e58:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e5c:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e5e:	2302      	movs	r3, #2
 8000e60:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e62:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e66:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 25;
 8000e68:	2319      	movs	r3, #25
 8000e6a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 192;
 8000e6c:	23c0      	movs	r3, #192	; 0xc0
 8000e6e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e70:	2302      	movs	r3, #2
 8000e72:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e74:	2304      	movs	r3, #4
 8000e76:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e78:	f107 0320 	add.w	r3, r7, #32
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f003 fcbd 	bl	80047fc <HAL_RCC_OscConfig>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <SystemClock_Config+0x94>
	{
		Error_Handler();
 8000e88:	f000 f950 	bl	800112c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e8c:	230f      	movs	r3, #15
 8000e8e:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e90:	2302      	movs	r3, #2
 8000e92:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e94:	2300      	movs	r3, #0
 8000e96:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e9c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000ea2:	f107 030c 	add.w	r3, r7, #12
 8000ea6:	2103      	movs	r1, #3
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f003 ff17 	bl	8004cdc <HAL_RCC_ClockConfig>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <SystemClock_Config+0xc0>
	{
		Error_Handler();
 8000eb4:	f000 f93a 	bl	800112c <Error_Handler>
	}
}
 8000eb8:	bf00      	nop
 8000eba:	3750      	adds	r7, #80	; 0x50
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	40023800 	.word	0x40023800
 8000ec4:	40007000 	.word	0x40007000

08000ec8 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
	counter = __HAL_TIM_GET_COUNTER(htim);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ed6:	4a1f      	ldr	r2, [pc, #124]	; (8000f54 <HAL_TIM_IC_CaptureCallback+0x8c>)
 8000ed8:	6013      	str	r3, [r2, #0]
	count = (int16_t)counter;
 8000eda:	4b1e      	ldr	r3, [pc, #120]	; (8000f54 <HAL_TIM_IC_CaptureCallback+0x8c>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	b21a      	sxth	r2, r3
 8000ee0:	4b1d      	ldr	r3, [pc, #116]	; (8000f58 <HAL_TIM_IC_CaptureCallback+0x90>)
 8000ee2:	801a      	strh	r2, [r3, #0]
	if(count - old_count > 5)
 8000ee4:	4b1c      	ldr	r3, [pc, #112]	; (8000f58 <HAL_TIM_IC_CaptureCallback+0x90>)
 8000ee6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000eea:	461a      	mov	r2, r3
 8000eec:	4b1b      	ldr	r3, [pc, #108]	; (8000f5c <HAL_TIM_IC_CaptureCallback+0x94>)
 8000eee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ef2:	1ad3      	subs	r3, r2, r3
 8000ef4:	2b05      	cmp	r3, #5
 8000ef6:	dd0e      	ble.n	8000f16 <HAL_TIM_IC_CaptureCallback+0x4e>
	{
		if(pageNumber > 0)
 8000ef8:	4b19      	ldr	r3, [pc, #100]	; (8000f60 <HAL_TIM_IC_CaptureCallback+0x98>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d004      	beq.n	8000f0a <HAL_TIM_IC_CaptureCallback+0x42>
			pageNumber--;
 8000f00:	4b17      	ldr	r3, [pc, #92]	; (8000f60 <HAL_TIM_IC_CaptureCallback+0x98>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	3b01      	subs	r3, #1
 8000f06:	4a16      	ldr	r2, [pc, #88]	; (8000f60 <HAL_TIM_IC_CaptureCallback+0x98>)
 8000f08:	6013      	str	r3, [r2, #0]
		old_count = count;
 8000f0a:	4b13      	ldr	r3, [pc, #76]	; (8000f58 <HAL_TIM_IC_CaptureCallback+0x90>)
 8000f0c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000f10:	4b12      	ldr	r3, [pc, #72]	; (8000f5c <HAL_TIM_IC_CaptureCallback+0x94>)
 8000f12:	801a      	strh	r2, [r3, #0]
		if(pageNumber < 9)
			pageNumber++;
		old_count = count;
	}

}
 8000f14:	e018      	b.n	8000f48 <HAL_TIM_IC_CaptureCallback+0x80>
	}else if(count - old_count < -5)
 8000f16:	4b10      	ldr	r3, [pc, #64]	; (8000f58 <HAL_TIM_IC_CaptureCallback+0x90>)
 8000f18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	4b0f      	ldr	r3, [pc, #60]	; (8000f5c <HAL_TIM_IC_CaptureCallback+0x94>)
 8000f20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f24:	1ad3      	subs	r3, r2, r3
 8000f26:	f113 0f05 	cmn.w	r3, #5
 8000f2a:	da0d      	bge.n	8000f48 <HAL_TIM_IC_CaptureCallback+0x80>
		if(pageNumber < 9)
 8000f2c:	4b0c      	ldr	r3, [pc, #48]	; (8000f60 <HAL_TIM_IC_CaptureCallback+0x98>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	2b08      	cmp	r3, #8
 8000f32:	d804      	bhi.n	8000f3e <HAL_TIM_IC_CaptureCallback+0x76>
			pageNumber++;
 8000f34:	4b0a      	ldr	r3, [pc, #40]	; (8000f60 <HAL_TIM_IC_CaptureCallback+0x98>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	3301      	adds	r3, #1
 8000f3a:	4a09      	ldr	r2, [pc, #36]	; (8000f60 <HAL_TIM_IC_CaptureCallback+0x98>)
 8000f3c:	6013      	str	r3, [r2, #0]
		old_count = count;
 8000f3e:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <HAL_TIM_IC_CaptureCallback+0x90>)
 8000f40:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000f44:	4b05      	ldr	r3, [pc, #20]	; (8000f5c <HAL_TIM_IC_CaptureCallback+0x94>)
 8000f46:	801a      	strh	r2, [r3, #0]
}
 8000f48:	bf00      	nop
 8000f4a:	370c      	adds	r7, #12
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr
 8000f54:	2000055c 	.word	0x2000055c
 8000f58:	20000560 	.word	0x20000560
 8000f5c:	20000562 	.word	0x20000562
 8000f60:	20000570 	.word	0x20000570

08000f64 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	80fb      	strh	r3, [r7, #6]
	currentMillis = HAL_GetTick();
 8000f6e:	f001 fa49 	bl	8002404 <HAL_GetTick>
 8000f72:	4602      	mov	r2, r0
 8000f74:	4b66      	ldr	r3, [pc, #408]	; (8001110 <HAL_GPIO_EXTI_Callback+0x1ac>)
 8000f76:	601a      	str	r2, [r3, #0]
	if(currentMillis - previousMillis > 300)
 8000f78:	4b65      	ldr	r3, [pc, #404]	; (8001110 <HAL_GPIO_EXTI_Callback+0x1ac>)
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	4b65      	ldr	r3, [pc, #404]	; (8001114 <HAL_GPIO_EXTI_Callback+0x1b0>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	1ad3      	subs	r3, r2, r3
 8000f82:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000f86:	f240 80be 	bls.w	8001106 <HAL_GPIO_EXTI_Callback+0x1a2>
	{
		GPIO_InitStructPrivate.Pin = ROW1_Pin|ROW2_Pin|ROW3_Pin;
 8000f8a:	4b63      	ldr	r3, [pc, #396]	; (8001118 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8000f8c:	221c      	movs	r2, #28
 8000f8e:	601a      	str	r2, [r3, #0]
		GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 8000f90:	4b61      	ldr	r3, [pc, #388]	; (8001118 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	605a      	str	r2, [r3, #4]
		GPIO_InitStructPrivate.Pull = GPIO_PULLDOWN;
 8000f96:	4b60      	ldr	r3, [pc, #384]	; (8001118 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8000f98:	2202      	movs	r2, #2
 8000f9a:	609a      	str	r2, [r3, #8]
		GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9c:	4b5e      	ldr	r3, [pc, #376]	; (8001118 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	60da      	str	r2, [r3, #12]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStructPrivate);
 8000fa2:	495d      	ldr	r1, [pc, #372]	; (8001118 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8000fa4:	485d      	ldr	r0, [pc, #372]	; (800111c <HAL_GPIO_EXTI_Callback+0x1b8>)
 8000fa6:	f001 fb6d 	bl	8002684 <HAL_GPIO_Init>

		HAL_GPIO_WritePin(COL1_GPIO_Port, COL1_Pin, GPIO_PIN_SET);
 8000faa:	2201      	movs	r2, #1
 8000fac:	2120      	movs	r1, #32
 8000fae:	485b      	ldr	r0, [pc, #364]	; (800111c <HAL_GPIO_EXTI_Callback+0x1b8>)
 8000fb0:	f001 fd02 	bl	80029b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL2_GPIO_Port, COL2_Pin, GPIO_PIN_RESET);
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	2140      	movs	r1, #64	; 0x40
 8000fb8:	4858      	ldr	r0, [pc, #352]	; (800111c <HAL_GPIO_EXTI_Callback+0x1b8>)
 8000fba:	f001 fcfd 	bl	80029b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL3_GPIO_Port, COL3_Pin, GPIO_PIN_RESET);
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	2180      	movs	r1, #128	; 0x80
 8000fc2:	4856      	ldr	r0, [pc, #344]	; (800111c <HAL_GPIO_EXTI_Callback+0x1b8>)
 8000fc4:	f001 fcf8 	bl	80029b8 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(ROW1_GPIO_Port, ROW1_Pin)){
 8000fc8:	2110      	movs	r1, #16
 8000fca:	4854      	ldr	r0, [pc, #336]	; (800111c <HAL_GPIO_EXTI_Callback+0x1b8>)
 8000fcc:	f001 fcdc 	bl	8002988 <HAL_GPIO_ReadPin>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d003      	beq.n	8000fde <HAL_GPIO_EXTI_Callback+0x7a>
			keyPressed = 1;
 8000fd6:	4b52      	ldr	r3, [pc, #328]	; (8001120 <HAL_GPIO_EXTI_Callback+0x1bc>)
 8000fd8:	2201      	movs	r2, #1
 8000fda:	701a      	strb	r2, [r3, #0]
 8000fdc:	e014      	b.n	8001008 <HAL_GPIO_EXTI_Callback+0xa4>
		}
		else if(HAL_GPIO_ReadPin(ROW2_GPIO_Port, ROW2_Pin)){
 8000fde:	2108      	movs	r1, #8
 8000fe0:	484e      	ldr	r0, [pc, #312]	; (800111c <HAL_GPIO_EXTI_Callback+0x1b8>)
 8000fe2:	f001 fcd1 	bl	8002988 <HAL_GPIO_ReadPin>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d003      	beq.n	8000ff4 <HAL_GPIO_EXTI_Callback+0x90>
			keyPressed = 4;
 8000fec:	4b4c      	ldr	r3, [pc, #304]	; (8001120 <HAL_GPIO_EXTI_Callback+0x1bc>)
 8000fee:	2204      	movs	r2, #4
 8000ff0:	701a      	strb	r2, [r3, #0]
 8000ff2:	e009      	b.n	8001008 <HAL_GPIO_EXTI_Callback+0xa4>
		}
		else if(HAL_GPIO_ReadPin(ROW3_GPIO_Port, ROW3_Pin)){
 8000ff4:	2104      	movs	r1, #4
 8000ff6:	4849      	ldr	r0, [pc, #292]	; (800111c <HAL_GPIO_EXTI_Callback+0x1b8>)
 8000ff8:	f001 fcc6 	bl	8002988 <HAL_GPIO_ReadPin>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d002      	beq.n	8001008 <HAL_GPIO_EXTI_Callback+0xa4>
			keyPressed = 7;
 8001002:	4b47      	ldr	r3, [pc, #284]	; (8001120 <HAL_GPIO_EXTI_Callback+0x1bc>)
 8001004:	2207      	movs	r2, #7
 8001006:	701a      	strb	r2, [r3, #0]

		}
		HAL_GPIO_WritePin(COL1_GPIO_Port, COL1_Pin, GPIO_PIN_RESET);
 8001008:	2200      	movs	r2, #0
 800100a:	2120      	movs	r1, #32
 800100c:	4843      	ldr	r0, [pc, #268]	; (800111c <HAL_GPIO_EXTI_Callback+0x1b8>)
 800100e:	f001 fcd3 	bl	80029b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL2_GPIO_Port, COL2_Pin, GPIO_PIN_SET);
 8001012:	2201      	movs	r2, #1
 8001014:	2140      	movs	r1, #64	; 0x40
 8001016:	4841      	ldr	r0, [pc, #260]	; (800111c <HAL_GPIO_EXTI_Callback+0x1b8>)
 8001018:	f001 fcce 	bl	80029b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL3_GPIO_Port, COL3_Pin, GPIO_PIN_RESET);
 800101c:	2200      	movs	r2, #0
 800101e:	2180      	movs	r1, #128	; 0x80
 8001020:	483e      	ldr	r0, [pc, #248]	; (800111c <HAL_GPIO_EXTI_Callback+0x1b8>)
 8001022:	f001 fcc9 	bl	80029b8 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(ROW1_GPIO_Port, ROW1_Pin)){
 8001026:	2110      	movs	r1, #16
 8001028:	483c      	ldr	r0, [pc, #240]	; (800111c <HAL_GPIO_EXTI_Callback+0x1b8>)
 800102a:	f001 fcad 	bl	8002988 <HAL_GPIO_ReadPin>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d003      	beq.n	800103c <HAL_GPIO_EXTI_Callback+0xd8>
			keyPressed = 2;
 8001034:	4b3a      	ldr	r3, [pc, #232]	; (8001120 <HAL_GPIO_EXTI_Callback+0x1bc>)
 8001036:	2202      	movs	r2, #2
 8001038:	701a      	strb	r2, [r3, #0]
 800103a:	e014      	b.n	8001066 <HAL_GPIO_EXTI_Callback+0x102>
		}
		else if(HAL_GPIO_ReadPin(ROW2_GPIO_Port, ROW2_Pin)){
 800103c:	2108      	movs	r1, #8
 800103e:	4837      	ldr	r0, [pc, #220]	; (800111c <HAL_GPIO_EXTI_Callback+0x1b8>)
 8001040:	f001 fca2 	bl	8002988 <HAL_GPIO_ReadPin>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d003      	beq.n	8001052 <HAL_GPIO_EXTI_Callback+0xee>
			keyPressed = 5;
 800104a:	4b35      	ldr	r3, [pc, #212]	; (8001120 <HAL_GPIO_EXTI_Callback+0x1bc>)
 800104c:	2205      	movs	r2, #5
 800104e:	701a      	strb	r2, [r3, #0]
 8001050:	e009      	b.n	8001066 <HAL_GPIO_EXTI_Callback+0x102>
		}
		else if(HAL_GPIO_ReadPin(ROW3_GPIO_Port, ROW3_Pin)){
 8001052:	2104      	movs	r1, #4
 8001054:	4831      	ldr	r0, [pc, #196]	; (800111c <HAL_GPIO_EXTI_Callback+0x1b8>)
 8001056:	f001 fc97 	bl	8002988 <HAL_GPIO_ReadPin>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d002      	beq.n	8001066 <HAL_GPIO_EXTI_Callback+0x102>
			keyPressed = 8;
 8001060:	4b2f      	ldr	r3, [pc, #188]	; (8001120 <HAL_GPIO_EXTI_Callback+0x1bc>)
 8001062:	2208      	movs	r2, #8
 8001064:	701a      	strb	r2, [r3, #0]
		}
		HAL_GPIO_WritePin(COL1_GPIO_Port, COL1_Pin, GPIO_PIN_RESET);
 8001066:	2200      	movs	r2, #0
 8001068:	2120      	movs	r1, #32
 800106a:	482c      	ldr	r0, [pc, #176]	; (800111c <HAL_GPIO_EXTI_Callback+0x1b8>)
 800106c:	f001 fca4 	bl	80029b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL2_GPIO_Port, COL2_Pin, GPIO_PIN_RESET);
 8001070:	2200      	movs	r2, #0
 8001072:	2140      	movs	r1, #64	; 0x40
 8001074:	4829      	ldr	r0, [pc, #164]	; (800111c <HAL_GPIO_EXTI_Callback+0x1b8>)
 8001076:	f001 fc9f 	bl	80029b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL3_GPIO_Port, COL3_Pin, GPIO_PIN_SET);
 800107a:	2201      	movs	r2, #1
 800107c:	2180      	movs	r1, #128	; 0x80
 800107e:	4827      	ldr	r0, [pc, #156]	; (800111c <HAL_GPIO_EXTI_Callback+0x1b8>)
 8001080:	f001 fc9a 	bl	80029b8 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(ROW1_GPIO_Port, ROW1_Pin)){
 8001084:	2110      	movs	r1, #16
 8001086:	4825      	ldr	r0, [pc, #148]	; (800111c <HAL_GPIO_EXTI_Callback+0x1b8>)
 8001088:	f001 fc7e 	bl	8002988 <HAL_GPIO_ReadPin>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d003      	beq.n	800109a <HAL_GPIO_EXTI_Callback+0x136>
			keyPressed = 3;
 8001092:	4b23      	ldr	r3, [pc, #140]	; (8001120 <HAL_GPIO_EXTI_Callback+0x1bc>)
 8001094:	2203      	movs	r2, #3
 8001096:	701a      	strb	r2, [r3, #0]
 8001098:	e014      	b.n	80010c4 <HAL_GPIO_EXTI_Callback+0x160>
		}
		else if(HAL_GPIO_ReadPin(ROW2_GPIO_Port, ROW2_Pin)){
 800109a:	2108      	movs	r1, #8
 800109c:	481f      	ldr	r0, [pc, #124]	; (800111c <HAL_GPIO_EXTI_Callback+0x1b8>)
 800109e:	f001 fc73 	bl	8002988 <HAL_GPIO_ReadPin>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d003      	beq.n	80010b0 <HAL_GPIO_EXTI_Callback+0x14c>
			keyPressed = 6;
 80010a8:	4b1d      	ldr	r3, [pc, #116]	; (8001120 <HAL_GPIO_EXTI_Callback+0x1bc>)
 80010aa:	2206      	movs	r2, #6
 80010ac:	701a      	strb	r2, [r3, #0]
 80010ae:	e009      	b.n	80010c4 <HAL_GPIO_EXTI_Callback+0x160>
		}
		else if(HAL_GPIO_ReadPin(ROW3_GPIO_Port, ROW3_Pin)){
 80010b0:	2104      	movs	r1, #4
 80010b2:	481a      	ldr	r0, [pc, #104]	; (800111c <HAL_GPIO_EXTI_Callback+0x1b8>)
 80010b4:	f001 fc68 	bl	8002988 <HAL_GPIO_ReadPin>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d002      	beq.n	80010c4 <HAL_GPIO_EXTI_Callback+0x160>
			keyPressed = 9;
 80010be:	4b18      	ldr	r3, [pc, #96]	; (8001120 <HAL_GPIO_EXTI_Callback+0x1bc>)
 80010c0:	2209      	movs	r2, #9
 80010c2:	701a      	strb	r2, [r3, #0]
		}

		HAL_GPIO_WritePin(COL1_GPIO_Port,COL1_Pin, GPIO_PIN_SET);
 80010c4:	2201      	movs	r2, #1
 80010c6:	2120      	movs	r1, #32
 80010c8:	4814      	ldr	r0, [pc, #80]	; (800111c <HAL_GPIO_EXTI_Callback+0x1b8>)
 80010ca:	f001 fc75 	bl	80029b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL2_GPIO_Port,COL2_Pin, GPIO_PIN_SET);
 80010ce:	2201      	movs	r2, #1
 80010d0:	2140      	movs	r1, #64	; 0x40
 80010d2:	4812      	ldr	r0, [pc, #72]	; (800111c <HAL_GPIO_EXTI_Callback+0x1b8>)
 80010d4:	f001 fc70 	bl	80029b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(COL3_GPIO_Port,COL3_Pin, GPIO_PIN_SET);
 80010d8:	2201      	movs	r2, #1
 80010da:	2180      	movs	r1, #128	; 0x80
 80010dc:	480f      	ldr	r0, [pc, #60]	; (800111c <HAL_GPIO_EXTI_Callback+0x1b8>)
 80010de:	f001 fc6b 	bl	80029b8 <HAL_GPIO_WritePin>

		GPIO_InitStructPrivate.Mode = GPIO_MODE_IT_RISING;
 80010e2:	4b0d      	ldr	r3, [pc, #52]	; (8001118 <HAL_GPIO_EXTI_Callback+0x1b4>)
 80010e4:	4a0f      	ldr	r2, [pc, #60]	; (8001124 <HAL_GPIO_EXTI_Callback+0x1c0>)
 80010e6:	605a      	str	r2, [r3, #4]
		GPIO_InitStructPrivate.Pull = GPIO_PULLDOWN;
 80010e8:	4b0b      	ldr	r3, [pc, #44]	; (8001118 <HAL_GPIO_EXTI_Callback+0x1b4>)
 80010ea:	2202      	movs	r2, #2
 80010ec:	609a      	str	r2, [r3, #8]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStructPrivate);
 80010ee:	490a      	ldr	r1, [pc, #40]	; (8001118 <HAL_GPIO_EXTI_Callback+0x1b4>)
 80010f0:	480a      	ldr	r0, [pc, #40]	; (800111c <HAL_GPIO_EXTI_Callback+0x1b8>)
 80010f2:	f001 fac7 	bl	8002684 <HAL_GPIO_Init>


		keyFlag = 1;
 80010f6:	4b0c      	ldr	r3, [pc, #48]	; (8001128 <HAL_GPIO_EXTI_Callback+0x1c4>)
 80010f8:	2201      	movs	r2, #1
 80010fa:	701a      	strb	r2, [r3, #0]
		previousMillis = HAL_GetTick();
 80010fc:	f001 f982 	bl	8002404 <HAL_GetTick>
 8001100:	4602      	mov	r2, r0
 8001102:	4b04      	ldr	r3, [pc, #16]	; (8001114 <HAL_GPIO_EXTI_Callback+0x1b0>)
 8001104:	601a      	str	r2, [r3, #0]
	}

}
 8001106:	bf00      	nop
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	20000558 	.word	0x20000558
 8001114:	20000554 	.word	0x20000554
 8001118:	2000053c 	.word	0x2000053c
 800111c:	40020000 	.word	0x40020000
 8001120:	20000550 	.word	0x20000550
 8001124:	10110000 	.word	0x10110000
 8001128:	20000551 	.word	0x20000551

0800112c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8001130:	bf00      	nop
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
	...

0800113c <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8001140:	4b17      	ldr	r3, [pc, #92]	; (80011a0 <MX_SPI3_Init+0x64>)
 8001142:	4a18      	ldr	r2, [pc, #96]	; (80011a4 <MX_SPI3_Init+0x68>)
 8001144:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001146:	4b16      	ldr	r3, [pc, #88]	; (80011a0 <MX_SPI3_Init+0x64>)
 8001148:	f44f 7282 	mov.w	r2, #260	; 0x104
 800114c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800114e:	4b14      	ldr	r3, [pc, #80]	; (80011a0 <MX_SPI3_Init+0x64>)
 8001150:	2200      	movs	r2, #0
 8001152:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001154:	4b12      	ldr	r3, [pc, #72]	; (80011a0 <MX_SPI3_Init+0x64>)
 8001156:	2200      	movs	r2, #0
 8001158:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800115a:	4b11      	ldr	r3, [pc, #68]	; (80011a0 <MX_SPI3_Init+0x64>)
 800115c:	2200      	movs	r2, #0
 800115e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001160:	4b0f      	ldr	r3, [pc, #60]	; (80011a0 <MX_SPI3_Init+0x64>)
 8001162:	2200      	movs	r2, #0
 8001164:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001166:	4b0e      	ldr	r3, [pc, #56]	; (80011a0 <MX_SPI3_Init+0x64>)
 8001168:	f44f 7200 	mov.w	r2, #512	; 0x200
 800116c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800116e:	4b0c      	ldr	r3, [pc, #48]	; (80011a0 <MX_SPI3_Init+0x64>)
 8001170:	2200      	movs	r2, #0
 8001172:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001174:	4b0a      	ldr	r3, [pc, #40]	; (80011a0 <MX_SPI3_Init+0x64>)
 8001176:	2200      	movs	r2, #0
 8001178:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800117a:	4b09      	ldr	r3, [pc, #36]	; (80011a0 <MX_SPI3_Init+0x64>)
 800117c:	2200      	movs	r2, #0
 800117e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001180:	4b07      	ldr	r3, [pc, #28]	; (80011a0 <MX_SPI3_Init+0x64>)
 8001182:	2200      	movs	r2, #0
 8001184:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001186:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <MX_SPI3_Init+0x64>)
 8001188:	220a      	movs	r2, #10
 800118a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800118c:	4804      	ldr	r0, [pc, #16]	; (80011a0 <MX_SPI3_Init+0x64>)
 800118e:	f003 ff5d 	bl	800504c <HAL_SPI_Init>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001198:	f7ff ffc8 	bl	800112c <Error_Handler>
  }

}
 800119c:	bf00      	nop
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	20000ae0 	.word	0x20000ae0
 80011a4:	40003c00 	.word	0x40003c00

080011a8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b08a      	sub	sp, #40	; 0x28
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b0:	f107 0314 	add.w	r3, r7, #20
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	605a      	str	r2, [r3, #4]
 80011ba:	609a      	str	r2, [r3, #8]
 80011bc:	60da      	str	r2, [r3, #12]
 80011be:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a19      	ldr	r2, [pc, #100]	; (800122c <HAL_SPI_MspInit+0x84>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d12b      	bne.n	8001222 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	613b      	str	r3, [r7, #16]
 80011ce:	4b18      	ldr	r3, [pc, #96]	; (8001230 <HAL_SPI_MspInit+0x88>)
 80011d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d2:	4a17      	ldr	r2, [pc, #92]	; (8001230 <HAL_SPI_MspInit+0x88>)
 80011d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011d8:	6413      	str	r3, [r2, #64]	; 0x40
 80011da:	4b15      	ldr	r3, [pc, #84]	; (8001230 <HAL_SPI_MspInit+0x88>)
 80011dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80011e2:	613b      	str	r3, [r7, #16]
 80011e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	60fb      	str	r3, [r7, #12]
 80011ea:	4b11      	ldr	r3, [pc, #68]	; (8001230 <HAL_SPI_MspInit+0x88>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	4a10      	ldr	r2, [pc, #64]	; (8001230 <HAL_SPI_MspInit+0x88>)
 80011f0:	f043 0302 	orr.w	r3, r3, #2
 80011f4:	6313      	str	r3, [r2, #48]	; 0x30
 80011f6:	4b0e      	ldr	r3, [pc, #56]	; (8001230 <HAL_SPI_MspInit+0x88>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	f003 0302 	and.w	r3, r3, #2
 80011fe:	60fb      	str	r3, [r7, #12]
 8001200:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3     ------> SPI3_SCK
    PB4     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001202:	2338      	movs	r3, #56	; 0x38
 8001204:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001206:	2302      	movs	r3, #2
 8001208:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120a:	2300      	movs	r3, #0
 800120c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800120e:	2303      	movs	r3, #3
 8001210:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001212:	2306      	movs	r3, #6
 8001214:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001216:	f107 0314 	add.w	r3, r7, #20
 800121a:	4619      	mov	r1, r3
 800121c:	4805      	ldr	r0, [pc, #20]	; (8001234 <HAL_SPI_MspInit+0x8c>)
 800121e:	f001 fa31 	bl	8002684 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001222:	bf00      	nop
 8001224:	3728      	adds	r7, #40	; 0x28
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	40003c00 	.word	0x40003c00
 8001230:	40023800 	.word	0x40023800
 8001234:	40020400 	.word	0x40020400

08001238 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800123e:	f000 fb85 	bl	800194c <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001242:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001246:	2201      	movs	r2, #1
 8001248:	2178      	movs	r1, #120	; 0x78
 800124a:	485b      	ldr	r0, [pc, #364]	; (80013b8 <SSD1306_Init+0x180>)
 800124c:	f001 fe1c 	bl	8002e88 <HAL_I2C_IsDeviceReady>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8001256:	2300      	movs	r3, #0
 8001258:	e0a9      	b.n	80013ae <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 800125a:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800125e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001260:	e002      	b.n	8001268 <SSD1306_Init+0x30>
		p--;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	3b01      	subs	r3, #1
 8001266:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d1f9      	bne.n	8001262 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800126e:	22ae      	movs	r2, #174	; 0xae
 8001270:	2100      	movs	r1, #0
 8001272:	2078      	movs	r0, #120	; 0x78
 8001274:	f000 fbc6 	bl	8001a04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8001278:	2220      	movs	r2, #32
 800127a:	2100      	movs	r1, #0
 800127c:	2078      	movs	r0, #120	; 0x78
 800127e:	f000 fbc1 	bl	8001a04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001282:	2210      	movs	r2, #16
 8001284:	2100      	movs	r1, #0
 8001286:	2078      	movs	r0, #120	; 0x78
 8001288:	f000 fbbc 	bl	8001a04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800128c:	22b0      	movs	r2, #176	; 0xb0
 800128e:	2100      	movs	r1, #0
 8001290:	2078      	movs	r0, #120	; 0x78
 8001292:	f000 fbb7 	bl	8001a04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8001296:	22c8      	movs	r2, #200	; 0xc8
 8001298:	2100      	movs	r1, #0
 800129a:	2078      	movs	r0, #120	; 0x78
 800129c:	f000 fbb2 	bl	8001a04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80012a0:	2200      	movs	r2, #0
 80012a2:	2100      	movs	r1, #0
 80012a4:	2078      	movs	r0, #120	; 0x78
 80012a6:	f000 fbad 	bl	8001a04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80012aa:	2210      	movs	r2, #16
 80012ac:	2100      	movs	r1, #0
 80012ae:	2078      	movs	r0, #120	; 0x78
 80012b0:	f000 fba8 	bl	8001a04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80012b4:	2240      	movs	r2, #64	; 0x40
 80012b6:	2100      	movs	r1, #0
 80012b8:	2078      	movs	r0, #120	; 0x78
 80012ba:	f000 fba3 	bl	8001a04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80012be:	2281      	movs	r2, #129	; 0x81
 80012c0:	2100      	movs	r1, #0
 80012c2:	2078      	movs	r0, #120	; 0x78
 80012c4:	f000 fb9e 	bl	8001a04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80012c8:	22ff      	movs	r2, #255	; 0xff
 80012ca:	2100      	movs	r1, #0
 80012cc:	2078      	movs	r0, #120	; 0x78
 80012ce:	f000 fb99 	bl	8001a04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80012d2:	22a1      	movs	r2, #161	; 0xa1
 80012d4:	2100      	movs	r1, #0
 80012d6:	2078      	movs	r0, #120	; 0x78
 80012d8:	f000 fb94 	bl	8001a04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80012dc:	22a6      	movs	r2, #166	; 0xa6
 80012de:	2100      	movs	r1, #0
 80012e0:	2078      	movs	r0, #120	; 0x78
 80012e2:	f000 fb8f 	bl	8001a04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80012e6:	22a8      	movs	r2, #168	; 0xa8
 80012e8:	2100      	movs	r1, #0
 80012ea:	2078      	movs	r0, #120	; 0x78
 80012ec:	f000 fb8a 	bl	8001a04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80012f0:	223f      	movs	r2, #63	; 0x3f
 80012f2:	2100      	movs	r1, #0
 80012f4:	2078      	movs	r0, #120	; 0x78
 80012f6:	f000 fb85 	bl	8001a04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80012fa:	22a4      	movs	r2, #164	; 0xa4
 80012fc:	2100      	movs	r1, #0
 80012fe:	2078      	movs	r0, #120	; 0x78
 8001300:	f000 fb80 	bl	8001a04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001304:	22d3      	movs	r2, #211	; 0xd3
 8001306:	2100      	movs	r1, #0
 8001308:	2078      	movs	r0, #120	; 0x78
 800130a:	f000 fb7b 	bl	8001a04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800130e:	2200      	movs	r2, #0
 8001310:	2100      	movs	r1, #0
 8001312:	2078      	movs	r0, #120	; 0x78
 8001314:	f000 fb76 	bl	8001a04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001318:	22d5      	movs	r2, #213	; 0xd5
 800131a:	2100      	movs	r1, #0
 800131c:	2078      	movs	r0, #120	; 0x78
 800131e:	f000 fb71 	bl	8001a04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001322:	22f0      	movs	r2, #240	; 0xf0
 8001324:	2100      	movs	r1, #0
 8001326:	2078      	movs	r0, #120	; 0x78
 8001328:	f000 fb6c 	bl	8001a04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 800132c:	22d9      	movs	r2, #217	; 0xd9
 800132e:	2100      	movs	r1, #0
 8001330:	2078      	movs	r0, #120	; 0x78
 8001332:	f000 fb67 	bl	8001a04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001336:	2222      	movs	r2, #34	; 0x22
 8001338:	2100      	movs	r1, #0
 800133a:	2078      	movs	r0, #120	; 0x78
 800133c:	f000 fb62 	bl	8001a04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001340:	22da      	movs	r2, #218	; 0xda
 8001342:	2100      	movs	r1, #0
 8001344:	2078      	movs	r0, #120	; 0x78
 8001346:	f000 fb5d 	bl	8001a04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800134a:	2212      	movs	r2, #18
 800134c:	2100      	movs	r1, #0
 800134e:	2078      	movs	r0, #120	; 0x78
 8001350:	f000 fb58 	bl	8001a04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001354:	22db      	movs	r2, #219	; 0xdb
 8001356:	2100      	movs	r1, #0
 8001358:	2078      	movs	r0, #120	; 0x78
 800135a:	f000 fb53 	bl	8001a04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800135e:	2220      	movs	r2, #32
 8001360:	2100      	movs	r1, #0
 8001362:	2078      	movs	r0, #120	; 0x78
 8001364:	f000 fb4e 	bl	8001a04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001368:	228d      	movs	r2, #141	; 0x8d
 800136a:	2100      	movs	r1, #0
 800136c:	2078      	movs	r0, #120	; 0x78
 800136e:	f000 fb49 	bl	8001a04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001372:	2214      	movs	r2, #20
 8001374:	2100      	movs	r1, #0
 8001376:	2078      	movs	r0, #120	; 0x78
 8001378:	f000 fb44 	bl	8001a04 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 800137c:	22af      	movs	r2, #175	; 0xaf
 800137e:	2100      	movs	r1, #0
 8001380:	2078      	movs	r0, #120	; 0x78
 8001382:	f000 fb3f 	bl	8001a04 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001386:	222e      	movs	r2, #46	; 0x2e
 8001388:	2100      	movs	r1, #0
 800138a:	2078      	movs	r0, #120	; 0x78
 800138c:	f000 fb3a 	bl	8001a04 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001390:	2000      	movs	r0, #0
 8001392:	f000 f843 	bl	800141c <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8001396:	f000 f813 	bl	80013c0 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 800139a:	4b08      	ldr	r3, [pc, #32]	; (80013bc <SSD1306_Init+0x184>)
 800139c:	2200      	movs	r2, #0
 800139e:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80013a0:	4b06      	ldr	r3, [pc, #24]	; (80013bc <SSD1306_Init+0x184>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 80013a6:	4b05      	ldr	r3, [pc, #20]	; (80013bc <SSD1306_Init+0x184>)
 80013a8:	2201      	movs	r2, #1
 80013aa:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 80013ac:	2301      	movs	r3, #1
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	20000998 	.word	0x20000998
 80013bc:	20000980 	.word	0x20000980

080013c0 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 80013c6:	2300      	movs	r3, #0
 80013c8:	71fb      	strb	r3, [r7, #7]
 80013ca:	e01d      	b.n	8001408 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80013cc:	79fb      	ldrb	r3, [r7, #7]
 80013ce:	3b50      	subs	r3, #80	; 0x50
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	461a      	mov	r2, r3
 80013d4:	2100      	movs	r1, #0
 80013d6:	2078      	movs	r0, #120	; 0x78
 80013d8:	f000 fb14 	bl	8001a04 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80013dc:	2200      	movs	r2, #0
 80013de:	2100      	movs	r1, #0
 80013e0:	2078      	movs	r0, #120	; 0x78
 80013e2:	f000 fb0f 	bl	8001a04 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80013e6:	2210      	movs	r2, #16
 80013e8:	2100      	movs	r1, #0
 80013ea:	2078      	movs	r0, #120	; 0x78
 80013ec:	f000 fb0a 	bl	8001a04 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80013f0:	79fb      	ldrb	r3, [r7, #7]
 80013f2:	01db      	lsls	r3, r3, #7
 80013f4:	4a08      	ldr	r2, [pc, #32]	; (8001418 <SSD1306_UpdateScreen+0x58>)
 80013f6:	441a      	add	r2, r3
 80013f8:	2380      	movs	r3, #128	; 0x80
 80013fa:	2140      	movs	r1, #64	; 0x40
 80013fc:	2078      	movs	r0, #120	; 0x78
 80013fe:	f000 fab9 	bl	8001974 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001402:	79fb      	ldrb	r3, [r7, #7]
 8001404:	3301      	adds	r3, #1
 8001406:	71fb      	strb	r3, [r7, #7]
 8001408:	79fb      	ldrb	r3, [r7, #7]
 800140a:	2b07      	cmp	r3, #7
 800140c:	d9de      	bls.n	80013cc <SSD1306_UpdateScreen+0xc>
	}
}
 800140e:	bf00      	nop
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	20000580 	.word	0x20000580

0800141c <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	4603      	mov	r3, r0
 8001424:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001426:	79fb      	ldrb	r3, [r7, #7]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d101      	bne.n	8001430 <SSD1306_Fill+0x14>
 800142c:	2300      	movs	r3, #0
 800142e:	e000      	b.n	8001432 <SSD1306_Fill+0x16>
 8001430:	23ff      	movs	r3, #255	; 0xff
 8001432:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001436:	4619      	mov	r1, r3
 8001438:	4803      	ldr	r0, [pc, #12]	; (8001448 <SSD1306_Fill+0x2c>)
 800143a:	f008 fd63 	bl	8009f04 <memset>
}
 800143e:	bf00      	nop
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	20000580 	.word	0x20000580

0800144c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	4603      	mov	r3, r0
 8001454:	80fb      	strh	r3, [r7, #6]
 8001456:	460b      	mov	r3, r1
 8001458:	80bb      	strh	r3, [r7, #4]
 800145a:	4613      	mov	r3, r2
 800145c:	70fb      	strb	r3, [r7, #3]
	if (
 800145e:	88fb      	ldrh	r3, [r7, #6]
 8001460:	2b7f      	cmp	r3, #127	; 0x7f
 8001462:	d848      	bhi.n	80014f6 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001464:	88bb      	ldrh	r3, [r7, #4]
 8001466:	2b3f      	cmp	r3, #63	; 0x3f
 8001468:	d845      	bhi.n	80014f6 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800146a:	4b26      	ldr	r3, [pc, #152]	; (8001504 <SSD1306_DrawPixel+0xb8>)
 800146c:	791b      	ldrb	r3, [r3, #4]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d006      	beq.n	8001480 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001472:	78fb      	ldrb	r3, [r7, #3]
 8001474:	2b00      	cmp	r3, #0
 8001476:	bf0c      	ite	eq
 8001478:	2301      	moveq	r3, #1
 800147a:	2300      	movne	r3, #0
 800147c:	b2db      	uxtb	r3, r3
 800147e:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001480:	78fb      	ldrb	r3, [r7, #3]
 8001482:	2b01      	cmp	r3, #1
 8001484:	d11a      	bne.n	80014bc <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001486:	88fa      	ldrh	r2, [r7, #6]
 8001488:	88bb      	ldrh	r3, [r7, #4]
 800148a:	08db      	lsrs	r3, r3, #3
 800148c:	b298      	uxth	r0, r3
 800148e:	4603      	mov	r3, r0
 8001490:	01db      	lsls	r3, r3, #7
 8001492:	4413      	add	r3, r2
 8001494:	4a1c      	ldr	r2, [pc, #112]	; (8001508 <SSD1306_DrawPixel+0xbc>)
 8001496:	5cd3      	ldrb	r3, [r2, r3]
 8001498:	b25a      	sxtb	r2, r3
 800149a:	88bb      	ldrh	r3, [r7, #4]
 800149c:	f003 0307 	and.w	r3, r3, #7
 80014a0:	2101      	movs	r1, #1
 80014a2:	fa01 f303 	lsl.w	r3, r1, r3
 80014a6:	b25b      	sxtb	r3, r3
 80014a8:	4313      	orrs	r3, r2
 80014aa:	b259      	sxtb	r1, r3
 80014ac:	88fa      	ldrh	r2, [r7, #6]
 80014ae:	4603      	mov	r3, r0
 80014b0:	01db      	lsls	r3, r3, #7
 80014b2:	4413      	add	r3, r2
 80014b4:	b2c9      	uxtb	r1, r1
 80014b6:	4a14      	ldr	r2, [pc, #80]	; (8001508 <SSD1306_DrawPixel+0xbc>)
 80014b8:	54d1      	strb	r1, [r2, r3]
 80014ba:	e01d      	b.n	80014f8 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80014bc:	88fa      	ldrh	r2, [r7, #6]
 80014be:	88bb      	ldrh	r3, [r7, #4]
 80014c0:	08db      	lsrs	r3, r3, #3
 80014c2:	b298      	uxth	r0, r3
 80014c4:	4603      	mov	r3, r0
 80014c6:	01db      	lsls	r3, r3, #7
 80014c8:	4413      	add	r3, r2
 80014ca:	4a0f      	ldr	r2, [pc, #60]	; (8001508 <SSD1306_DrawPixel+0xbc>)
 80014cc:	5cd3      	ldrb	r3, [r2, r3]
 80014ce:	b25a      	sxtb	r2, r3
 80014d0:	88bb      	ldrh	r3, [r7, #4]
 80014d2:	f003 0307 	and.w	r3, r3, #7
 80014d6:	2101      	movs	r1, #1
 80014d8:	fa01 f303 	lsl.w	r3, r1, r3
 80014dc:	b25b      	sxtb	r3, r3
 80014de:	43db      	mvns	r3, r3
 80014e0:	b25b      	sxtb	r3, r3
 80014e2:	4013      	ands	r3, r2
 80014e4:	b259      	sxtb	r1, r3
 80014e6:	88fa      	ldrh	r2, [r7, #6]
 80014e8:	4603      	mov	r3, r0
 80014ea:	01db      	lsls	r3, r3, #7
 80014ec:	4413      	add	r3, r2
 80014ee:	b2c9      	uxtb	r1, r1
 80014f0:	4a05      	ldr	r2, [pc, #20]	; (8001508 <SSD1306_DrawPixel+0xbc>)
 80014f2:	54d1      	strb	r1, [r2, r3]
 80014f4:	e000      	b.n	80014f8 <SSD1306_DrawPixel+0xac>
		return;
 80014f6:	bf00      	nop
	}
}
 80014f8:	370c      	adds	r7, #12
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	20000980 	.word	0x20000980
 8001508:	20000580 	.word	0x20000580

0800150c <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	4603      	mov	r3, r0
 8001514:	460a      	mov	r2, r1
 8001516:	80fb      	strh	r3, [r7, #6]
 8001518:	4613      	mov	r3, r2
 800151a:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 800151c:	4a05      	ldr	r2, [pc, #20]	; (8001534 <SSD1306_GotoXY+0x28>)
 800151e:	88fb      	ldrh	r3, [r7, #6]
 8001520:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001522:	4a04      	ldr	r2, [pc, #16]	; (8001534 <SSD1306_GotoXY+0x28>)
 8001524:	88bb      	ldrh	r3, [r7, #4]
 8001526:	8053      	strh	r3, [r2, #2]
}
 8001528:	bf00      	nop
 800152a:	370c      	adds	r7, #12
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr
 8001534:	20000980 	.word	0x20000980

08001538 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001538:	b580      	push	{r7, lr}
 800153a:	b086      	sub	sp, #24
 800153c:	af00      	add	r7, sp, #0
 800153e:	4603      	mov	r3, r0
 8001540:	6039      	str	r1, [r7, #0]
 8001542:	71fb      	strb	r3, [r7, #7]
 8001544:	4613      	mov	r3, r2
 8001546:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001548:	4b3a      	ldr	r3, [pc, #232]	; (8001634 <SSD1306_Putc+0xfc>)
 800154a:	881b      	ldrh	r3, [r3, #0]
 800154c:	461a      	mov	r2, r3
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	4413      	add	r3, r2
	if (
 8001554:	2b7f      	cmp	r3, #127	; 0x7f
 8001556:	dc07      	bgt.n	8001568 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001558:	4b36      	ldr	r3, [pc, #216]	; (8001634 <SSD1306_Putc+0xfc>)
 800155a:	885b      	ldrh	r3, [r3, #2]
 800155c:	461a      	mov	r2, r3
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	785b      	ldrb	r3, [r3, #1]
 8001562:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001564:	2b3f      	cmp	r3, #63	; 0x3f
 8001566:	dd01      	ble.n	800156c <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001568:	2300      	movs	r3, #0
 800156a:	e05e      	b.n	800162a <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 800156c:	2300      	movs	r3, #0
 800156e:	617b      	str	r3, [r7, #20]
 8001570:	e04b      	b.n	800160a <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	685a      	ldr	r2, [r3, #4]
 8001576:	79fb      	ldrb	r3, [r7, #7]
 8001578:	3b20      	subs	r3, #32
 800157a:	6839      	ldr	r1, [r7, #0]
 800157c:	7849      	ldrb	r1, [r1, #1]
 800157e:	fb01 f303 	mul.w	r3, r1, r3
 8001582:	4619      	mov	r1, r3
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	440b      	add	r3, r1
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	4413      	add	r3, r2
 800158c:	881b      	ldrh	r3, [r3, #0]
 800158e:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001590:	2300      	movs	r3, #0
 8001592:	613b      	str	r3, [r7, #16]
 8001594:	e030      	b.n	80015f8 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001596:	68fa      	ldr	r2, [r7, #12]
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	fa02 f303 	lsl.w	r3, r2, r3
 800159e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d010      	beq.n	80015c8 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80015a6:	4b23      	ldr	r3, [pc, #140]	; (8001634 <SSD1306_Putc+0xfc>)
 80015a8:	881a      	ldrh	r2, [r3, #0]
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	b29b      	uxth	r3, r3
 80015ae:	4413      	add	r3, r2
 80015b0:	b298      	uxth	r0, r3
 80015b2:	4b20      	ldr	r3, [pc, #128]	; (8001634 <SSD1306_Putc+0xfc>)
 80015b4:	885a      	ldrh	r2, [r3, #2]
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	b29b      	uxth	r3, r3
 80015ba:	4413      	add	r3, r2
 80015bc:	b29b      	uxth	r3, r3
 80015be:	79ba      	ldrb	r2, [r7, #6]
 80015c0:	4619      	mov	r1, r3
 80015c2:	f7ff ff43 	bl	800144c <SSD1306_DrawPixel>
 80015c6:	e014      	b.n	80015f2 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80015c8:	4b1a      	ldr	r3, [pc, #104]	; (8001634 <SSD1306_Putc+0xfc>)
 80015ca:	881a      	ldrh	r2, [r3, #0]
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	b29b      	uxth	r3, r3
 80015d0:	4413      	add	r3, r2
 80015d2:	b298      	uxth	r0, r3
 80015d4:	4b17      	ldr	r3, [pc, #92]	; (8001634 <SSD1306_Putc+0xfc>)
 80015d6:	885a      	ldrh	r2, [r3, #2]
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	b29b      	uxth	r3, r3
 80015dc:	4413      	add	r3, r2
 80015de:	b299      	uxth	r1, r3
 80015e0:	79bb      	ldrb	r3, [r7, #6]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	bf0c      	ite	eq
 80015e6:	2301      	moveq	r3, #1
 80015e8:	2300      	movne	r3, #0
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	461a      	mov	r2, r3
 80015ee:	f7ff ff2d 	bl	800144c <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	3301      	adds	r3, #1
 80015f6:	613b      	str	r3, [r7, #16]
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	461a      	mov	r2, r3
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	4293      	cmp	r3, r2
 8001602:	d3c8      	bcc.n	8001596 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	3301      	adds	r3, #1
 8001608:	617b      	str	r3, [r7, #20]
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	785b      	ldrb	r3, [r3, #1]
 800160e:	461a      	mov	r2, r3
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	4293      	cmp	r3, r2
 8001614:	d3ad      	bcc.n	8001572 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001616:	4b07      	ldr	r3, [pc, #28]	; (8001634 <SSD1306_Putc+0xfc>)
 8001618:	881a      	ldrh	r2, [r3, #0]
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	b29b      	uxth	r3, r3
 8001620:	4413      	add	r3, r2
 8001622:	b29a      	uxth	r2, r3
 8001624:	4b03      	ldr	r3, [pc, #12]	; (8001634 <SSD1306_Putc+0xfc>)
 8001626:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8001628:	79fb      	ldrb	r3, [r7, #7]
}
 800162a:	4618      	mov	r0, r3
 800162c:	3718      	adds	r7, #24
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	20000980 	.word	0x20000980

08001638 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	60f8      	str	r0, [r7, #12]
 8001640:	60b9      	str	r1, [r7, #8]
 8001642:	4613      	mov	r3, r2
 8001644:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001646:	e012      	b.n	800166e <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	79fa      	ldrb	r2, [r7, #7]
 800164e:	68b9      	ldr	r1, [r7, #8]
 8001650:	4618      	mov	r0, r3
 8001652:	f7ff ff71 	bl	8001538 <SSD1306_Putc>
 8001656:	4603      	mov	r3, r0
 8001658:	461a      	mov	r2, r3
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	429a      	cmp	r2, r3
 8001660:	d002      	beq.n	8001668 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	e008      	b.n	800167a <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	3301      	adds	r3, #1
 800166c:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d1e8      	bne.n	8001648 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	781b      	ldrb	r3, [r3, #0]
}
 800167a:	4618      	mov	r0, r3
 800167c:	3710      	adds	r7, #16
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}

08001682 <SSD1306_DrawLine>:
 

void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 8001682:	b590      	push	{r4, r7, lr}
 8001684:	b087      	sub	sp, #28
 8001686:	af00      	add	r7, sp, #0
 8001688:	4604      	mov	r4, r0
 800168a:	4608      	mov	r0, r1
 800168c:	4611      	mov	r1, r2
 800168e:	461a      	mov	r2, r3
 8001690:	4623      	mov	r3, r4
 8001692:	80fb      	strh	r3, [r7, #6]
 8001694:	4603      	mov	r3, r0
 8001696:	80bb      	strh	r3, [r7, #4]
 8001698:	460b      	mov	r3, r1
 800169a:	807b      	strh	r3, [r7, #2]
 800169c:	4613      	mov	r3, r2
 800169e:	803b      	strh	r3, [r7, #0]
	int16_t dx, dy, sx, sy, err, e2, i, tmp; 
	
	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 80016a0:	88fb      	ldrh	r3, [r7, #6]
 80016a2:	2b7f      	cmp	r3, #127	; 0x7f
 80016a4:	d901      	bls.n	80016aa <SSD1306_DrawLine+0x28>
		x0 = SSD1306_WIDTH - 1;
 80016a6:	237f      	movs	r3, #127	; 0x7f
 80016a8:	80fb      	strh	r3, [r7, #6]
	}
	if (x1 >= SSD1306_WIDTH) {
 80016aa:	887b      	ldrh	r3, [r7, #2]
 80016ac:	2b7f      	cmp	r3, #127	; 0x7f
 80016ae:	d901      	bls.n	80016b4 <SSD1306_DrawLine+0x32>
		x1 = SSD1306_WIDTH - 1;
 80016b0:	237f      	movs	r3, #127	; 0x7f
 80016b2:	807b      	strh	r3, [r7, #2]
	}
	if (y0 >= SSD1306_HEIGHT) {
 80016b4:	88bb      	ldrh	r3, [r7, #4]
 80016b6:	2b3f      	cmp	r3, #63	; 0x3f
 80016b8:	d901      	bls.n	80016be <SSD1306_DrawLine+0x3c>
		y0 = SSD1306_HEIGHT - 1;
 80016ba:	233f      	movs	r3, #63	; 0x3f
 80016bc:	80bb      	strh	r3, [r7, #4]
	}
	if (y1 >= SSD1306_HEIGHT) {
 80016be:	883b      	ldrh	r3, [r7, #0]
 80016c0:	2b3f      	cmp	r3, #63	; 0x3f
 80016c2:	d901      	bls.n	80016c8 <SSD1306_DrawLine+0x46>
		y1 = SSD1306_HEIGHT - 1;
 80016c4:	233f      	movs	r3, #63	; 0x3f
 80016c6:	803b      	strh	r3, [r7, #0]
	}
	
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 80016c8:	88fa      	ldrh	r2, [r7, #6]
 80016ca:	887b      	ldrh	r3, [r7, #2]
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d205      	bcs.n	80016dc <SSD1306_DrawLine+0x5a>
 80016d0:	887a      	ldrh	r2, [r7, #2]
 80016d2:	88fb      	ldrh	r3, [r7, #6]
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	b29b      	uxth	r3, r3
 80016d8:	b21b      	sxth	r3, r3
 80016da:	e004      	b.n	80016e6 <SSD1306_DrawLine+0x64>
 80016dc:	88fa      	ldrh	r2, [r7, #6]
 80016de:	887b      	ldrh	r3, [r7, #2]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	b29b      	uxth	r3, r3
 80016e4:	b21b      	sxth	r3, r3
 80016e6:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 80016e8:	88ba      	ldrh	r2, [r7, #4]
 80016ea:	883b      	ldrh	r3, [r7, #0]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d205      	bcs.n	80016fc <SSD1306_DrawLine+0x7a>
 80016f0:	883a      	ldrh	r2, [r7, #0]
 80016f2:	88bb      	ldrh	r3, [r7, #4]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	b29b      	uxth	r3, r3
 80016f8:	b21b      	sxth	r3, r3
 80016fa:	e004      	b.n	8001706 <SSD1306_DrawLine+0x84>
 80016fc:	88ba      	ldrh	r2, [r7, #4]
 80016fe:	883b      	ldrh	r3, [r7, #0]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	b29b      	uxth	r3, r3
 8001704:	b21b      	sxth	r3, r3
 8001706:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1; 
 8001708:	88fa      	ldrh	r2, [r7, #6]
 800170a:	887b      	ldrh	r3, [r7, #2]
 800170c:	429a      	cmp	r2, r3
 800170e:	d201      	bcs.n	8001714 <SSD1306_DrawLine+0x92>
 8001710:	2301      	movs	r3, #1
 8001712:	e001      	b.n	8001718 <SSD1306_DrawLine+0x96>
 8001714:	f04f 33ff 	mov.w	r3, #4294967295
 8001718:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1; 
 800171a:	88ba      	ldrh	r2, [r7, #4]
 800171c:	883b      	ldrh	r3, [r7, #0]
 800171e:	429a      	cmp	r2, r3
 8001720:	d201      	bcs.n	8001726 <SSD1306_DrawLine+0xa4>
 8001722:	2301      	movs	r3, #1
 8001724:	e001      	b.n	800172a <SSD1306_DrawLine+0xa8>
 8001726:	f04f 33ff 	mov.w	r3, #4294967295
 800172a:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2; 
 800172c:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001730:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001734:	429a      	cmp	r2, r3
 8001736:	dd06      	ble.n	8001746 <SSD1306_DrawLine+0xc4>
 8001738:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800173c:	0fda      	lsrs	r2, r3, #31
 800173e:	4413      	add	r3, r2
 8001740:	105b      	asrs	r3, r3, #1
 8001742:	b21b      	sxth	r3, r3
 8001744:	e006      	b.n	8001754 <SSD1306_DrawLine+0xd2>
 8001746:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800174a:	425b      	negs	r3, r3
 800174c:	0fda      	lsrs	r2, r3, #31
 800174e:	4413      	add	r3, r2
 8001750:	105b      	asrs	r3, r3, #1
 8001752:	b21b      	sxth	r3, r3
 8001754:	82fb      	strh	r3, [r7, #22]

	if (dx == 0) {
 8001756:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d129      	bne.n	80017b2 <SSD1306_DrawLine+0x130>
		if (y1 < y0) {
 800175e:	883a      	ldrh	r2, [r7, #0]
 8001760:	88bb      	ldrh	r3, [r7, #4]
 8001762:	429a      	cmp	r2, r3
 8001764:	d205      	bcs.n	8001772 <SSD1306_DrawLine+0xf0>
			tmp = y1;
 8001766:	883b      	ldrh	r3, [r7, #0]
 8001768:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 800176a:	88bb      	ldrh	r3, [r7, #4]
 800176c:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 800176e:	893b      	ldrh	r3, [r7, #8]
 8001770:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 8001772:	887a      	ldrh	r2, [r7, #2]
 8001774:	88fb      	ldrh	r3, [r7, #6]
 8001776:	429a      	cmp	r2, r3
 8001778:	d205      	bcs.n	8001786 <SSD1306_DrawLine+0x104>
			tmp = x1;
 800177a:	887b      	ldrh	r3, [r7, #2]
 800177c:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 800177e:	88fb      	ldrh	r3, [r7, #6]
 8001780:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8001782:	893b      	ldrh	r3, [r7, #8]
 8001784:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 8001786:	88bb      	ldrh	r3, [r7, #4]
 8001788:	82bb      	strh	r3, [r7, #20]
 800178a:	e00c      	b.n	80017a6 <SSD1306_DrawLine+0x124>
			SSD1306_DrawPixel(x0, i, c);
 800178c:	8ab9      	ldrh	r1, [r7, #20]
 800178e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001792:	88fb      	ldrh	r3, [r7, #6]
 8001794:	4618      	mov	r0, r3
 8001796:	f7ff fe59 	bl	800144c <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 800179a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800179e:	b29b      	uxth	r3, r3
 80017a0:	3301      	adds	r3, #1
 80017a2:	b29b      	uxth	r3, r3
 80017a4:	82bb      	strh	r3, [r7, #20]
 80017a6:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80017aa:	883b      	ldrh	r3, [r7, #0]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	dded      	ble.n	800178c <SSD1306_DrawLine+0x10a>
		}
		
		/* Return from function */
		return;
 80017b0:	e05f      	b.n	8001872 <SSD1306_DrawLine+0x1f0>
	}
	
	if (dy == 0) {
 80017b2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d129      	bne.n	800180e <SSD1306_DrawLine+0x18c>
		if (y1 < y0) {
 80017ba:	883a      	ldrh	r2, [r7, #0]
 80017bc:	88bb      	ldrh	r3, [r7, #4]
 80017be:	429a      	cmp	r2, r3
 80017c0:	d205      	bcs.n	80017ce <SSD1306_DrawLine+0x14c>
			tmp = y1;
 80017c2:	883b      	ldrh	r3, [r7, #0]
 80017c4:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 80017c6:	88bb      	ldrh	r3, [r7, #4]
 80017c8:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 80017ca:	893b      	ldrh	r3, [r7, #8]
 80017cc:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 80017ce:	887a      	ldrh	r2, [r7, #2]
 80017d0:	88fb      	ldrh	r3, [r7, #6]
 80017d2:	429a      	cmp	r2, r3
 80017d4:	d205      	bcs.n	80017e2 <SSD1306_DrawLine+0x160>
			tmp = x1;
 80017d6:	887b      	ldrh	r3, [r7, #2]
 80017d8:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 80017da:	88fb      	ldrh	r3, [r7, #6]
 80017dc:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 80017de:	893b      	ldrh	r3, [r7, #8]
 80017e0:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 80017e2:	88fb      	ldrh	r3, [r7, #6]
 80017e4:	82bb      	strh	r3, [r7, #20]
 80017e6:	e00c      	b.n	8001802 <SSD1306_DrawLine+0x180>
			SSD1306_DrawPixel(i, y0, c);
 80017e8:	8abb      	ldrh	r3, [r7, #20]
 80017ea:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80017ee:	88b9      	ldrh	r1, [r7, #4]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7ff fe2b 	bl	800144c <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 80017f6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80017fa:	b29b      	uxth	r3, r3
 80017fc:	3301      	adds	r3, #1
 80017fe:	b29b      	uxth	r3, r3
 8001800:	82bb      	strh	r3, [r7, #20]
 8001802:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001806:	887b      	ldrh	r3, [r7, #2]
 8001808:	429a      	cmp	r2, r3
 800180a:	dded      	ble.n	80017e8 <SSD1306_DrawLine+0x166>
		}
		
		/* Return from function */
		return;
 800180c:	e031      	b.n	8001872 <SSD1306_DrawLine+0x1f0>
	}
	
	while (1) {
		SSD1306_DrawPixel(x0, y0, c);
 800180e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001812:	88b9      	ldrh	r1, [r7, #4]
 8001814:	88fb      	ldrh	r3, [r7, #6]
 8001816:	4618      	mov	r0, r3
 8001818:	f7ff fe18 	bl	800144c <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 800181c:	88fa      	ldrh	r2, [r7, #6]
 800181e:	887b      	ldrh	r3, [r7, #2]
 8001820:	429a      	cmp	r2, r3
 8001822:	d103      	bne.n	800182c <SSD1306_DrawLine+0x1aa>
 8001824:	88ba      	ldrh	r2, [r7, #4]
 8001826:	883b      	ldrh	r3, [r7, #0]
 8001828:	429a      	cmp	r2, r3
 800182a:	d021      	beq.n	8001870 <SSD1306_DrawLine+0x1ee>
			break;
		}
		e2 = err; 
 800182c:	8afb      	ldrh	r3, [r7, #22]
 800182e:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 8001830:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001834:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001838:	425b      	negs	r3, r3
 800183a:	429a      	cmp	r2, r3
 800183c:	dd08      	ble.n	8001850 <SSD1306_DrawLine+0x1ce>
			err -= dy;
 800183e:	8afa      	ldrh	r2, [r7, #22]
 8001840:	8a3b      	ldrh	r3, [r7, #16]
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	b29b      	uxth	r3, r3
 8001846:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 8001848:	89fa      	ldrh	r2, [r7, #14]
 800184a:	88fb      	ldrh	r3, [r7, #6]
 800184c:	4413      	add	r3, r2
 800184e:	80fb      	strh	r3, [r7, #6]
		} 
		if (e2 < dy) {
 8001850:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001854:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001858:	429a      	cmp	r2, r3
 800185a:	dad8      	bge.n	800180e <SSD1306_DrawLine+0x18c>
			err += dx;
 800185c:	8afa      	ldrh	r2, [r7, #22]
 800185e:	8a7b      	ldrh	r3, [r7, #18]
 8001860:	4413      	add	r3, r2
 8001862:	b29b      	uxth	r3, r3
 8001864:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 8001866:	89ba      	ldrh	r2, [r7, #12]
 8001868:	88bb      	ldrh	r3, [r7, #4]
 800186a:	4413      	add	r3, r2
 800186c:	80bb      	strh	r3, [r7, #4]
		SSD1306_DrawPixel(x0, y0, c);
 800186e:	e7ce      	b.n	800180e <SSD1306_DrawLine+0x18c>
			break;
 8001870:	bf00      	nop
		} 
	}
}
 8001872:	371c      	adds	r7, #28
 8001874:	46bd      	mov	sp, r7
 8001876:	bd90      	pop	{r4, r7, pc}

08001878 <SSD1306_DrawRectangle>:

void SSD1306_DrawRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 8001878:	b590      	push	{r4, r7, lr}
 800187a:	b085      	sub	sp, #20
 800187c:	af02      	add	r7, sp, #8
 800187e:	4604      	mov	r4, r0
 8001880:	4608      	mov	r0, r1
 8001882:	4611      	mov	r1, r2
 8001884:	461a      	mov	r2, r3
 8001886:	4623      	mov	r3, r4
 8001888:	80fb      	strh	r3, [r7, #6]
 800188a:	4603      	mov	r3, r0
 800188c:	80bb      	strh	r3, [r7, #4]
 800188e:	460b      	mov	r3, r1
 8001890:	807b      	strh	r3, [r7, #2]
 8001892:	4613      	mov	r3, r2
 8001894:	803b      	strh	r3, [r7, #0]
	/* Check input parameters */
	if (
 8001896:	88fb      	ldrh	r3, [r7, #6]
 8001898:	2b7f      	cmp	r3, #127	; 0x7f
 800189a:	d853      	bhi.n	8001944 <SSD1306_DrawRectangle+0xcc>
		x >= SSD1306_WIDTH ||
 800189c:	88bb      	ldrh	r3, [r7, #4]
 800189e:	2b3f      	cmp	r3, #63	; 0x3f
 80018a0:	d850      	bhi.n	8001944 <SSD1306_DrawRectangle+0xcc>
		/* Return error */
		return;
	}
	
	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 80018a2:	88fa      	ldrh	r2, [r7, #6]
 80018a4:	887b      	ldrh	r3, [r7, #2]
 80018a6:	4413      	add	r3, r2
 80018a8:	2b7f      	cmp	r3, #127	; 0x7f
 80018aa:	dd03      	ble.n	80018b4 <SSD1306_DrawRectangle+0x3c>
		w = SSD1306_WIDTH - x;
 80018ac:	88fb      	ldrh	r3, [r7, #6]
 80018ae:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80018b2:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 80018b4:	88ba      	ldrh	r2, [r7, #4]
 80018b6:	883b      	ldrh	r3, [r7, #0]
 80018b8:	4413      	add	r3, r2
 80018ba:	2b3f      	cmp	r3, #63	; 0x3f
 80018bc:	dd03      	ble.n	80018c6 <SSD1306_DrawRectangle+0x4e>
		h = SSD1306_HEIGHT - y;
 80018be:	88bb      	ldrh	r3, [r7, #4]
 80018c0:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80018c4:	803b      	strh	r3, [r7, #0]
	}
	
	/* Draw 4 lines */
	SSD1306_DrawLine(x, y, x + w, y, c);         /* Top line */
 80018c6:	88fa      	ldrh	r2, [r7, #6]
 80018c8:	887b      	ldrh	r3, [r7, #2]
 80018ca:	4413      	add	r3, r2
 80018cc:	b29a      	uxth	r2, r3
 80018ce:	88bc      	ldrh	r4, [r7, #4]
 80018d0:	88b9      	ldrh	r1, [r7, #4]
 80018d2:	88f8      	ldrh	r0, [r7, #6]
 80018d4:	7e3b      	ldrb	r3, [r7, #24]
 80018d6:	9300      	str	r3, [sp, #0]
 80018d8:	4623      	mov	r3, r4
 80018da:	f7ff fed2 	bl	8001682 <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y + h, x + w, y + h, c); /* Bottom line */
 80018de:	88ba      	ldrh	r2, [r7, #4]
 80018e0:	883b      	ldrh	r3, [r7, #0]
 80018e2:	4413      	add	r3, r2
 80018e4:	b299      	uxth	r1, r3
 80018e6:	88fa      	ldrh	r2, [r7, #6]
 80018e8:	887b      	ldrh	r3, [r7, #2]
 80018ea:	4413      	add	r3, r2
 80018ec:	b29c      	uxth	r4, r3
 80018ee:	88ba      	ldrh	r2, [r7, #4]
 80018f0:	883b      	ldrh	r3, [r7, #0]
 80018f2:	4413      	add	r3, r2
 80018f4:	b29a      	uxth	r2, r3
 80018f6:	88f8      	ldrh	r0, [r7, #6]
 80018f8:	7e3b      	ldrb	r3, [r7, #24]
 80018fa:	9300      	str	r3, [sp, #0]
 80018fc:	4613      	mov	r3, r2
 80018fe:	4622      	mov	r2, r4
 8001900:	f7ff febf 	bl	8001682 <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y, x, y + h, c);         /* Left line */
 8001904:	88ba      	ldrh	r2, [r7, #4]
 8001906:	883b      	ldrh	r3, [r7, #0]
 8001908:	4413      	add	r3, r2
 800190a:	b29c      	uxth	r4, r3
 800190c:	88fa      	ldrh	r2, [r7, #6]
 800190e:	88b9      	ldrh	r1, [r7, #4]
 8001910:	88f8      	ldrh	r0, [r7, #6]
 8001912:	7e3b      	ldrb	r3, [r7, #24]
 8001914:	9300      	str	r3, [sp, #0]
 8001916:	4623      	mov	r3, r4
 8001918:	f7ff feb3 	bl	8001682 <SSD1306_DrawLine>
	SSD1306_DrawLine(x + w, y, x + w, y + h, c); /* Right line */
 800191c:	88fa      	ldrh	r2, [r7, #6]
 800191e:	887b      	ldrh	r3, [r7, #2]
 8001920:	4413      	add	r3, r2
 8001922:	b298      	uxth	r0, r3
 8001924:	88fa      	ldrh	r2, [r7, #6]
 8001926:	887b      	ldrh	r3, [r7, #2]
 8001928:	4413      	add	r3, r2
 800192a:	b29c      	uxth	r4, r3
 800192c:	88ba      	ldrh	r2, [r7, #4]
 800192e:	883b      	ldrh	r3, [r7, #0]
 8001930:	4413      	add	r3, r2
 8001932:	b29a      	uxth	r2, r3
 8001934:	88b9      	ldrh	r1, [r7, #4]
 8001936:	7e3b      	ldrb	r3, [r7, #24]
 8001938:	9300      	str	r3, [sp, #0]
 800193a:	4613      	mov	r3, r2
 800193c:	4622      	mov	r2, r4
 800193e:	f7ff fea0 	bl	8001682 <SSD1306_DrawLine>
 8001942:	e000      	b.n	8001946 <SSD1306_DrawRectangle+0xce>
		return;
 8001944:	bf00      	nop
}
 8001946:	370c      	adds	r7, #12
 8001948:	46bd      	mov	sp, r7
 800194a:	bd90      	pop	{r4, r7, pc}

0800194c <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001952:	4b07      	ldr	r3, [pc, #28]	; (8001970 <ssd1306_I2C_Init+0x24>)
 8001954:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001956:	e002      	b.n	800195e <ssd1306_I2C_Init+0x12>
		p--;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	3b01      	subs	r3, #1
 800195c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d1f9      	bne.n	8001958 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001964:	bf00      	nop
 8001966:	370c      	adds	r7, #12
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr
 8001970:	0003d090 	.word	0x0003d090

08001974 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001974:	b590      	push	{r4, r7, lr}
 8001976:	b0c7      	sub	sp, #284	; 0x11c
 8001978:	af02      	add	r7, sp, #8
 800197a:	4604      	mov	r4, r0
 800197c:	4608      	mov	r0, r1
 800197e:	4639      	mov	r1, r7
 8001980:	600a      	str	r2, [r1, #0]
 8001982:	4619      	mov	r1, r3
 8001984:	1dfb      	adds	r3, r7, #7
 8001986:	4622      	mov	r2, r4
 8001988:	701a      	strb	r2, [r3, #0]
 800198a:	1dbb      	adds	r3, r7, #6
 800198c:	4602      	mov	r2, r0
 800198e:	701a      	strb	r2, [r3, #0]
 8001990:	1d3b      	adds	r3, r7, #4
 8001992:	460a      	mov	r2, r1
 8001994:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001996:	f107 030c 	add.w	r3, r7, #12
 800199a:	1dba      	adds	r2, r7, #6
 800199c:	7812      	ldrb	r2, [r2, #0]
 800199e:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80019a0:	2300      	movs	r3, #0
 80019a2:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80019a6:	e010      	b.n	80019ca <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 80019a8:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80019ac:	463a      	mov	r2, r7
 80019ae:	6812      	ldr	r2, [r2, #0]
 80019b0:	441a      	add	r2, r3
 80019b2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80019b6:	3301      	adds	r3, #1
 80019b8:	7811      	ldrb	r1, [r2, #0]
 80019ba:	f107 020c 	add.w	r2, r7, #12
 80019be:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80019c0:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80019c4:	3301      	adds	r3, #1
 80019c6:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80019ca:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80019ce:	b29b      	uxth	r3, r3
 80019d0:	1d3a      	adds	r2, r7, #4
 80019d2:	8812      	ldrh	r2, [r2, #0]
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d8e7      	bhi.n	80019a8 <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 80019d8:	1dfb      	adds	r3, r7, #7
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	b299      	uxth	r1, r3
 80019de:	1d3b      	adds	r3, r7, #4
 80019e0:	881b      	ldrh	r3, [r3, #0]
 80019e2:	3301      	adds	r3, #1
 80019e4:	b298      	uxth	r0, r3
 80019e6:	f107 020c 	add.w	r2, r7, #12
 80019ea:	230a      	movs	r3, #10
 80019ec:	9300      	str	r3, [sp, #0]
 80019ee:	4603      	mov	r3, r0
 80019f0:	4803      	ldr	r0, [pc, #12]	; (8001a00 <ssd1306_I2C_WriteMulti+0x8c>)
 80019f2:	f001 f94b 	bl	8002c8c <HAL_I2C_Master_Transmit>
}
 80019f6:	bf00      	nop
 80019f8:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd90      	pop	{r4, r7, pc}
 8001a00:	20000998 	.word	0x20000998

08001a04 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b086      	sub	sp, #24
 8001a08:	af02      	add	r7, sp, #8
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	71fb      	strb	r3, [r7, #7]
 8001a0e:	460b      	mov	r3, r1
 8001a10:	71bb      	strb	r3, [r7, #6]
 8001a12:	4613      	mov	r3, r2
 8001a14:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001a16:	79bb      	ldrb	r3, [r7, #6]
 8001a18:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001a1a:	797b      	ldrb	r3, [r7, #5]
 8001a1c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001a1e:	79fb      	ldrb	r3, [r7, #7]
 8001a20:	b299      	uxth	r1, r3
 8001a22:	f107 020c 	add.w	r2, r7, #12
 8001a26:	230a      	movs	r3, #10
 8001a28:	9300      	str	r3, [sp, #0]
 8001a2a:	2302      	movs	r3, #2
 8001a2c:	4803      	ldr	r0, [pc, #12]	; (8001a3c <ssd1306_I2C_Write+0x38>)
 8001a2e:	f001 f92d 	bl	8002c8c <HAL_I2C_Master_Transmit>
}
 8001a32:	bf00      	nop
 8001a34:	3710      	adds	r7, #16
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	20000998 	.word	0x20000998

08001a40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a46:	2300      	movs	r3, #0
 8001a48:	607b      	str	r3, [r7, #4]
 8001a4a:	4b10      	ldr	r3, [pc, #64]	; (8001a8c <HAL_MspInit+0x4c>)
 8001a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a4e:	4a0f      	ldr	r2, [pc, #60]	; (8001a8c <HAL_MspInit+0x4c>)
 8001a50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a54:	6453      	str	r3, [r2, #68]	; 0x44
 8001a56:	4b0d      	ldr	r3, [pc, #52]	; (8001a8c <HAL_MspInit+0x4c>)
 8001a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a5e:	607b      	str	r3, [r7, #4]
 8001a60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a62:	2300      	movs	r3, #0
 8001a64:	603b      	str	r3, [r7, #0]
 8001a66:	4b09      	ldr	r3, [pc, #36]	; (8001a8c <HAL_MspInit+0x4c>)
 8001a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6a:	4a08      	ldr	r2, [pc, #32]	; (8001a8c <HAL_MspInit+0x4c>)
 8001a6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a70:	6413      	str	r3, [r2, #64]	; 0x40
 8001a72:	4b06      	ldr	r3, [pc, #24]	; (8001a8c <HAL_MspInit+0x4c>)
 8001a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a7a:	603b      	str	r3, [r7, #0]
 8001a7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a7e:	bf00      	nop
 8001a80:	370c      	adds	r7, #12
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	40023800 	.word	0x40023800

08001a90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001a94:	bf00      	nop
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr

08001a9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a9e:	b480      	push	{r7}
 8001aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001aa2:	e7fe      	b.n	8001aa2 <HardFault_Handler+0x4>

08001aa4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001aa8:	e7fe      	b.n	8001aa8 <MemManage_Handler+0x4>

08001aaa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001aaa:	b480      	push	{r7}
 8001aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001aae:	e7fe      	b.n	8001aae <BusFault_Handler+0x4>

08001ab0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ab4:	e7fe      	b.n	8001ab4 <UsageFault_Handler+0x4>

08001ab6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001aba:	bf00      	nop
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr

08001ac4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ac8:	bf00      	nop
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr

08001ad2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ad2:	b480      	push	{r7}
 8001ad4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ad6:	bf00      	nop
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr

08001ae0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ae4:	f000 fc7a 	bl	80023dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ae8:	bf00      	nop
 8001aea:	bd80      	pop	{r7, pc}

08001aec <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001af0:	2004      	movs	r0, #4
 8001af2:	f000 ff7b 	bl	80029ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001af6:	bf00      	nop
 8001af8:	bd80      	pop	{r7, pc}

08001afa <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001afa:	b580      	push	{r7, lr}
 8001afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001afe:	2008      	movs	r0, #8
 8001b00:	f000 ff74 	bl	80029ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001b04:	bf00      	nop
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001b0c:	2010      	movs	r0, #16
 8001b0e:	f000 ff6d 	bl	80029ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001b12:	bf00      	nop
 8001b14:	bd80      	pop	{r7, pc}
	...

08001b18 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b1c:	4802      	ldr	r0, [pc, #8]	; (8001b28 <TIM2_IRQHandler+0x10>)
 8001b1e:	f004 f8d2 	bl	8005cc6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b22:	bf00      	nop
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	20000b38 	.word	0x20000b38

08001b2c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001b30:	4802      	ldr	r0, [pc, #8]	; (8001b3c <OTG_FS_IRQHandler+0x10>)
 8001b32:	f001 fe30 	bl	8003796 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001b36:	bf00      	nop
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	200010dc 	.word	0x200010dc

08001b40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b086      	sub	sp, #24
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b48:	4a14      	ldr	r2, [pc, #80]	; (8001b9c <_sbrk+0x5c>)
 8001b4a:	4b15      	ldr	r3, [pc, #84]	; (8001ba0 <_sbrk+0x60>)
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b54:	4b13      	ldr	r3, [pc, #76]	; (8001ba4 <_sbrk+0x64>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d102      	bne.n	8001b62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b5c:	4b11      	ldr	r3, [pc, #68]	; (8001ba4 <_sbrk+0x64>)
 8001b5e:	4a12      	ldr	r2, [pc, #72]	; (8001ba8 <_sbrk+0x68>)
 8001b60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b62:	4b10      	ldr	r3, [pc, #64]	; (8001ba4 <_sbrk+0x64>)
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4413      	add	r3, r2
 8001b6a:	693a      	ldr	r2, [r7, #16]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d207      	bcs.n	8001b80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b70:	f008 f98e 	bl	8009e90 <__errno>
 8001b74:	4602      	mov	r2, r0
 8001b76:	230c      	movs	r3, #12
 8001b78:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001b7a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b7e:	e009      	b.n	8001b94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b80:	4b08      	ldr	r3, [pc, #32]	; (8001ba4 <_sbrk+0x64>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b86:	4b07      	ldr	r3, [pc, #28]	; (8001ba4 <_sbrk+0x64>)
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4413      	add	r3, r2
 8001b8e:	4a05      	ldr	r2, [pc, #20]	; (8001ba4 <_sbrk+0x64>)
 8001b90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b92:	68fb      	ldr	r3, [r7, #12]
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3718      	adds	r7, #24
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	20020000 	.word	0x20020000
 8001ba0:	00000400 	.word	0x00000400
 8001ba4:	20000988 	.word	0x20000988
 8001ba8:	200014e8 	.word	0x200014e8

08001bac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bb0:	4b08      	ldr	r3, [pc, #32]	; (8001bd4 <SystemInit+0x28>)
 8001bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bb6:	4a07      	ldr	r2, [pc, #28]	; (8001bd4 <SystemInit+0x28>)
 8001bb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001bc0:	4b04      	ldr	r3, [pc, #16]	; (8001bd4 <SystemInit+0x28>)
 8001bc2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001bc6:	609a      	str	r2, [r3, #8]
#endif
}
 8001bc8:	bf00      	nop
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	e000ed00 	.word	0xe000ed00

08001bd8 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b08c      	sub	sp, #48	; 0x30
 8001bdc:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8001bde:	f107 030c 	add.w	r3, r7, #12
 8001be2:	2224      	movs	r2, #36	; 0x24
 8001be4:	2100      	movs	r1, #0
 8001be6:	4618      	mov	r0, r3
 8001be8:	f008 f98c 	bl	8009f04 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bec:	1d3b      	adds	r3, r7, #4
 8001bee:	2200      	movs	r2, #0
 8001bf0:	601a      	str	r2, [r3, #0]
 8001bf2:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8001bf4:	4b21      	ldr	r3, [pc, #132]	; (8001c7c <MX_TIM2_Init+0xa4>)
 8001bf6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001bfa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001bfc:	4b1f      	ldr	r3, [pc, #124]	; (8001c7c <MX_TIM2_Init+0xa4>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c02:	4b1e      	ldr	r3, [pc, #120]	; (8001c7c <MX_TIM2_Init+0xa4>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001c08:	4b1c      	ldr	r3, [pc, #112]	; (8001c7c <MX_TIM2_Init+0xa4>)
 8001c0a:	f04f 32ff 	mov.w	r2, #4294967295
 8001c0e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c10:	4b1a      	ldr	r3, [pc, #104]	; (8001c7c <MX_TIM2_Init+0xa4>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c16:	4b19      	ldr	r3, [pc, #100]	; (8001c7c <MX_TIM2_Init+0xa4>)
 8001c18:	2280      	movs	r2, #128	; 0x80
 8001c1a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001c20:	2302      	movs	r3, #2
 8001c22:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c24:	2301      	movs	r3, #1
 8001c26:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001c2c:	230a      	movs	r3, #10
 8001c2e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001c30:	2302      	movs	r3, #2
 8001c32:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001c34:	2301      	movs	r3, #1
 8001c36:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001c3c:	230a      	movs	r3, #10
 8001c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001c40:	f107 030c 	add.w	r3, r7, #12
 8001c44:	4619      	mov	r1, r3
 8001c46:	480d      	ldr	r0, [pc, #52]	; (8001c7c <MX_TIM2_Init+0xa4>)
 8001c48:	f003 ff54 	bl	8005af4 <HAL_TIM_Encoder_Init>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001c52:	f7ff fa6b 	bl	800112c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c56:	2300      	movs	r3, #0
 8001c58:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c5e:	1d3b      	adds	r3, r7, #4
 8001c60:	4619      	mov	r1, r3
 8001c62:	4806      	ldr	r0, [pc, #24]	; (8001c7c <MX_TIM2_Init+0xa4>)
 8001c64:	f004 fa06 	bl	8006074 <HAL_TIMEx_MasterConfigSynchronization>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001c6e:	f7ff fa5d 	bl	800112c <Error_Handler>
  }

}
 8001c72:	bf00      	nop
 8001c74:	3730      	adds	r7, #48	; 0x30
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	20000b38 	.word	0x20000b38

08001c80 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b08a      	sub	sp, #40	; 0x28
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c88:	f107 0314 	add.w	r3, r7, #20
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]
 8001c90:	605a      	str	r2, [r3, #4]
 8001c92:	609a      	str	r2, [r3, #8]
 8001c94:	60da      	str	r2, [r3, #12]
 8001c96:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ca0:	d133      	bne.n	8001d0a <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	613b      	str	r3, [r7, #16]
 8001ca6:	4b1b      	ldr	r3, [pc, #108]	; (8001d14 <HAL_TIM_Encoder_MspInit+0x94>)
 8001ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001caa:	4a1a      	ldr	r2, [pc, #104]	; (8001d14 <HAL_TIM_Encoder_MspInit+0x94>)
 8001cac:	f043 0301 	orr.w	r3, r3, #1
 8001cb0:	6413      	str	r3, [r2, #64]	; 0x40
 8001cb2:	4b18      	ldr	r3, [pc, #96]	; (8001d14 <HAL_TIM_Encoder_MspInit+0x94>)
 8001cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb6:	f003 0301 	and.w	r3, r3, #1
 8001cba:	613b      	str	r3, [r7, #16]
 8001cbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	60fb      	str	r3, [r7, #12]
 8001cc2:	4b14      	ldr	r3, [pc, #80]	; (8001d14 <HAL_TIM_Encoder_MspInit+0x94>)
 8001cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc6:	4a13      	ldr	r2, [pc, #76]	; (8001d14 <HAL_TIM_Encoder_MspInit+0x94>)
 8001cc8:	f043 0301 	orr.w	r3, r3, #1
 8001ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8001cce:	4b11      	ldr	r3, [pc, #68]	; (8001d14 <HAL_TIM_Encoder_MspInit+0x94>)
 8001cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd2:	f003 0301 	and.w	r3, r3, #1
 8001cd6:	60fb      	str	r3, [r7, #12]
 8001cd8:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cde:	2302      	movs	r3, #2
 8001ce0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001cea:	2301      	movs	r3, #1
 8001cec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cee:	f107 0314 	add.w	r3, r7, #20
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	4808      	ldr	r0, [pc, #32]	; (8001d18 <HAL_TIM_Encoder_MspInit+0x98>)
 8001cf6:	f000 fcc5 	bl	8002684 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	2100      	movs	r1, #0
 8001cfe:	201c      	movs	r0, #28
 8001d00:	f000 fc89 	bl	8002616 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001d04:	201c      	movs	r0, #28
 8001d06:	f000 fca2 	bl	800264e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001d0a:	bf00      	nop
 8001d0c:	3728      	adds	r7, #40	; 0x28
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	40023800 	.word	0x40023800
 8001d18:	40020000 	.word	0x40020000

08001d1c <W25qxx_Spi>:
#else
#define W25qxx_Delay(delay) HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t W25qxx_Spi(uint8_t Data)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b086      	sub	sp, #24
 8001d20:	af02      	add	r7, sp, #8
 8001d22:	4603      	mov	r3, r0
 8001d24:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI, &Data, &ret, 1, 100);
 8001d26:	f107 020f 	add.w	r2, r7, #15
 8001d2a:	1df9      	adds	r1, r7, #7
 8001d2c:	2364      	movs	r3, #100	; 0x64
 8001d2e:	9300      	str	r3, [sp, #0]
 8001d30:	2301      	movs	r3, #1
 8001d32:	4804      	ldr	r0, [pc, #16]	; (8001d44 <W25qxx_Spi+0x28>)
 8001d34:	f003 fc2b 	bl	800558e <HAL_SPI_TransmitReceive>
	return ret;
 8001d38:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3710      	adds	r7, #16
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	20000ae0 	.word	0x20000ae0

08001d48 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	60fb      	str	r3, [r7, #12]
 8001d52:	2300      	movs	r3, #0
 8001d54:	60bb      	str	r3, [r7, #8]
 8001d56:	2300      	movs	r3, #0
 8001d58:	607b      	str	r3, [r7, #4]
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8001d5e:	2200      	movs	r2, #0
 8001d60:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d64:	4813      	ldr	r0, [pc, #76]	; (8001db4 <W25qxx_ReadID+0x6c>)
 8001d66:	f000 fe27 	bl	80029b8 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x9F);
 8001d6a:	209f      	movs	r0, #159	; 0x9f
 8001d6c:	f7ff ffd6 	bl	8001d1c <W25qxx_Spi>
	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001d70:	20a5      	movs	r0, #165	; 0xa5
 8001d72:	f7ff ffd3 	bl	8001d1c <W25qxx_Spi>
 8001d76:	4603      	mov	r3, r0
 8001d78:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001d7a:	20a5      	movs	r0, #165	; 0xa5
 8001d7c:	f7ff ffce 	bl	8001d1c <W25qxx_Spi>
 8001d80:	4603      	mov	r3, r0
 8001d82:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001d84:	20a5      	movs	r0, #165	; 0xa5
 8001d86:	f7ff ffc9 	bl	8001d1c <W25qxx_Spi>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8001d8e:	2201      	movs	r2, #1
 8001d90:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d94:	4807      	ldr	r0, [pc, #28]	; (8001db4 <W25qxx_ReadID+0x6c>)
 8001d96:	f000 fe0f 	bl	80029b8 <HAL_GPIO_WritePin>
	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	041a      	lsls	r2, r3, #16
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	021b      	lsls	r3, r3, #8
 8001da2:	4313      	orrs	r3, r2
 8001da4:	683a      	ldr	r2, [r7, #0]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	60fb      	str	r3, [r7, #12]
	return Temp;
 8001daa:	68fb      	ldr	r3, [r7, #12]
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3710      	adds	r7, #16
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	40020000 	.word	0x40020000

08001db8 <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 8001db8:	b590      	push	{r4, r7, lr}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001dc4:	4816      	ldr	r0, [pc, #88]	; (8001e20 <W25qxx_ReadUniqID+0x68>)
 8001dc6:	f000 fdf7 	bl	80029b8 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x4B);
 8001dca:	204b      	movs	r0, #75	; 0x4b
 8001dcc:	f7ff ffa6 	bl	8001d1c <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	71fb      	strb	r3, [r7, #7]
 8001dd4:	e005      	b.n	8001de2 <W25qxx_ReadUniqID+0x2a>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001dd6:	20a5      	movs	r0, #165	; 0xa5
 8001dd8:	f7ff ffa0 	bl	8001d1c <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8001ddc:	79fb      	ldrb	r3, [r7, #7]
 8001dde:	3301      	adds	r3, #1
 8001de0:	71fb      	strb	r3, [r7, #7]
 8001de2:	79fb      	ldrb	r3, [r7, #7]
 8001de4:	2b03      	cmp	r3, #3
 8001de6:	d9f6      	bls.n	8001dd6 <W25qxx_ReadUniqID+0x1e>
	for (uint8_t i = 0; i < 8; i++)
 8001de8:	2300      	movs	r3, #0
 8001dea:	71bb      	strb	r3, [r7, #6]
 8001dec:	e00b      	b.n	8001e06 <W25qxx_ReadUniqID+0x4e>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001dee:	79bc      	ldrb	r4, [r7, #6]
 8001df0:	20a5      	movs	r0, #165	; 0xa5
 8001df2:	f7ff ff93 	bl	8001d1c <W25qxx_Spi>
 8001df6:	4603      	mov	r3, r0
 8001df8:	461a      	mov	r2, r3
 8001dfa:	4b0a      	ldr	r3, [pc, #40]	; (8001e24 <W25qxx_ReadUniqID+0x6c>)
 8001dfc:	4423      	add	r3, r4
 8001dfe:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < 8; i++)
 8001e00:	79bb      	ldrb	r3, [r7, #6]
 8001e02:	3301      	adds	r3, #1
 8001e04:	71bb      	strb	r3, [r7, #6]
 8001e06:	79bb      	ldrb	r3, [r7, #6]
 8001e08:	2b07      	cmp	r3, #7
 8001e0a:	d9f0      	bls.n	8001dee <W25qxx_ReadUniqID+0x36>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e12:	4803      	ldr	r0, [pc, #12]	; (8001e20 <W25qxx_ReadUniqID+0x68>)
 8001e14:	f000 fdd0 	bl	80029b8 <HAL_GPIO_WritePin>
}
 8001e18:	bf00      	nop
 8001e1a:	370c      	adds	r7, #12
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd90      	pop	{r4, r7, pc}
 8001e20:	40020000 	.word	0x40020000
 8001e24:	20000b78 	.word	0x20000b78

08001e28 <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e32:	4808      	ldr	r0, [pc, #32]	; (8001e54 <W25qxx_WriteEnable+0x2c>)
 8001e34:	f000 fdc0 	bl	80029b8 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x06);
 8001e38:	2006      	movs	r0, #6
 8001e3a:	f7ff ff6f 	bl	8001d1c <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8001e3e:	2201      	movs	r2, #1
 8001e40:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e44:	4803      	ldr	r0, [pc, #12]	; (8001e54 <W25qxx_WriteEnable+0x2c>)
 8001e46:	f000 fdb7 	bl	80029b8 <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 8001e4a:	2001      	movs	r0, #1
 8001e4c:	f000 fae6 	bl	800241c <HAL_Delay>
}
 8001e50:	bf00      	nop
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	40020000 	.word	0x40020000

08001e58 <W25qxx_ReadStatusRegister>:
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusRegister_1_2_3)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	4603      	mov	r3, r0
 8001e60:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 8001e62:	2300      	movs	r3, #0
 8001e64:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8001e66:	2200      	movs	r2, #0
 8001e68:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e6c:	481c      	ldr	r0, [pc, #112]	; (8001ee0 <W25qxx_ReadStatusRegister+0x88>)
 8001e6e:	f000 fda3 	bl	80029b8 <HAL_GPIO_WritePin>
	if (SelectStatusRegister_1_2_3 == 1)
 8001e72:	79fb      	ldrb	r3, [r7, #7]
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d10c      	bne.n	8001e92 <W25qxx_ReadStatusRegister+0x3a>
	{
		W25qxx_Spi(0x05);
 8001e78:	2005      	movs	r0, #5
 8001e7a:	f7ff ff4f 	bl	8001d1c <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001e7e:	20a5      	movs	r0, #165	; 0xa5
 8001e80:	f7ff ff4c 	bl	8001d1c <W25qxx_Spi>
 8001e84:	4603      	mov	r3, r0
 8001e86:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 8001e88:	4a16      	ldr	r2, [pc, #88]	; (8001ee4 <W25qxx_ReadStatusRegister+0x8c>)
 8001e8a:	7bfb      	ldrb	r3, [r7, #15]
 8001e8c:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8001e90:	e01b      	b.n	8001eca <W25qxx_ReadStatusRegister+0x72>
	}
	else if (SelectStatusRegister_1_2_3 == 2)
 8001e92:	79fb      	ldrb	r3, [r7, #7]
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d10c      	bne.n	8001eb2 <W25qxx_ReadStatusRegister+0x5a>
	{
		W25qxx_Spi(0x35);
 8001e98:	2035      	movs	r0, #53	; 0x35
 8001e9a:	f7ff ff3f 	bl	8001d1c <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001e9e:	20a5      	movs	r0, #165	; 0xa5
 8001ea0:	f7ff ff3c 	bl	8001d1c <W25qxx_Spi>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 8001ea8:	4a0e      	ldr	r2, [pc, #56]	; (8001ee4 <W25qxx_ReadStatusRegister+0x8c>)
 8001eaa:	7bfb      	ldrb	r3, [r7, #15]
 8001eac:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 8001eb0:	e00b      	b.n	8001eca <W25qxx_ReadStatusRegister+0x72>
	}
	else
	{
		W25qxx_Spi(0x15);
 8001eb2:	2015      	movs	r0, #21
 8001eb4:	f7ff ff32 	bl	8001d1c <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001eb8:	20a5      	movs	r0, #165	; 0xa5
 8001eba:	f7ff ff2f 	bl	8001d1c <W25qxx_Spi>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 8001ec2:	4a08      	ldr	r2, [pc, #32]	; (8001ee4 <W25qxx_ReadStatusRegister+0x8c>)
 8001ec4:	7bfb      	ldrb	r3, [r7, #15]
 8001ec6:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8001eca:	2201      	movs	r2, #1
 8001ecc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ed0:	4803      	ldr	r0, [pc, #12]	; (8001ee0 <W25qxx_ReadStatusRegister+0x88>)
 8001ed2:	f000 fd71 	bl	80029b8 <HAL_GPIO_WritePin>
	return status;
 8001ed6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3710      	adds	r7, #16
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	40020000 	.word	0x40020000
 8001ee4:	20000b78 	.word	0x20000b78

08001ee8 <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 8001eec:	2001      	movs	r0, #1
 8001eee:	f000 fa95 	bl	800241c <HAL_Delay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ef8:	480f      	ldr	r0, [pc, #60]	; (8001f38 <W25qxx_WaitForWriteEnd+0x50>)
 8001efa:	f000 fd5d 	bl	80029b8 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 8001efe:	2005      	movs	r0, #5
 8001f00:	f7ff ff0c 	bl	8001d1c <W25qxx_Spi>
	do
	{
		w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001f04:	20a5      	movs	r0, #165	; 0xa5
 8001f06:	f7ff ff09 	bl	8001d1c <W25qxx_Spi>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	4b0b      	ldr	r3, [pc, #44]	; (8001f3c <W25qxx_WaitForWriteEnd+0x54>)
 8001f10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 8001f14:	2001      	movs	r0, #1
 8001f16:	f000 fa81 	bl	800241c <HAL_Delay>
	} while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 8001f1a:	4b08      	ldr	r3, [pc, #32]	; (8001f3c <W25qxx_WaitForWriteEnd+0x54>)
 8001f1c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f20:	f003 0301 	and.w	r3, r3, #1
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d1ed      	bne.n	8001f04 <W25qxx_WaitForWriteEnd+0x1c>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8001f28:	2201      	movs	r2, #1
 8001f2a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f2e:	4802      	ldr	r0, [pc, #8]	; (8001f38 <W25qxx_WaitForWriteEnd+0x50>)
 8001f30:	f000 fd42 	bl	80029b8 <HAL_GPIO_WritePin>
}
 8001f34:	bf00      	nop
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	40020000 	.word	0x40020000
 8001f3c:	20000b78 	.word	0x20000b78

08001f40 <W25qxx_Init>:
//###################################################################################################################
bool W25qxx_Init(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 8001f46:	4b62      	ldr	r3, [pc, #392]	; (80020d0 <W25qxx_Init+0x190>)
 8001f48:	2201      	movs	r2, #1
 8001f4a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	//while (HAL_GetTick() < 100)
	//	W25qxx_Delay(1);
	W25qxx_Delay(100);
 8001f4e:	2064      	movs	r0, #100	; 0x64
 8001f50:	f000 fa64 	bl	800241c <HAL_Delay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8001f54:	2201      	movs	r2, #1
 8001f56:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f5a:	485e      	ldr	r0, [pc, #376]	; (80020d4 <W25qxx_Init+0x194>)
 8001f5c:	f000 fd2c 	bl	80029b8 <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 8001f60:	2064      	movs	r0, #100	; 0x64
 8001f62:	f000 fa5b 	bl	800241c <HAL_Delay>
	uint32_t id;
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Init Begin...\r\n");
#endif
	id = W25qxx_ReadID();
 8001f66:	f7ff feef 	bl	8001d48 <W25qxx_ReadID>
 8001f6a:	6078      	str	r0, [r7, #4]

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ID:0x%X\r\n", id);
#endif
	switch (id & 0x000000FF)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	3b11      	subs	r3, #17
 8001f72:	2b0f      	cmp	r3, #15
 8001f74:	d86b      	bhi.n	800204e <W25qxx_Init+0x10e>
 8001f76:	a201      	add	r2, pc, #4	; (adr r2, 8001f7c <W25qxx_Init+0x3c>)
 8001f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f7c:	08002041 	.word	0x08002041
 8001f80:	08002033 	.word	0x08002033
 8001f84:	08002025 	.word	0x08002025
 8001f88:	08002017 	.word	0x08002017
 8001f8c:	08002009 	.word	0x08002009
 8001f90:	08001ffb 	.word	0x08001ffb
 8001f94:	08001fed 	.word	0x08001fed
 8001f98:	08001fdd 	.word	0x08001fdd
 8001f9c:	08001fcd 	.word	0x08001fcd
 8001fa0:	0800204f 	.word	0x0800204f
 8001fa4:	0800204f 	.word	0x0800204f
 8001fa8:	0800204f 	.word	0x0800204f
 8001fac:	0800204f 	.word	0x0800204f
 8001fb0:	0800204f 	.word	0x0800204f
 8001fb4:	0800204f 	.word	0x0800204f
 8001fb8:	08001fbd 	.word	0x08001fbd
	{
	case 0x20: // 	w25q512
		w25qxx.ID = W25Q512;
 8001fbc:	4b44      	ldr	r3, [pc, #272]	; (80020d0 <W25qxx_Init+0x190>)
 8001fbe:	220a      	movs	r2, #10
 8001fc0:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 1024;
 8001fc2:	4b43      	ldr	r3, [pc, #268]	; (80020d0 <W25qxx_Init+0x190>)
 8001fc4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fc8:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q512\r\n");
#endif
		break;
 8001fca:	e046      	b.n	800205a <W25qxx_Init+0x11a>
	case 0x19: // 	w25q256
		w25qxx.ID = W25Q256;
 8001fcc:	4b40      	ldr	r3, [pc, #256]	; (80020d0 <W25qxx_Init+0x190>)
 8001fce:	2209      	movs	r2, #9
 8001fd0:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 512;
 8001fd2:	4b3f      	ldr	r3, [pc, #252]	; (80020d0 <W25qxx_Init+0x190>)
 8001fd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fd8:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q256\r\n");
#endif
		break;
 8001fda:	e03e      	b.n	800205a <W25qxx_Init+0x11a>
	case 0x18: // 	w25q128
		w25qxx.ID = W25Q128;
 8001fdc:	4b3c      	ldr	r3, [pc, #240]	; (80020d0 <W25qxx_Init+0x190>)
 8001fde:	2208      	movs	r2, #8
 8001fe0:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 256;
 8001fe2:	4b3b      	ldr	r3, [pc, #236]	; (80020d0 <W25qxx_Init+0x190>)
 8001fe4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001fe8:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q128\r\n");
#endif
		break;
 8001fea:	e036      	b.n	800205a <W25qxx_Init+0x11a>
	case 0x17: //	w25q64
		w25qxx.ID = W25Q64;
 8001fec:	4b38      	ldr	r3, [pc, #224]	; (80020d0 <W25qxx_Init+0x190>)
 8001fee:	2207      	movs	r2, #7
 8001ff0:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 128;
 8001ff2:	4b37      	ldr	r3, [pc, #220]	; (80020d0 <W25qxx_Init+0x190>)
 8001ff4:	2280      	movs	r2, #128	; 0x80
 8001ff6:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q64\r\n");
#endif
		break;
 8001ff8:	e02f      	b.n	800205a <W25qxx_Init+0x11a>
	case 0x16: //	w25q32
		w25qxx.ID = W25Q32;
 8001ffa:	4b35      	ldr	r3, [pc, #212]	; (80020d0 <W25qxx_Init+0x190>)
 8001ffc:	2206      	movs	r2, #6
 8001ffe:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 64;
 8002000:	4b33      	ldr	r3, [pc, #204]	; (80020d0 <W25qxx_Init+0x190>)
 8002002:	2240      	movs	r2, #64	; 0x40
 8002004:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q32\r\n");
#endif
		break;
 8002006:	e028      	b.n	800205a <W25qxx_Init+0x11a>
	case 0x15: //	w25q16
		w25qxx.ID = W25Q16;
 8002008:	4b31      	ldr	r3, [pc, #196]	; (80020d0 <W25qxx_Init+0x190>)
 800200a:	2205      	movs	r2, #5
 800200c:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 32;
 800200e:	4b30      	ldr	r3, [pc, #192]	; (80020d0 <W25qxx_Init+0x190>)
 8002010:	2220      	movs	r2, #32
 8002012:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q16\r\n");
#endif
		break;
 8002014:	e021      	b.n	800205a <W25qxx_Init+0x11a>
	case 0x14: //	w25q80
		w25qxx.ID = W25Q80;
 8002016:	4b2e      	ldr	r3, [pc, #184]	; (80020d0 <W25qxx_Init+0x190>)
 8002018:	2204      	movs	r2, #4
 800201a:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 16;
 800201c:	4b2c      	ldr	r3, [pc, #176]	; (80020d0 <W25qxx_Init+0x190>)
 800201e:	2210      	movs	r2, #16
 8002020:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q80\r\n");
#endif
		break;
 8002022:	e01a      	b.n	800205a <W25qxx_Init+0x11a>
	case 0x13: //	w25q40
		w25qxx.ID = W25Q40;
 8002024:	4b2a      	ldr	r3, [pc, #168]	; (80020d0 <W25qxx_Init+0x190>)
 8002026:	2203      	movs	r2, #3
 8002028:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 8;
 800202a:	4b29      	ldr	r3, [pc, #164]	; (80020d0 <W25qxx_Init+0x190>)
 800202c:	2208      	movs	r2, #8
 800202e:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q40\r\n");
#endif
		break;
 8002030:	e013      	b.n	800205a <W25qxx_Init+0x11a>
	case 0x12: //	w25q20
		w25qxx.ID = W25Q20;
 8002032:	4b27      	ldr	r3, [pc, #156]	; (80020d0 <W25qxx_Init+0x190>)
 8002034:	2202      	movs	r2, #2
 8002036:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 4;
 8002038:	4b25      	ldr	r3, [pc, #148]	; (80020d0 <W25qxx_Init+0x190>)
 800203a:	2204      	movs	r2, #4
 800203c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q20\r\n");
#endif
		break;
 800203e:	e00c      	b.n	800205a <W25qxx_Init+0x11a>
	case 0x11: //	w25q10
		w25qxx.ID = W25Q10;
 8002040:	4b23      	ldr	r3, [pc, #140]	; (80020d0 <W25qxx_Init+0x190>)
 8002042:	2201      	movs	r2, #1
 8002044:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 2;
 8002046:	4b22      	ldr	r3, [pc, #136]	; (80020d0 <W25qxx_Init+0x190>)
 8002048:	2202      	movs	r2, #2
 800204a:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q10\r\n");
#endif
		break;
 800204c:	e005      	b.n	800205a <W25qxx_Init+0x11a>
	default:
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Unknown ID\r\n");
#endif
		w25qxx.Lock = 0;
 800204e:	4b20      	ldr	r3, [pc, #128]	; (80020d0 <W25qxx_Init+0x190>)
 8002050:	2200      	movs	r2, #0
 8002052:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		return false;
 8002056:	2300      	movs	r3, #0
 8002058:	e036      	b.n	80020c8 <W25qxx_Init+0x188>
	}
	w25qxx.PageSize = 256;
 800205a:	4b1d      	ldr	r3, [pc, #116]	; (80020d0 <W25qxx_Init+0x190>)
 800205c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002060:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 8002062:	4b1b      	ldr	r3, [pc, #108]	; (80020d0 <W25qxx_Init+0x190>)
 8002064:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002068:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 800206a:	4b19      	ldr	r3, [pc, #100]	; (80020d0 <W25qxx_Init+0x190>)
 800206c:	69db      	ldr	r3, [r3, #28]
 800206e:	011b      	lsls	r3, r3, #4
 8002070:	4a17      	ldr	r2, [pc, #92]	; (80020d0 <W25qxx_Init+0x190>)
 8002072:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 8002074:	4b16      	ldr	r3, [pc, #88]	; (80020d0 <W25qxx_Init+0x190>)
 8002076:	695b      	ldr	r3, [r3, #20]
 8002078:	4a15      	ldr	r2, [pc, #84]	; (80020d0 <W25qxx_Init+0x190>)
 800207a:	6912      	ldr	r2, [r2, #16]
 800207c:	fb02 f303 	mul.w	r3, r2, r3
 8002080:	4a13      	ldr	r2, [pc, #76]	; (80020d0 <W25qxx_Init+0x190>)
 8002082:	8952      	ldrh	r2, [r2, #10]
 8002084:	fbb3 f3f2 	udiv	r3, r3, r2
 8002088:	4a11      	ldr	r2, [pc, #68]	; (80020d0 <W25qxx_Init+0x190>)
 800208a:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 800208c:	4b10      	ldr	r3, [pc, #64]	; (80020d0 <W25qxx_Init+0x190>)
 800208e:	691b      	ldr	r3, [r3, #16]
 8002090:	011b      	lsls	r3, r3, #4
 8002092:	4a0f      	ldr	r2, [pc, #60]	; (80020d0 <W25qxx_Init+0x190>)
 8002094:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 8002096:	4b0e      	ldr	r3, [pc, #56]	; (80020d0 <W25qxx_Init+0x190>)
 8002098:	695b      	ldr	r3, [r3, #20]
 800209a:	4a0d      	ldr	r2, [pc, #52]	; (80020d0 <W25qxx_Init+0x190>)
 800209c:	6912      	ldr	r2, [r2, #16]
 800209e:	fb02 f303 	mul.w	r3, r2, r3
 80020a2:	0a9b      	lsrs	r3, r3, #10
 80020a4:	4a0a      	ldr	r2, [pc, #40]	; (80020d0 <W25qxx_Init+0x190>)
 80020a6:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 80020a8:	f7ff fe86 	bl	8001db8 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 80020ac:	2001      	movs	r0, #1
 80020ae:	f7ff fed3 	bl	8001e58 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 80020b2:	2002      	movs	r0, #2
 80020b4:	f7ff fed0 	bl	8001e58 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 80020b8:	2003      	movs	r0, #3
 80020ba:	f7ff fecd 	bl	8001e58 <W25qxx_ReadStatusRegister>
	printf("w25qxx Block Size: %d Bytes\r\n", w25qxx.BlockSize);
	printf("w25qxx Block Count: %d\r\n", w25qxx.BlockCount);
	printf("w25qxx Capacity: %d KiloBytes\r\n", w25qxx.CapacityInKiloByte);
	printf("w25qxx Init Done\r\n");
#endif
	w25qxx.Lock = 0;
 80020be:	4b04      	ldr	r3, [pc, #16]	; (80020d0 <W25qxx_Init+0x190>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 80020c6:	2301      	movs	r3, #1
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3708      	adds	r7, #8
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	20000b78 	.word	0x20000b78
 80020d4:	40020000 	.word	0x40020000

080020d8 <W25qxx_WritePage>:
#endif
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	60f8      	str	r0, [r7, #12]
 80020e0:	60b9      	str	r1, [r7, #8]
 80020e2:	607a      	str	r2, [r7, #4]
 80020e4:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 80020e6:	e002      	b.n	80020ee <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 80020e8:	2001      	movs	r0, #1
 80020ea:	f000 f997 	bl	800241c <HAL_Delay>
	while (w25qxx.Lock == 1)
 80020ee:	4b3a      	ldr	r3, [pc, #232]	; (80021d8 <W25qxx_WritePage+0x100>)
 80020f0:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d0f7      	beq.n	80020e8 <W25qxx_WritePage+0x10>
	w25qxx.Lock = 1;
 80020f8:	4b37      	ldr	r3, [pc, #220]	; (80021d8 <W25qxx_WritePage+0x100>)
 80020fa:	2201      	movs	r2, #1
 80020fc:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if (((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || (NumByteToWrite_up_to_PageSize == 0))
 8002100:	683a      	ldr	r2, [r7, #0]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4413      	add	r3, r2
 8002106:	4a34      	ldr	r2, [pc, #208]	; (80021d8 <W25qxx_WritePage+0x100>)
 8002108:	8952      	ldrh	r2, [r2, #10]
 800210a:	4293      	cmp	r3, r2
 800210c:	d802      	bhi.n	8002114 <W25qxx_WritePage+0x3c>
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d105      	bne.n	8002120 <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8002114:	4b30      	ldr	r3, [pc, #192]	; (80021d8 <W25qxx_WritePage+0x100>)
 8002116:	895b      	ldrh	r3, [r3, #10]
 8002118:	461a      	mov	r2, r3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	4413      	add	r3, r2
 8002126:	4a2c      	ldr	r2, [pc, #176]	; (80021d8 <W25qxx_WritePage+0x100>)
 8002128:	8952      	ldrh	r2, [r2, #10]
 800212a:	4293      	cmp	r3, r2
 800212c:	d905      	bls.n	800213a <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 800212e:	4b2a      	ldr	r3, [pc, #168]	; (80021d8 <W25qxx_WritePage+0x100>)
 8002130:	895b      	ldrh	r3, [r3, #10]
 8002132:	461a      	mov	r2, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToWrite_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t StartTime = HAL_GetTick();
#endif
	W25qxx_WaitForWriteEnd();
 800213a:	f7ff fed5 	bl	8001ee8 <W25qxx_WaitForWriteEnd>
	W25qxx_WriteEnable();
 800213e:	f7ff fe73 	bl	8001e28 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8002142:	2200      	movs	r2, #0
 8002144:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002148:	4824      	ldr	r0, [pc, #144]	; (80021dc <W25qxx_WritePage+0x104>)
 800214a:	f000 fc35 	bl	80029b8 <HAL_GPIO_WritePin>
	Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 800214e:	4b22      	ldr	r3, [pc, #136]	; (80021d8 <W25qxx_WritePage+0x100>)
 8002150:	895b      	ldrh	r3, [r3, #10]
 8002152:	461a      	mov	r2, r3
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	fb03 f302 	mul.w	r3, r3, r2
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	4413      	add	r3, r2
 800215e:	60bb      	str	r3, [r7, #8]
	if (w25qxx.ID >= W25Q256)
 8002160:	4b1d      	ldr	r3, [pc, #116]	; (80021d8 <W25qxx_WritePage+0x100>)
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	2b08      	cmp	r3, #8
 8002166:	d909      	bls.n	800217c <W25qxx_WritePage+0xa4>
	{
		W25qxx_Spi(0x12);
 8002168:	2012      	movs	r0, #18
 800216a:	f7ff fdd7 	bl	8001d1c <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	0e1b      	lsrs	r3, r3, #24
 8002172:	b2db      	uxtb	r3, r3
 8002174:	4618      	mov	r0, r3
 8002176:	f7ff fdd1 	bl	8001d1c <W25qxx_Spi>
 800217a:	e002      	b.n	8002182 <W25qxx_WritePage+0xaa>
	}
	else
	{
		W25qxx_Spi(0x02);
 800217c:	2002      	movs	r0, #2
 800217e:	f7ff fdcd 	bl	8001d1c <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	0c1b      	lsrs	r3, r3, #16
 8002186:	b2db      	uxtb	r3, r3
 8002188:	4618      	mov	r0, r3
 800218a:	f7ff fdc7 	bl	8001d1c <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	0a1b      	lsrs	r3, r3, #8
 8002192:	b2db      	uxtb	r3, r3
 8002194:	4618      	mov	r0, r3
 8002196:	f7ff fdc1 	bl	8001d1c <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	b2db      	uxtb	r3, r3
 800219e:	4618      	mov	r0, r3
 80021a0:	f7ff fdbc 	bl	8001d1c <W25qxx_Spi>
	HAL_SPI_Transmit(&_W25QXX_SPI, pBuffer, NumByteToWrite_up_to_PageSize, 100);
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	b29a      	uxth	r2, r3
 80021a8:	2364      	movs	r3, #100	; 0x64
 80021aa:	68f9      	ldr	r1, [r7, #12]
 80021ac:	480c      	ldr	r0, [pc, #48]	; (80021e0 <W25qxx_WritePage+0x108>)
 80021ae:	f002 ffb1 	bl	8005114 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80021b2:	2201      	movs	r2, #1
 80021b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80021b8:	4808      	ldr	r0, [pc, #32]	; (80021dc <W25qxx_WritePage+0x104>)
 80021ba:	f000 fbfd 	bl	80029b8 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 80021be:	f7ff fe93 	bl	8001ee8 <W25qxx_WaitForWriteEnd>
	}
	printf("\r\n");
	printf("w25qxx WritePage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 80021c2:	2001      	movs	r0, #1
 80021c4:	f000 f92a 	bl	800241c <HAL_Delay>
	w25qxx.Lock = 0;
 80021c8:	4b03      	ldr	r3, [pc, #12]	; (80021d8 <W25qxx_WritePage+0x100>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 80021d0:	bf00      	nop
 80021d2:	3710      	adds	r7, #16
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	20000b78 	.word	0x20000b78
 80021dc:	40020000 	.word	0x40020000
 80021e0:	20000ae0 	.word	0x20000ae0

080021e4 <W25qxx_ReadPage>:
	W25qxx_Delay(1);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b084      	sub	sp, #16
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	60f8      	str	r0, [r7, #12]
 80021ec:	60b9      	str	r1, [r7, #8]
 80021ee:	607a      	str	r2, [r7, #4]
 80021f0:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 80021f2:	e002      	b.n	80021fa <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 80021f4:	2001      	movs	r0, #1
 80021f6:	f000 f911 	bl	800241c <HAL_Delay>
	while (w25qxx.Lock == 1)
 80021fa:	4b37      	ldr	r3, [pc, #220]	; (80022d8 <W25qxx_ReadPage+0xf4>)
 80021fc:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8002200:	2b01      	cmp	r3, #1
 8002202:	d0f7      	beq.n	80021f4 <W25qxx_ReadPage+0x10>
	w25qxx.Lock = 1;
 8002204:	4b34      	ldr	r3, [pc, #208]	; (80022d8 <W25qxx_ReadPage+0xf4>)
 8002206:	2201      	movs	r2, #1
 8002208:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if ((NumByteToRead_up_to_PageSize > w25qxx.PageSize) || (NumByteToRead_up_to_PageSize == 0))
 800220c:	4b32      	ldr	r3, [pc, #200]	; (80022d8 <W25qxx_ReadPage+0xf4>)
 800220e:	895b      	ldrh	r3, [r3, #10]
 8002210:	461a      	mov	r2, r3
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	4293      	cmp	r3, r2
 8002216:	d802      	bhi.n	800221e <W25qxx_ReadPage+0x3a>
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d102      	bne.n	8002224 <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize;
 800221e:	4b2e      	ldr	r3, [pc, #184]	; (80022d8 <W25qxx_ReadPage+0xf4>)
 8002220:	895b      	ldrh	r3, [r3, #10]
 8002222:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 8002224:	687a      	ldr	r2, [r7, #4]
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	4413      	add	r3, r2
 800222a:	4a2b      	ldr	r2, [pc, #172]	; (80022d8 <W25qxx_ReadPage+0xf4>)
 800222c:	8952      	ldrh	r2, [r2, #10]
 800222e:	4293      	cmp	r3, r2
 8002230:	d905      	bls.n	800223e <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8002232:	4b29      	ldr	r3, [pc, #164]	; (80022d8 <W25qxx_ReadPage+0xf4>)
 8002234:	895b      	ldrh	r3, [r3, #10]
 8002236:	461a      	mov	r2, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	1ad3      	subs	r3, r2, r3
 800223c:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ReadPage:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToRead_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t StartTime = HAL_GetTick();
#endif
	Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 800223e:	4b26      	ldr	r3, [pc, #152]	; (80022d8 <W25qxx_ReadPage+0xf4>)
 8002240:	895b      	ldrh	r3, [r3, #10]
 8002242:	461a      	mov	r2, r3
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	fb03 f302 	mul.w	r3, r3, r2
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	4413      	add	r3, r2
 800224e:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8002250:	2200      	movs	r2, #0
 8002252:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002256:	4821      	ldr	r0, [pc, #132]	; (80022dc <W25qxx_ReadPage+0xf8>)
 8002258:	f000 fbae 	bl	80029b8 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 800225c:	4b1e      	ldr	r3, [pc, #120]	; (80022d8 <W25qxx_ReadPage+0xf4>)
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	2b08      	cmp	r3, #8
 8002262:	d909      	bls.n	8002278 <W25qxx_ReadPage+0x94>
	{
		W25qxx_Spi(0x0C);
 8002264:	200c      	movs	r0, #12
 8002266:	f7ff fd59 	bl	8001d1c <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	0e1b      	lsrs	r3, r3, #24
 800226e:	b2db      	uxtb	r3, r3
 8002270:	4618      	mov	r0, r3
 8002272:	f7ff fd53 	bl	8001d1c <W25qxx_Spi>
 8002276:	e002      	b.n	800227e <W25qxx_ReadPage+0x9a>
	}
	else
	{
		W25qxx_Spi(0x0B);
 8002278:	200b      	movs	r0, #11
 800227a:	f7ff fd4f 	bl	8001d1c <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	0c1b      	lsrs	r3, r3, #16
 8002282:	b2db      	uxtb	r3, r3
 8002284:	4618      	mov	r0, r3
 8002286:	f7ff fd49 	bl	8001d1c <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	0a1b      	lsrs	r3, r3, #8
 800228e:	b2db      	uxtb	r3, r3
 8002290:	4618      	mov	r0, r3
 8002292:	f7ff fd43 	bl	8001d1c <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	b2db      	uxtb	r3, r3
 800229a:	4618      	mov	r0, r3
 800229c:	f7ff fd3e 	bl	8001d1c <W25qxx_Spi>
	W25qxx_Spi(0);
 80022a0:	2000      	movs	r0, #0
 80022a2:	f7ff fd3b 	bl	8001d1c <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, NumByteToRead_up_to_PageSize, 100);
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	b29a      	uxth	r2, r3
 80022aa:	2364      	movs	r3, #100	; 0x64
 80022ac:	68f9      	ldr	r1, [r7, #12]
 80022ae:	480c      	ldr	r0, [pc, #48]	; (80022e0 <W25qxx_ReadPage+0xfc>)
 80022b0:	f003 f864 	bl	800537c <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80022b4:	2201      	movs	r2, #1
 80022b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80022ba:	4808      	ldr	r0, [pc, #32]	; (80022dc <W25qxx_ReadPage+0xf8>)
 80022bc:	f000 fb7c 	bl	80029b8 <HAL_GPIO_WritePin>
	}
	printf("\r\n");
	printf("w25qxx ReadPage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 80022c0:	2001      	movs	r0, #1
 80022c2:	f000 f8ab 	bl	800241c <HAL_Delay>
	w25qxx.Lock = 0;
 80022c6:	4b04      	ldr	r3, [pc, #16]	; (80022d8 <W25qxx_ReadPage+0xf4>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 80022ce:	bf00      	nop
 80022d0:	3710      	adds	r7, #16
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	20000b78 	.word	0x20000b78
 80022dc:	40020000 	.word	0x40020000
 80022e0:	20000ae0 	.word	0x20000ae0

080022e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80022e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800231c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80022e8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80022ea:	e003      	b.n	80022f4 <LoopCopyDataInit>

080022ec <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80022ec:	4b0c      	ldr	r3, [pc, #48]	; (8002320 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80022ee:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80022f0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80022f2:	3104      	adds	r1, #4

080022f4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80022f4:	480b      	ldr	r0, [pc, #44]	; (8002324 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80022f6:	4b0c      	ldr	r3, [pc, #48]	; (8002328 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80022f8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80022fa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80022fc:	d3f6      	bcc.n	80022ec <CopyDataInit>
  ldr  r2, =_sbss
 80022fe:	4a0b      	ldr	r2, [pc, #44]	; (800232c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002300:	e002      	b.n	8002308 <LoopFillZerobss>

08002302 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002302:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002304:	f842 3b04 	str.w	r3, [r2], #4

08002308 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002308:	4b09      	ldr	r3, [pc, #36]	; (8002330 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800230a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800230c:	d3f9      	bcc.n	8002302 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800230e:	f7ff fc4d 	bl	8001bac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002312:	f007 fdc3 	bl	8009e9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002316:	f7fe fc31 	bl	8000b7c <main>
  bx  lr    
 800231a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800231c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002320:	0800bab0 	.word	0x0800bab0
  ldr  r0, =_sdata
 8002324:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002328:	2000051c 	.word	0x2000051c
  ldr  r2, =_sbss
 800232c:	2000051c 	.word	0x2000051c
  ldr  r3, = _ebss
 8002330:	200014e8 	.word	0x200014e8

08002334 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002334:	e7fe      	b.n	8002334 <ADC_IRQHandler>
	...

08002338 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800233c:	4b0e      	ldr	r3, [pc, #56]	; (8002378 <HAL_Init+0x40>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a0d      	ldr	r2, [pc, #52]	; (8002378 <HAL_Init+0x40>)
 8002342:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002346:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002348:	4b0b      	ldr	r3, [pc, #44]	; (8002378 <HAL_Init+0x40>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a0a      	ldr	r2, [pc, #40]	; (8002378 <HAL_Init+0x40>)
 800234e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002352:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002354:	4b08      	ldr	r3, [pc, #32]	; (8002378 <HAL_Init+0x40>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a07      	ldr	r2, [pc, #28]	; (8002378 <HAL_Init+0x40>)
 800235a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800235e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002360:	2003      	movs	r0, #3
 8002362:	f000 f94d 	bl	8002600 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002366:	2000      	movs	r0, #0
 8002368:	f000 f808 	bl	800237c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800236c:	f7ff fb68 	bl	8001a40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002370:	2300      	movs	r3, #0
}
 8002372:	4618      	mov	r0, r3
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	40023c00 	.word	0x40023c00

0800237c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002384:	4b12      	ldr	r3, [pc, #72]	; (80023d0 <HAL_InitTick+0x54>)
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	4b12      	ldr	r3, [pc, #72]	; (80023d4 <HAL_InitTick+0x58>)
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	4619      	mov	r1, r3
 800238e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002392:	fbb3 f3f1 	udiv	r3, r3, r1
 8002396:	fbb2 f3f3 	udiv	r3, r2, r3
 800239a:	4618      	mov	r0, r3
 800239c:	f000 f965 	bl	800266a <HAL_SYSTICK_Config>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d001      	beq.n	80023aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e00e      	b.n	80023c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2b0f      	cmp	r3, #15
 80023ae:	d80a      	bhi.n	80023c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023b0:	2200      	movs	r2, #0
 80023b2:	6879      	ldr	r1, [r7, #4]
 80023b4:	f04f 30ff 	mov.w	r0, #4294967295
 80023b8:	f000 f92d 	bl	8002616 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023bc:	4a06      	ldr	r2, [pc, #24]	; (80023d8 <HAL_InitTick+0x5c>)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023c2:	2300      	movs	r3, #0
 80023c4:	e000      	b.n	80023c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3708      	adds	r7, #8
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	200000a0 	.word	0x200000a0
 80023d4:	200000a8 	.word	0x200000a8
 80023d8:	200000a4 	.word	0x200000a4

080023dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023dc:	b480      	push	{r7}
 80023de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023e0:	4b06      	ldr	r3, [pc, #24]	; (80023fc <HAL_IncTick+0x20>)
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	461a      	mov	r2, r3
 80023e6:	4b06      	ldr	r3, [pc, #24]	; (8002400 <HAL_IncTick+0x24>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4413      	add	r3, r2
 80023ec:	4a04      	ldr	r2, [pc, #16]	; (8002400 <HAL_IncTick+0x24>)
 80023ee:	6013      	str	r3, [r2, #0]
}
 80023f0:	bf00      	nop
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr
 80023fa:	bf00      	nop
 80023fc:	200000a8 	.word	0x200000a8
 8002400:	20000ba0 	.word	0x20000ba0

08002404 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002404:	b480      	push	{r7}
 8002406:	af00      	add	r7, sp, #0
  return uwTick;
 8002408:	4b03      	ldr	r3, [pc, #12]	; (8002418 <HAL_GetTick+0x14>)
 800240a:	681b      	ldr	r3, [r3, #0]
}
 800240c:	4618      	mov	r0, r3
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop
 8002418:	20000ba0 	.word	0x20000ba0

0800241c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002424:	f7ff ffee 	bl	8002404 <HAL_GetTick>
 8002428:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002434:	d005      	beq.n	8002442 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002436:	4b09      	ldr	r3, [pc, #36]	; (800245c <HAL_Delay+0x40>)
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	461a      	mov	r2, r3
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	4413      	add	r3, r2
 8002440:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002442:	bf00      	nop
 8002444:	f7ff ffde 	bl	8002404 <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	68fa      	ldr	r2, [r7, #12]
 8002450:	429a      	cmp	r2, r3
 8002452:	d8f7      	bhi.n	8002444 <HAL_Delay+0x28>
  {
  }
}
 8002454:	bf00      	nop
 8002456:	3710      	adds	r7, #16
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	200000a8 	.word	0x200000a8

08002460 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002460:	b480      	push	{r7}
 8002462:	b085      	sub	sp, #20
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	f003 0307 	and.w	r3, r3, #7
 800246e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002470:	4b0c      	ldr	r3, [pc, #48]	; (80024a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002476:	68ba      	ldr	r2, [r7, #8]
 8002478:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800247c:	4013      	ands	r3, r2
 800247e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002488:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800248c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002490:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002492:	4a04      	ldr	r2, [pc, #16]	; (80024a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	60d3      	str	r3, [r2, #12]
}
 8002498:	bf00      	nop
 800249a:	3714      	adds	r7, #20
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr
 80024a4:	e000ed00 	.word	0xe000ed00

080024a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024a8:	b480      	push	{r7}
 80024aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024ac:	4b04      	ldr	r3, [pc, #16]	; (80024c0 <__NVIC_GetPriorityGrouping+0x18>)
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	0a1b      	lsrs	r3, r3, #8
 80024b2:	f003 0307 	and.w	r3, r3, #7
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr
 80024c0:	e000ed00 	.word	0xe000ed00

080024c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	4603      	mov	r3, r0
 80024cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	db0b      	blt.n	80024ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024d6:	79fb      	ldrb	r3, [r7, #7]
 80024d8:	f003 021f 	and.w	r2, r3, #31
 80024dc:	4907      	ldr	r1, [pc, #28]	; (80024fc <__NVIC_EnableIRQ+0x38>)
 80024de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024e2:	095b      	lsrs	r3, r3, #5
 80024e4:	2001      	movs	r0, #1
 80024e6:	fa00 f202 	lsl.w	r2, r0, r2
 80024ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024ee:	bf00      	nop
 80024f0:	370c      	adds	r7, #12
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop
 80024fc:	e000e100 	.word	0xe000e100

08002500 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	4603      	mov	r3, r0
 8002508:	6039      	str	r1, [r7, #0]
 800250a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800250c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002510:	2b00      	cmp	r3, #0
 8002512:	db0a      	blt.n	800252a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	b2da      	uxtb	r2, r3
 8002518:	490c      	ldr	r1, [pc, #48]	; (800254c <__NVIC_SetPriority+0x4c>)
 800251a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800251e:	0112      	lsls	r2, r2, #4
 8002520:	b2d2      	uxtb	r2, r2
 8002522:	440b      	add	r3, r1
 8002524:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002528:	e00a      	b.n	8002540 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	b2da      	uxtb	r2, r3
 800252e:	4908      	ldr	r1, [pc, #32]	; (8002550 <__NVIC_SetPriority+0x50>)
 8002530:	79fb      	ldrb	r3, [r7, #7]
 8002532:	f003 030f 	and.w	r3, r3, #15
 8002536:	3b04      	subs	r3, #4
 8002538:	0112      	lsls	r2, r2, #4
 800253a:	b2d2      	uxtb	r2, r2
 800253c:	440b      	add	r3, r1
 800253e:	761a      	strb	r2, [r3, #24]
}
 8002540:	bf00      	nop
 8002542:	370c      	adds	r7, #12
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr
 800254c:	e000e100 	.word	0xe000e100
 8002550:	e000ed00 	.word	0xe000ed00

08002554 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002554:	b480      	push	{r7}
 8002556:	b089      	sub	sp, #36	; 0x24
 8002558:	af00      	add	r7, sp, #0
 800255a:	60f8      	str	r0, [r7, #12]
 800255c:	60b9      	str	r1, [r7, #8]
 800255e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	f003 0307 	and.w	r3, r3, #7
 8002566:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	f1c3 0307 	rsb	r3, r3, #7
 800256e:	2b04      	cmp	r3, #4
 8002570:	bf28      	it	cs
 8002572:	2304      	movcs	r3, #4
 8002574:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	3304      	adds	r3, #4
 800257a:	2b06      	cmp	r3, #6
 800257c:	d902      	bls.n	8002584 <NVIC_EncodePriority+0x30>
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	3b03      	subs	r3, #3
 8002582:	e000      	b.n	8002586 <NVIC_EncodePriority+0x32>
 8002584:	2300      	movs	r3, #0
 8002586:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002588:	f04f 32ff 	mov.w	r2, #4294967295
 800258c:	69bb      	ldr	r3, [r7, #24]
 800258e:	fa02 f303 	lsl.w	r3, r2, r3
 8002592:	43da      	mvns	r2, r3
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	401a      	ands	r2, r3
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800259c:	f04f 31ff 	mov.w	r1, #4294967295
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	fa01 f303 	lsl.w	r3, r1, r3
 80025a6:	43d9      	mvns	r1, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025ac:	4313      	orrs	r3, r2
         );
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3724      	adds	r7, #36	; 0x24
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr
	...

080025bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	3b01      	subs	r3, #1
 80025c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025cc:	d301      	bcc.n	80025d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025ce:	2301      	movs	r3, #1
 80025d0:	e00f      	b.n	80025f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025d2:	4a0a      	ldr	r2, [pc, #40]	; (80025fc <SysTick_Config+0x40>)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	3b01      	subs	r3, #1
 80025d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025da:	210f      	movs	r1, #15
 80025dc:	f04f 30ff 	mov.w	r0, #4294967295
 80025e0:	f7ff ff8e 	bl	8002500 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025e4:	4b05      	ldr	r3, [pc, #20]	; (80025fc <SysTick_Config+0x40>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025ea:	4b04      	ldr	r3, [pc, #16]	; (80025fc <SysTick_Config+0x40>)
 80025ec:	2207      	movs	r2, #7
 80025ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025f0:	2300      	movs	r3, #0
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3708      	adds	r7, #8
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	e000e010 	.word	0xe000e010

08002600 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b082      	sub	sp, #8
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	f7ff ff29 	bl	8002460 <__NVIC_SetPriorityGrouping>
}
 800260e:	bf00      	nop
 8002610:	3708      	adds	r7, #8
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}

08002616 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002616:	b580      	push	{r7, lr}
 8002618:	b086      	sub	sp, #24
 800261a:	af00      	add	r7, sp, #0
 800261c:	4603      	mov	r3, r0
 800261e:	60b9      	str	r1, [r7, #8]
 8002620:	607a      	str	r2, [r7, #4]
 8002622:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002624:	2300      	movs	r3, #0
 8002626:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002628:	f7ff ff3e 	bl	80024a8 <__NVIC_GetPriorityGrouping>
 800262c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	68b9      	ldr	r1, [r7, #8]
 8002632:	6978      	ldr	r0, [r7, #20]
 8002634:	f7ff ff8e 	bl	8002554 <NVIC_EncodePriority>
 8002638:	4602      	mov	r2, r0
 800263a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800263e:	4611      	mov	r1, r2
 8002640:	4618      	mov	r0, r3
 8002642:	f7ff ff5d 	bl	8002500 <__NVIC_SetPriority>
}
 8002646:	bf00      	nop
 8002648:	3718      	adds	r7, #24
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}

0800264e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800264e:	b580      	push	{r7, lr}
 8002650:	b082      	sub	sp, #8
 8002652:	af00      	add	r7, sp, #0
 8002654:	4603      	mov	r3, r0
 8002656:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002658:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800265c:	4618      	mov	r0, r3
 800265e:	f7ff ff31 	bl	80024c4 <__NVIC_EnableIRQ>
}
 8002662:	bf00      	nop
 8002664:	3708      	adds	r7, #8
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}

0800266a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800266a:	b580      	push	{r7, lr}
 800266c:	b082      	sub	sp, #8
 800266e:	af00      	add	r7, sp, #0
 8002670:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f7ff ffa2 	bl	80025bc <SysTick_Config>
 8002678:	4603      	mov	r3, r0
}
 800267a:	4618      	mov	r0, r3
 800267c:	3708      	adds	r7, #8
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
	...

08002684 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002684:	b480      	push	{r7}
 8002686:	b089      	sub	sp, #36	; 0x24
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800268e:	2300      	movs	r3, #0
 8002690:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002692:	2300      	movs	r3, #0
 8002694:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002696:	2300      	movs	r3, #0
 8002698:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800269a:	2300      	movs	r3, #0
 800269c:	61fb      	str	r3, [r7, #28]
 800269e:	e159      	b.n	8002954 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026a0:	2201      	movs	r2, #1
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	fa02 f303 	lsl.w	r3, r2, r3
 80026a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	697a      	ldr	r2, [r7, #20]
 80026b0:	4013      	ands	r3, r2
 80026b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026b4:	693a      	ldr	r2, [r7, #16]
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	429a      	cmp	r2, r3
 80026ba:	f040 8148 	bne.w	800294e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d00b      	beq.n	80026de <HAL_GPIO_Init+0x5a>
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d007      	beq.n	80026de <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026d2:	2b11      	cmp	r3, #17
 80026d4:	d003      	beq.n	80026de <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	2b12      	cmp	r3, #18
 80026dc:	d130      	bne.n	8002740 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	005b      	lsls	r3, r3, #1
 80026e8:	2203      	movs	r2, #3
 80026ea:	fa02 f303 	lsl.w	r3, r2, r3
 80026ee:	43db      	mvns	r3, r3
 80026f0:	69ba      	ldr	r2, [r7, #24]
 80026f2:	4013      	ands	r3, r2
 80026f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	68da      	ldr	r2, [r3, #12]
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	005b      	lsls	r3, r3, #1
 80026fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002702:	69ba      	ldr	r2, [r7, #24]
 8002704:	4313      	orrs	r3, r2
 8002706:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	69ba      	ldr	r2, [r7, #24]
 800270c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002714:	2201      	movs	r2, #1
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	fa02 f303 	lsl.w	r3, r2, r3
 800271c:	43db      	mvns	r3, r3
 800271e:	69ba      	ldr	r2, [r7, #24]
 8002720:	4013      	ands	r3, r2
 8002722:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	091b      	lsrs	r3, r3, #4
 800272a:	f003 0201 	and.w	r2, r3, #1
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	fa02 f303 	lsl.w	r3, r2, r3
 8002734:	69ba      	ldr	r2, [r7, #24]
 8002736:	4313      	orrs	r3, r2
 8002738:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	69ba      	ldr	r2, [r7, #24]
 800273e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	005b      	lsls	r3, r3, #1
 800274a:	2203      	movs	r2, #3
 800274c:	fa02 f303 	lsl.w	r3, r2, r3
 8002750:	43db      	mvns	r3, r3
 8002752:	69ba      	ldr	r2, [r7, #24]
 8002754:	4013      	ands	r3, r2
 8002756:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	689a      	ldr	r2, [r3, #8]
 800275c:	69fb      	ldr	r3, [r7, #28]
 800275e:	005b      	lsls	r3, r3, #1
 8002760:	fa02 f303 	lsl.w	r3, r2, r3
 8002764:	69ba      	ldr	r2, [r7, #24]
 8002766:	4313      	orrs	r3, r2
 8002768:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	69ba      	ldr	r2, [r7, #24]
 800276e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	2b02      	cmp	r3, #2
 8002776:	d003      	beq.n	8002780 <HAL_GPIO_Init+0xfc>
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	2b12      	cmp	r3, #18
 800277e:	d123      	bne.n	80027c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	08da      	lsrs	r2, r3, #3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	3208      	adds	r2, #8
 8002788:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800278c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	f003 0307 	and.w	r3, r3, #7
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	220f      	movs	r2, #15
 8002798:	fa02 f303 	lsl.w	r3, r2, r3
 800279c:	43db      	mvns	r3, r3
 800279e:	69ba      	ldr	r2, [r7, #24]
 80027a0:	4013      	ands	r3, r2
 80027a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	691a      	ldr	r2, [r3, #16]
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	f003 0307 	and.w	r3, r3, #7
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	fa02 f303 	lsl.w	r3, r2, r3
 80027b4:	69ba      	ldr	r2, [r7, #24]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	08da      	lsrs	r2, r3, #3
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	3208      	adds	r2, #8
 80027c2:	69b9      	ldr	r1, [r7, #24]
 80027c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	005b      	lsls	r3, r3, #1
 80027d2:	2203      	movs	r2, #3
 80027d4:	fa02 f303 	lsl.w	r3, r2, r3
 80027d8:	43db      	mvns	r3, r3
 80027da:	69ba      	ldr	r2, [r7, #24]
 80027dc:	4013      	ands	r3, r2
 80027de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f003 0203 	and.w	r2, r3, #3
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	005b      	lsls	r3, r3, #1
 80027ec:	fa02 f303 	lsl.w	r3, r2, r3
 80027f0:	69ba      	ldr	r2, [r7, #24]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	69ba      	ldr	r2, [r7, #24]
 80027fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002804:	2b00      	cmp	r3, #0
 8002806:	f000 80a2 	beq.w	800294e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800280a:	2300      	movs	r3, #0
 800280c:	60fb      	str	r3, [r7, #12]
 800280e:	4b56      	ldr	r3, [pc, #344]	; (8002968 <HAL_GPIO_Init+0x2e4>)
 8002810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002812:	4a55      	ldr	r2, [pc, #340]	; (8002968 <HAL_GPIO_Init+0x2e4>)
 8002814:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002818:	6453      	str	r3, [r2, #68]	; 0x44
 800281a:	4b53      	ldr	r3, [pc, #332]	; (8002968 <HAL_GPIO_Init+0x2e4>)
 800281c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800281e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002822:	60fb      	str	r3, [r7, #12]
 8002824:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002826:	4a51      	ldr	r2, [pc, #324]	; (800296c <HAL_GPIO_Init+0x2e8>)
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	089b      	lsrs	r3, r3, #2
 800282c:	3302      	adds	r3, #2
 800282e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002832:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	f003 0303 	and.w	r3, r3, #3
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	220f      	movs	r2, #15
 800283e:	fa02 f303 	lsl.w	r3, r2, r3
 8002842:	43db      	mvns	r3, r3
 8002844:	69ba      	ldr	r2, [r7, #24]
 8002846:	4013      	ands	r3, r2
 8002848:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4a48      	ldr	r2, [pc, #288]	; (8002970 <HAL_GPIO_Init+0x2ec>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d019      	beq.n	8002886 <HAL_GPIO_Init+0x202>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4a47      	ldr	r2, [pc, #284]	; (8002974 <HAL_GPIO_Init+0x2f0>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d013      	beq.n	8002882 <HAL_GPIO_Init+0x1fe>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4a46      	ldr	r2, [pc, #280]	; (8002978 <HAL_GPIO_Init+0x2f4>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d00d      	beq.n	800287e <HAL_GPIO_Init+0x1fa>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4a45      	ldr	r2, [pc, #276]	; (800297c <HAL_GPIO_Init+0x2f8>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d007      	beq.n	800287a <HAL_GPIO_Init+0x1f6>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4a44      	ldr	r2, [pc, #272]	; (8002980 <HAL_GPIO_Init+0x2fc>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d101      	bne.n	8002876 <HAL_GPIO_Init+0x1f2>
 8002872:	2304      	movs	r3, #4
 8002874:	e008      	b.n	8002888 <HAL_GPIO_Init+0x204>
 8002876:	2307      	movs	r3, #7
 8002878:	e006      	b.n	8002888 <HAL_GPIO_Init+0x204>
 800287a:	2303      	movs	r3, #3
 800287c:	e004      	b.n	8002888 <HAL_GPIO_Init+0x204>
 800287e:	2302      	movs	r3, #2
 8002880:	e002      	b.n	8002888 <HAL_GPIO_Init+0x204>
 8002882:	2301      	movs	r3, #1
 8002884:	e000      	b.n	8002888 <HAL_GPIO_Init+0x204>
 8002886:	2300      	movs	r3, #0
 8002888:	69fa      	ldr	r2, [r7, #28]
 800288a:	f002 0203 	and.w	r2, r2, #3
 800288e:	0092      	lsls	r2, r2, #2
 8002890:	4093      	lsls	r3, r2
 8002892:	69ba      	ldr	r2, [r7, #24]
 8002894:	4313      	orrs	r3, r2
 8002896:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002898:	4934      	ldr	r1, [pc, #208]	; (800296c <HAL_GPIO_Init+0x2e8>)
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	089b      	lsrs	r3, r3, #2
 800289e:	3302      	adds	r3, #2
 80028a0:	69ba      	ldr	r2, [r7, #24]
 80028a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028a6:	4b37      	ldr	r3, [pc, #220]	; (8002984 <HAL_GPIO_Init+0x300>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	43db      	mvns	r3, r3
 80028b0:	69ba      	ldr	r2, [r7, #24]
 80028b2:	4013      	ands	r3, r2
 80028b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d003      	beq.n	80028ca <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80028c2:	69ba      	ldr	r2, [r7, #24]
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028ca:	4a2e      	ldr	r2, [pc, #184]	; (8002984 <HAL_GPIO_Init+0x300>)
 80028cc:	69bb      	ldr	r3, [r7, #24]
 80028ce:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80028d0:	4b2c      	ldr	r3, [pc, #176]	; (8002984 <HAL_GPIO_Init+0x300>)
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	43db      	mvns	r3, r3
 80028da:	69ba      	ldr	r2, [r7, #24]
 80028dc:	4013      	ands	r3, r2
 80028de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d003      	beq.n	80028f4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80028ec:	69ba      	ldr	r2, [r7, #24]
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028f4:	4a23      	ldr	r2, [pc, #140]	; (8002984 <HAL_GPIO_Init+0x300>)
 80028f6:	69bb      	ldr	r3, [r7, #24]
 80028f8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028fa:	4b22      	ldr	r3, [pc, #136]	; (8002984 <HAL_GPIO_Init+0x300>)
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	43db      	mvns	r3, r3
 8002904:	69ba      	ldr	r2, [r7, #24]
 8002906:	4013      	ands	r3, r2
 8002908:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d003      	beq.n	800291e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002916:	69ba      	ldr	r2, [r7, #24]
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	4313      	orrs	r3, r2
 800291c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800291e:	4a19      	ldr	r2, [pc, #100]	; (8002984 <HAL_GPIO_Init+0x300>)
 8002920:	69bb      	ldr	r3, [r7, #24]
 8002922:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002924:	4b17      	ldr	r3, [pc, #92]	; (8002984 <HAL_GPIO_Init+0x300>)
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	43db      	mvns	r3, r3
 800292e:	69ba      	ldr	r2, [r7, #24]
 8002930:	4013      	ands	r3, r2
 8002932:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800293c:	2b00      	cmp	r3, #0
 800293e:	d003      	beq.n	8002948 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002940:	69ba      	ldr	r2, [r7, #24]
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	4313      	orrs	r3, r2
 8002946:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002948:	4a0e      	ldr	r2, [pc, #56]	; (8002984 <HAL_GPIO_Init+0x300>)
 800294a:	69bb      	ldr	r3, [r7, #24]
 800294c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	3301      	adds	r3, #1
 8002952:	61fb      	str	r3, [r7, #28]
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	2b0f      	cmp	r3, #15
 8002958:	f67f aea2 	bls.w	80026a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800295c:	bf00      	nop
 800295e:	3724      	adds	r7, #36	; 0x24
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr
 8002968:	40023800 	.word	0x40023800
 800296c:	40013800 	.word	0x40013800
 8002970:	40020000 	.word	0x40020000
 8002974:	40020400 	.word	0x40020400
 8002978:	40020800 	.word	0x40020800
 800297c:	40020c00 	.word	0x40020c00
 8002980:	40021000 	.word	0x40021000
 8002984:	40013c00 	.word	0x40013c00

08002988 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002988:	b480      	push	{r7}
 800298a:	b085      	sub	sp, #20
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	460b      	mov	r3, r1
 8002992:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	691a      	ldr	r2, [r3, #16]
 8002998:	887b      	ldrh	r3, [r7, #2]
 800299a:	4013      	ands	r3, r2
 800299c:	2b00      	cmp	r3, #0
 800299e:	d002      	beq.n	80029a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80029a0:	2301      	movs	r3, #1
 80029a2:	73fb      	strb	r3, [r7, #15]
 80029a4:	e001      	b.n	80029aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80029a6:	2300      	movs	r3, #0
 80029a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80029aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3714      	adds	r7, #20
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr

080029b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	460b      	mov	r3, r1
 80029c2:	807b      	strh	r3, [r7, #2]
 80029c4:	4613      	mov	r3, r2
 80029c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029c8:	787b      	ldrb	r3, [r7, #1]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d003      	beq.n	80029d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029ce:	887a      	ldrh	r2, [r7, #2]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80029d4:	e003      	b.n	80029de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80029d6:	887b      	ldrh	r3, [r7, #2]
 80029d8:	041a      	lsls	r2, r3, #16
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	619a      	str	r2, [r3, #24]
}
 80029de:	bf00      	nop
 80029e0:	370c      	adds	r7, #12
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr
	...

080029ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b082      	sub	sp, #8
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	4603      	mov	r3, r0
 80029f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80029f6:	4b08      	ldr	r3, [pc, #32]	; (8002a18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80029f8:	695a      	ldr	r2, [r3, #20]
 80029fa:	88fb      	ldrh	r3, [r7, #6]
 80029fc:	4013      	ands	r3, r2
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d006      	beq.n	8002a10 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002a02:	4a05      	ldr	r2, [pc, #20]	; (8002a18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a04:	88fb      	ldrh	r3, [r7, #6]
 8002a06:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002a08:	88fb      	ldrh	r3, [r7, #6]
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7fe faaa 	bl	8000f64 <HAL_GPIO_EXTI_Callback>
  }
}
 8002a10:	bf00      	nop
 8002a12:	3708      	adds	r7, #8
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	40013c00 	.word	0x40013c00

08002a1c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b084      	sub	sp, #16
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d101      	bne.n	8002a2e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e11f      	b.n	8002c6e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d106      	bne.n	8002a48 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f7fd fe7c 	bl	8000740 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2224      	movs	r2, #36	; 0x24
 8002a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f022 0201 	bic.w	r2, r2, #1
 8002a5e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a6e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a7e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002a80:	f002 fad0 	bl	8005024 <HAL_RCC_GetPCLK1Freq>
 8002a84:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	4a7b      	ldr	r2, [pc, #492]	; (8002c78 <HAL_I2C_Init+0x25c>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d807      	bhi.n	8002aa0 <HAL_I2C_Init+0x84>
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	4a7a      	ldr	r2, [pc, #488]	; (8002c7c <HAL_I2C_Init+0x260>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	bf94      	ite	ls
 8002a98:	2301      	movls	r3, #1
 8002a9a:	2300      	movhi	r3, #0
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	e006      	b.n	8002aae <HAL_I2C_Init+0x92>
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	4a77      	ldr	r2, [pc, #476]	; (8002c80 <HAL_I2C_Init+0x264>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	bf94      	ite	ls
 8002aa8:	2301      	movls	r3, #1
 8002aaa:	2300      	movhi	r3, #0
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d001      	beq.n	8002ab6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e0db      	b.n	8002c6e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	4a72      	ldr	r2, [pc, #456]	; (8002c84 <HAL_I2C_Init+0x268>)
 8002aba:	fba2 2303 	umull	r2, r3, r2, r3
 8002abe:	0c9b      	lsrs	r3, r3, #18
 8002ac0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	68ba      	ldr	r2, [r7, #8]
 8002ad2:	430a      	orrs	r2, r1
 8002ad4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	6a1b      	ldr	r3, [r3, #32]
 8002adc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	4a64      	ldr	r2, [pc, #400]	; (8002c78 <HAL_I2C_Init+0x25c>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d802      	bhi.n	8002af0 <HAL_I2C_Init+0xd4>
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	3301      	adds	r3, #1
 8002aee:	e009      	b.n	8002b04 <HAL_I2C_Init+0xe8>
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002af6:	fb02 f303 	mul.w	r3, r2, r3
 8002afa:	4a63      	ldr	r2, [pc, #396]	; (8002c88 <HAL_I2C_Init+0x26c>)
 8002afc:	fba2 2303 	umull	r2, r3, r2, r3
 8002b00:	099b      	lsrs	r3, r3, #6
 8002b02:	3301      	adds	r3, #1
 8002b04:	687a      	ldr	r2, [r7, #4]
 8002b06:	6812      	ldr	r2, [r2, #0]
 8002b08:	430b      	orrs	r3, r1
 8002b0a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	69db      	ldr	r3, [r3, #28]
 8002b12:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002b16:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	4956      	ldr	r1, [pc, #344]	; (8002c78 <HAL_I2C_Init+0x25c>)
 8002b20:	428b      	cmp	r3, r1
 8002b22:	d80d      	bhi.n	8002b40 <HAL_I2C_Init+0x124>
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	1e59      	subs	r1, r3, #1
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	005b      	lsls	r3, r3, #1
 8002b2e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b32:	3301      	adds	r3, #1
 8002b34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b38:	2b04      	cmp	r3, #4
 8002b3a:	bf38      	it	cc
 8002b3c:	2304      	movcc	r3, #4
 8002b3e:	e04f      	b.n	8002be0 <HAL_I2C_Init+0x1c4>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d111      	bne.n	8002b6c <HAL_I2C_Init+0x150>
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	1e58      	subs	r0, r3, #1
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6859      	ldr	r1, [r3, #4]
 8002b50:	460b      	mov	r3, r1
 8002b52:	005b      	lsls	r3, r3, #1
 8002b54:	440b      	add	r3, r1
 8002b56:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	bf0c      	ite	eq
 8002b64:	2301      	moveq	r3, #1
 8002b66:	2300      	movne	r3, #0
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	e012      	b.n	8002b92 <HAL_I2C_Init+0x176>
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	1e58      	subs	r0, r3, #1
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6859      	ldr	r1, [r3, #4]
 8002b74:	460b      	mov	r3, r1
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	440b      	add	r3, r1
 8002b7a:	0099      	lsls	r1, r3, #2
 8002b7c:	440b      	add	r3, r1
 8002b7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b82:	3301      	adds	r3, #1
 8002b84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	bf0c      	ite	eq
 8002b8c:	2301      	moveq	r3, #1
 8002b8e:	2300      	movne	r3, #0
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d001      	beq.n	8002b9a <HAL_I2C_Init+0x17e>
 8002b96:	2301      	movs	r3, #1
 8002b98:	e022      	b.n	8002be0 <HAL_I2C_Init+0x1c4>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d10e      	bne.n	8002bc0 <HAL_I2C_Init+0x1a4>
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	1e58      	subs	r0, r3, #1
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6859      	ldr	r1, [r3, #4]
 8002baa:	460b      	mov	r3, r1
 8002bac:	005b      	lsls	r3, r3, #1
 8002bae:	440b      	add	r3, r1
 8002bb0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bb4:	3301      	adds	r3, #1
 8002bb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bbe:	e00f      	b.n	8002be0 <HAL_I2C_Init+0x1c4>
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	1e58      	subs	r0, r3, #1
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6859      	ldr	r1, [r3, #4]
 8002bc8:	460b      	mov	r3, r1
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	440b      	add	r3, r1
 8002bce:	0099      	lsls	r1, r3, #2
 8002bd0:	440b      	add	r3, r1
 8002bd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bd6:	3301      	adds	r3, #1
 8002bd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bdc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002be0:	6879      	ldr	r1, [r7, #4]
 8002be2:	6809      	ldr	r1, [r1, #0]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	69da      	ldr	r2, [r3, #28]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6a1b      	ldr	r3, [r3, #32]
 8002bfa:	431a      	orrs	r2, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	430a      	orrs	r2, r1
 8002c02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002c0e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	6911      	ldr	r1, [r2, #16]
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	68d2      	ldr	r2, [r2, #12]
 8002c1a:	4311      	orrs	r1, r2
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	6812      	ldr	r2, [r2, #0]
 8002c20:	430b      	orrs	r3, r1
 8002c22:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	68db      	ldr	r3, [r3, #12]
 8002c2a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	695a      	ldr	r2, [r3, #20]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	699b      	ldr	r3, [r3, #24]
 8002c36:	431a      	orrs	r2, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	430a      	orrs	r2, r1
 8002c3e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f042 0201 	orr.w	r2, r2, #1
 8002c4e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2200      	movs	r2, #0
 8002c54:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2220      	movs	r2, #32
 8002c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2200      	movs	r2, #0
 8002c68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c6c:	2300      	movs	r3, #0
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3710      	adds	r7, #16
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	000186a0 	.word	0x000186a0
 8002c7c:	001e847f 	.word	0x001e847f
 8002c80:	003d08ff 	.word	0x003d08ff
 8002c84:	431bde83 	.word	0x431bde83
 8002c88:	10624dd3 	.word	0x10624dd3

08002c8c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b088      	sub	sp, #32
 8002c90:	af02      	add	r7, sp, #8
 8002c92:	60f8      	str	r0, [r7, #12]
 8002c94:	607a      	str	r2, [r7, #4]
 8002c96:	461a      	mov	r2, r3
 8002c98:	460b      	mov	r3, r1
 8002c9a:	817b      	strh	r3, [r7, #10]
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ca0:	f7ff fbb0 	bl	8002404 <HAL_GetTick>
 8002ca4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	2b20      	cmp	r3, #32
 8002cb0:	f040 80e0 	bne.w	8002e74 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	9300      	str	r3, [sp, #0]
 8002cb8:	2319      	movs	r3, #25
 8002cba:	2201      	movs	r2, #1
 8002cbc:	4970      	ldr	r1, [pc, #448]	; (8002e80 <HAL_I2C_Master_Transmit+0x1f4>)
 8002cbe:	68f8      	ldr	r0, [r7, #12]
 8002cc0:	f000 fa92 	bl	80031e8 <I2C_WaitOnFlagUntilTimeout>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d001      	beq.n	8002cce <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002cca:	2302      	movs	r3, #2
 8002ccc:	e0d3      	b.n	8002e76 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d101      	bne.n	8002cdc <HAL_I2C_Master_Transmit+0x50>
 8002cd8:	2302      	movs	r3, #2
 8002cda:	e0cc      	b.n	8002e76 <HAL_I2C_Master_Transmit+0x1ea>
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0301 	and.w	r3, r3, #1
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d007      	beq.n	8002d02 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f042 0201 	orr.w	r2, r2, #1
 8002d00:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d10:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2221      	movs	r2, #33	; 0x21
 8002d16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2210      	movs	r2, #16
 8002d1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2200      	movs	r2, #0
 8002d26:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	893a      	ldrh	r2, [r7, #8]
 8002d32:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d38:	b29a      	uxth	r2, r3
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	4a50      	ldr	r2, [pc, #320]	; (8002e84 <HAL_I2C_Master_Transmit+0x1f8>)
 8002d42:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002d44:	8979      	ldrh	r1, [r7, #10]
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	6a3a      	ldr	r2, [r7, #32]
 8002d4a:	68f8      	ldr	r0, [r7, #12]
 8002d4c:	f000 f9ca 	bl	80030e4 <I2C_MasterRequestWrite>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d001      	beq.n	8002d5a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e08d      	b.n	8002e76 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	613b      	str	r3, [r7, #16]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	695b      	ldr	r3, [r3, #20]
 8002d64:	613b      	str	r3, [r7, #16]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	699b      	ldr	r3, [r3, #24]
 8002d6c:	613b      	str	r3, [r7, #16]
 8002d6e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002d70:	e066      	b.n	8002e40 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d72:	697a      	ldr	r2, [r7, #20]
 8002d74:	6a39      	ldr	r1, [r7, #32]
 8002d76:	68f8      	ldr	r0, [r7, #12]
 8002d78:	f000 fb0c 	bl	8003394 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d00d      	beq.n	8002d9e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d86:	2b04      	cmp	r3, #4
 8002d88:	d107      	bne.n	8002d9a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d98:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e06b      	b.n	8002e76 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da2:	781a      	ldrb	r2, [r3, #0]
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dae:	1c5a      	adds	r2, r3, #1
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002db8:	b29b      	uxth	r3, r3
 8002dba:	3b01      	subs	r3, #1
 8002dbc:	b29a      	uxth	r2, r3
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dc6:	3b01      	subs	r3, #1
 8002dc8:	b29a      	uxth	r2, r3
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	695b      	ldr	r3, [r3, #20]
 8002dd4:	f003 0304 	and.w	r3, r3, #4
 8002dd8:	2b04      	cmp	r3, #4
 8002dda:	d11b      	bne.n	8002e14 <HAL_I2C_Master_Transmit+0x188>
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d017      	beq.n	8002e14 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de8:	781a      	ldrb	r2, [r3, #0]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df4:	1c5a      	adds	r2, r3, #1
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	3b01      	subs	r3, #1
 8002e02:	b29a      	uxth	r2, r3
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e0c:	3b01      	subs	r3, #1
 8002e0e:	b29a      	uxth	r2, r3
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e14:	697a      	ldr	r2, [r7, #20]
 8002e16:	6a39      	ldr	r1, [r7, #32]
 8002e18:	68f8      	ldr	r0, [r7, #12]
 8002e1a:	f000 fafc 	bl	8003416 <I2C_WaitOnBTFFlagUntilTimeout>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d00d      	beq.n	8002e40 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e28:	2b04      	cmp	r3, #4
 8002e2a:	d107      	bne.n	8002e3c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e3a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e01a      	b.n	8002e76 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d194      	bne.n	8002d72 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e56:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2220      	movs	r2, #32
 8002e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2200      	movs	r2, #0
 8002e64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002e70:	2300      	movs	r3, #0
 8002e72:	e000      	b.n	8002e76 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002e74:	2302      	movs	r3, #2
  }
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3718      	adds	r7, #24
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	00100002 	.word	0x00100002
 8002e84:	ffff0000 	.word	0xffff0000

08002e88 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b08a      	sub	sp, #40	; 0x28
 8002e8c:	af02      	add	r7, sp, #8
 8002e8e:	60f8      	str	r0, [r7, #12]
 8002e90:	607a      	str	r2, [r7, #4]
 8002e92:	603b      	str	r3, [r7, #0]
 8002e94:	460b      	mov	r3, r1
 8002e96:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002e98:	f7ff fab4 	bl	8002404 <HAL_GetTick>
 8002e9c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	2b20      	cmp	r3, #32
 8002eac:	f040 8111 	bne.w	80030d2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	9300      	str	r3, [sp, #0]
 8002eb4:	2319      	movs	r3, #25
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	4988      	ldr	r1, [pc, #544]	; (80030dc <HAL_I2C_IsDeviceReady+0x254>)
 8002eba:	68f8      	ldr	r0, [r7, #12]
 8002ebc:	f000 f994 	bl	80031e8 <I2C_WaitOnFlagUntilTimeout>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d001      	beq.n	8002eca <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002ec6:	2302      	movs	r3, #2
 8002ec8:	e104      	b.n	80030d4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d101      	bne.n	8002ed8 <HAL_I2C_IsDeviceReady+0x50>
 8002ed4:	2302      	movs	r3, #2
 8002ed6:	e0fd      	b.n	80030d4 <HAL_I2C_IsDeviceReady+0x24c>
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0301 	and.w	r3, r3, #1
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d007      	beq.n	8002efe <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f042 0201 	orr.w	r2, r2, #1
 8002efc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f0c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2224      	movs	r2, #36	; 0x24
 8002f12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	4a70      	ldr	r2, [pc, #448]	; (80030e0 <HAL_I2C_IsDeviceReady+0x258>)
 8002f20:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f30:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	9300      	str	r3, [sp, #0]
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f3e:	68f8      	ldr	r0, [r7, #12]
 8002f40:	f000 f952 	bl	80031e8 <I2C_WaitOnFlagUntilTimeout>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d00d      	beq.n	8002f66 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f58:	d103      	bne.n	8002f62 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f60:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e0b6      	b.n	80030d4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f66:	897b      	ldrh	r3, [r7, #10]
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002f74:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002f76:	f7ff fa45 	bl	8002404 <HAL_GetTick>
 8002f7a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	695b      	ldr	r3, [r3, #20]
 8002f82:	f003 0302 	and.w	r3, r3, #2
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	bf0c      	ite	eq
 8002f8a:	2301      	moveq	r3, #1
 8002f8c:	2300      	movne	r3, #0
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	695b      	ldr	r3, [r3, #20]
 8002f98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fa0:	bf0c      	ite	eq
 8002fa2:	2301      	moveq	r3, #1
 8002fa4:	2300      	movne	r3, #0
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002faa:	e025      	b.n	8002ff8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002fac:	f7ff fa2a 	bl	8002404 <HAL_GetTick>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	683a      	ldr	r2, [r7, #0]
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d302      	bcc.n	8002fc2 <HAL_I2C_IsDeviceReady+0x13a>
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d103      	bne.n	8002fca <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	22a0      	movs	r2, #160	; 0xa0
 8002fc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	695b      	ldr	r3, [r3, #20]
 8002fd0:	f003 0302 	and.w	r3, r3, #2
 8002fd4:	2b02      	cmp	r3, #2
 8002fd6:	bf0c      	ite	eq
 8002fd8:	2301      	moveq	r3, #1
 8002fda:	2300      	movne	r3, #0
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	695b      	ldr	r3, [r3, #20]
 8002fe6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fee:	bf0c      	ite	eq
 8002ff0:	2301      	moveq	r3, #1
 8002ff2:	2300      	movne	r3, #0
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	2ba0      	cmp	r3, #160	; 0xa0
 8003002:	d005      	beq.n	8003010 <HAL_I2C_IsDeviceReady+0x188>
 8003004:	7dfb      	ldrb	r3, [r7, #23]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d102      	bne.n	8003010 <HAL_I2C_IsDeviceReady+0x188>
 800300a:	7dbb      	ldrb	r3, [r7, #22]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d0cd      	beq.n	8002fac <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2220      	movs	r2, #32
 8003014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	695b      	ldr	r3, [r3, #20]
 800301e:	f003 0302 	and.w	r3, r3, #2
 8003022:	2b02      	cmp	r3, #2
 8003024:	d129      	bne.n	800307a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003034:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003036:	2300      	movs	r3, #0
 8003038:	613b      	str	r3, [r7, #16]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	695b      	ldr	r3, [r3, #20]
 8003040:	613b      	str	r3, [r7, #16]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	699b      	ldr	r3, [r3, #24]
 8003048:	613b      	str	r3, [r7, #16]
 800304a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	9300      	str	r3, [sp, #0]
 8003050:	2319      	movs	r3, #25
 8003052:	2201      	movs	r2, #1
 8003054:	4921      	ldr	r1, [pc, #132]	; (80030dc <HAL_I2C_IsDeviceReady+0x254>)
 8003056:	68f8      	ldr	r0, [r7, #12]
 8003058:	f000 f8c6 	bl	80031e8 <I2C_WaitOnFlagUntilTimeout>
 800305c:	4603      	mov	r3, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d001      	beq.n	8003066 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e036      	b.n	80030d4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2220      	movs	r2, #32
 800306a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2200      	movs	r2, #0
 8003072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003076:	2300      	movs	r3, #0
 8003078:	e02c      	b.n	80030d4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003088:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003092:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	9300      	str	r3, [sp, #0]
 8003098:	2319      	movs	r3, #25
 800309a:	2201      	movs	r2, #1
 800309c:	490f      	ldr	r1, [pc, #60]	; (80030dc <HAL_I2C_IsDeviceReady+0x254>)
 800309e:	68f8      	ldr	r0, [r7, #12]
 80030a0:	f000 f8a2 	bl	80031e8 <I2C_WaitOnFlagUntilTimeout>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d001      	beq.n	80030ae <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e012      	b.n	80030d4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80030ae:	69bb      	ldr	r3, [r7, #24]
 80030b0:	3301      	adds	r3, #1
 80030b2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80030b4:	69ba      	ldr	r2, [r7, #24]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	429a      	cmp	r2, r3
 80030ba:	f4ff af32 	bcc.w	8002f22 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2220      	movs	r2, #32
 80030c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2200      	movs	r2, #0
 80030ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e000      	b.n	80030d4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80030d2:	2302      	movs	r3, #2
  }
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3720      	adds	r7, #32
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	00100002 	.word	0x00100002
 80030e0:	ffff0000 	.word	0xffff0000

080030e4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b088      	sub	sp, #32
 80030e8:	af02      	add	r7, sp, #8
 80030ea:	60f8      	str	r0, [r7, #12]
 80030ec:	607a      	str	r2, [r7, #4]
 80030ee:	603b      	str	r3, [r7, #0]
 80030f0:	460b      	mov	r3, r1
 80030f2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	2b08      	cmp	r3, #8
 80030fe:	d006      	beq.n	800310e <I2C_MasterRequestWrite+0x2a>
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	2b01      	cmp	r3, #1
 8003104:	d003      	beq.n	800310e <I2C_MasterRequestWrite+0x2a>
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800310c:	d108      	bne.n	8003120 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800311c:	601a      	str	r2, [r3, #0]
 800311e:	e00b      	b.n	8003138 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003124:	2b12      	cmp	r3, #18
 8003126:	d107      	bne.n	8003138 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003136:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	9300      	str	r3, [sp, #0]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2200      	movs	r2, #0
 8003140:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003144:	68f8      	ldr	r0, [r7, #12]
 8003146:	f000 f84f 	bl	80031e8 <I2C_WaitOnFlagUntilTimeout>
 800314a:	4603      	mov	r3, r0
 800314c:	2b00      	cmp	r3, #0
 800314e:	d00d      	beq.n	800316c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800315a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800315e:	d103      	bne.n	8003168 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003166:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003168:	2303      	movs	r3, #3
 800316a:	e035      	b.n	80031d8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	691b      	ldr	r3, [r3, #16]
 8003170:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003174:	d108      	bne.n	8003188 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003176:	897b      	ldrh	r3, [r7, #10]
 8003178:	b2db      	uxtb	r3, r3
 800317a:	461a      	mov	r2, r3
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003184:	611a      	str	r2, [r3, #16]
 8003186:	e01b      	b.n	80031c0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003188:	897b      	ldrh	r3, [r7, #10]
 800318a:	11db      	asrs	r3, r3, #7
 800318c:	b2db      	uxtb	r3, r3
 800318e:	f003 0306 	and.w	r3, r3, #6
 8003192:	b2db      	uxtb	r3, r3
 8003194:	f063 030f 	orn	r3, r3, #15
 8003198:	b2da      	uxtb	r2, r3
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	490e      	ldr	r1, [pc, #56]	; (80031e0 <I2C_MasterRequestWrite+0xfc>)
 80031a6:	68f8      	ldr	r0, [r7, #12]
 80031a8:	f000 f875 	bl	8003296 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d001      	beq.n	80031b6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e010      	b.n	80031d8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80031b6:	897b      	ldrh	r3, [r7, #10]
 80031b8:	b2da      	uxtb	r2, r3
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	4907      	ldr	r1, [pc, #28]	; (80031e4 <I2C_MasterRequestWrite+0x100>)
 80031c6:	68f8      	ldr	r0, [r7, #12]
 80031c8:	f000 f865 	bl	8003296 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d001      	beq.n	80031d6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e000      	b.n	80031d8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80031d6:	2300      	movs	r3, #0
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3718      	adds	r7, #24
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	00010008 	.word	0x00010008
 80031e4:	00010002 	.word	0x00010002

080031e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b084      	sub	sp, #16
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	60f8      	str	r0, [r7, #12]
 80031f0:	60b9      	str	r1, [r7, #8]
 80031f2:	603b      	str	r3, [r7, #0]
 80031f4:	4613      	mov	r3, r2
 80031f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031f8:	e025      	b.n	8003246 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003200:	d021      	beq.n	8003246 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003202:	f7ff f8ff 	bl	8002404 <HAL_GetTick>
 8003206:	4602      	mov	r2, r0
 8003208:	69bb      	ldr	r3, [r7, #24]
 800320a:	1ad3      	subs	r3, r2, r3
 800320c:	683a      	ldr	r2, [r7, #0]
 800320e:	429a      	cmp	r2, r3
 8003210:	d302      	bcc.n	8003218 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d116      	bne.n	8003246 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2200      	movs	r2, #0
 800321c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2220      	movs	r2, #32
 8003222:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2200      	movs	r2, #0
 800322a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003232:	f043 0220 	orr.w	r2, r3, #32
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2200      	movs	r2, #0
 800323e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e023      	b.n	800328e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	0c1b      	lsrs	r3, r3, #16
 800324a:	b2db      	uxtb	r3, r3
 800324c:	2b01      	cmp	r3, #1
 800324e:	d10d      	bne.n	800326c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	695b      	ldr	r3, [r3, #20]
 8003256:	43da      	mvns	r2, r3
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	4013      	ands	r3, r2
 800325c:	b29b      	uxth	r3, r3
 800325e:	2b00      	cmp	r3, #0
 8003260:	bf0c      	ite	eq
 8003262:	2301      	moveq	r3, #1
 8003264:	2300      	movne	r3, #0
 8003266:	b2db      	uxtb	r3, r3
 8003268:	461a      	mov	r2, r3
 800326a:	e00c      	b.n	8003286 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	699b      	ldr	r3, [r3, #24]
 8003272:	43da      	mvns	r2, r3
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	4013      	ands	r3, r2
 8003278:	b29b      	uxth	r3, r3
 800327a:	2b00      	cmp	r3, #0
 800327c:	bf0c      	ite	eq
 800327e:	2301      	moveq	r3, #1
 8003280:	2300      	movne	r3, #0
 8003282:	b2db      	uxtb	r3, r3
 8003284:	461a      	mov	r2, r3
 8003286:	79fb      	ldrb	r3, [r7, #7]
 8003288:	429a      	cmp	r2, r3
 800328a:	d0b6      	beq.n	80031fa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800328c:	2300      	movs	r3, #0
}
 800328e:	4618      	mov	r0, r3
 8003290:	3710      	adds	r7, #16
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}

08003296 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003296:	b580      	push	{r7, lr}
 8003298:	b084      	sub	sp, #16
 800329a:	af00      	add	r7, sp, #0
 800329c:	60f8      	str	r0, [r7, #12]
 800329e:	60b9      	str	r1, [r7, #8]
 80032a0:	607a      	str	r2, [r7, #4]
 80032a2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80032a4:	e051      	b.n	800334a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	695b      	ldr	r3, [r3, #20]
 80032ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032b4:	d123      	bne.n	80032fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032c4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80032ce:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2200      	movs	r2, #0
 80032d4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2220      	movs	r2, #32
 80032da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2200      	movs	r2, #0
 80032e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ea:	f043 0204 	orr.w	r2, r3, #4
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2200      	movs	r2, #0
 80032f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e046      	b.n	800338c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003304:	d021      	beq.n	800334a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003306:	f7ff f87d 	bl	8002404 <HAL_GetTick>
 800330a:	4602      	mov	r2, r0
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	687a      	ldr	r2, [r7, #4]
 8003312:	429a      	cmp	r2, r3
 8003314:	d302      	bcc.n	800331c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d116      	bne.n	800334a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2200      	movs	r2, #0
 8003320:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2220      	movs	r2, #32
 8003326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2200      	movs	r2, #0
 800332e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003336:	f043 0220 	orr.w	r2, r3, #32
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2200      	movs	r2, #0
 8003342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e020      	b.n	800338c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	0c1b      	lsrs	r3, r3, #16
 800334e:	b2db      	uxtb	r3, r3
 8003350:	2b01      	cmp	r3, #1
 8003352:	d10c      	bne.n	800336e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	695b      	ldr	r3, [r3, #20]
 800335a:	43da      	mvns	r2, r3
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	4013      	ands	r3, r2
 8003360:	b29b      	uxth	r3, r3
 8003362:	2b00      	cmp	r3, #0
 8003364:	bf14      	ite	ne
 8003366:	2301      	movne	r3, #1
 8003368:	2300      	moveq	r3, #0
 800336a:	b2db      	uxtb	r3, r3
 800336c:	e00b      	b.n	8003386 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	699b      	ldr	r3, [r3, #24]
 8003374:	43da      	mvns	r2, r3
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	4013      	ands	r3, r2
 800337a:	b29b      	uxth	r3, r3
 800337c:	2b00      	cmp	r3, #0
 800337e:	bf14      	ite	ne
 8003380:	2301      	movne	r3, #1
 8003382:	2300      	moveq	r3, #0
 8003384:	b2db      	uxtb	r3, r3
 8003386:	2b00      	cmp	r3, #0
 8003388:	d18d      	bne.n	80032a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800338a:	2300      	movs	r3, #0
}
 800338c:	4618      	mov	r0, r3
 800338e:	3710      	adds	r7, #16
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}

08003394 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b084      	sub	sp, #16
 8003398:	af00      	add	r7, sp, #0
 800339a:	60f8      	str	r0, [r7, #12]
 800339c:	60b9      	str	r1, [r7, #8]
 800339e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033a0:	e02d      	b.n	80033fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80033a2:	68f8      	ldr	r0, [r7, #12]
 80033a4:	f000 f878 	bl	8003498 <I2C_IsAcknowledgeFailed>
 80033a8:	4603      	mov	r3, r0
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d001      	beq.n	80033b2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e02d      	b.n	800340e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033b8:	d021      	beq.n	80033fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033ba:	f7ff f823 	bl	8002404 <HAL_GetTick>
 80033be:	4602      	mov	r2, r0
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	1ad3      	subs	r3, r2, r3
 80033c4:	68ba      	ldr	r2, [r7, #8]
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d302      	bcc.n	80033d0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d116      	bne.n	80033fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2200      	movs	r2, #0
 80033d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2220      	movs	r2, #32
 80033da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2200      	movs	r2, #0
 80033e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ea:	f043 0220 	orr.w	r2, r3, #32
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2200      	movs	r2, #0
 80033f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e007      	b.n	800340e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	695b      	ldr	r3, [r3, #20]
 8003404:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003408:	2b80      	cmp	r3, #128	; 0x80
 800340a:	d1ca      	bne.n	80033a2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800340c:	2300      	movs	r3, #0
}
 800340e:	4618      	mov	r0, r3
 8003410:	3710      	adds	r7, #16
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}

08003416 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003416:	b580      	push	{r7, lr}
 8003418:	b084      	sub	sp, #16
 800341a:	af00      	add	r7, sp, #0
 800341c:	60f8      	str	r0, [r7, #12]
 800341e:	60b9      	str	r1, [r7, #8]
 8003420:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003422:	e02d      	b.n	8003480 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003424:	68f8      	ldr	r0, [r7, #12]
 8003426:	f000 f837 	bl	8003498 <I2C_IsAcknowledgeFailed>
 800342a:	4603      	mov	r3, r0
 800342c:	2b00      	cmp	r3, #0
 800342e:	d001      	beq.n	8003434 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	e02d      	b.n	8003490 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	f1b3 3fff 	cmp.w	r3, #4294967295
 800343a:	d021      	beq.n	8003480 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800343c:	f7fe ffe2 	bl	8002404 <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	68ba      	ldr	r2, [r7, #8]
 8003448:	429a      	cmp	r2, r3
 800344a:	d302      	bcc.n	8003452 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d116      	bne.n	8003480 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2200      	movs	r2, #0
 8003456:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2220      	movs	r2, #32
 800345c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2200      	movs	r2, #0
 8003464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346c:	f043 0220 	orr.w	r2, r3, #32
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2200      	movs	r2, #0
 8003478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	e007      	b.n	8003490 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	695b      	ldr	r3, [r3, #20]
 8003486:	f003 0304 	and.w	r3, r3, #4
 800348a:	2b04      	cmp	r3, #4
 800348c:	d1ca      	bne.n	8003424 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800348e:	2300      	movs	r3, #0
}
 8003490:	4618      	mov	r0, r3
 8003492:	3710      	adds	r7, #16
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}

08003498 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	695b      	ldr	r3, [r3, #20]
 80034a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034ae:	d11b      	bne.n	80034e8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80034b8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2220      	movs	r2, #32
 80034c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2200      	movs	r2, #0
 80034cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d4:	f043 0204 	orr.w	r2, r3, #4
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2200      	movs	r2, #0
 80034e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e000      	b.n	80034ea <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80034e8:	2300      	movs	r3, #0
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	370c      	adds	r7, #12
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr

080034f6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80034f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034f8:	b08f      	sub	sp, #60	; 0x3c
 80034fa:	af0a      	add	r7, sp, #40	; 0x28
 80034fc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d101      	bne.n	8003508 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	e10f      	b.n	8003728 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003514:	b2db      	uxtb	r3, r3
 8003516:	2b00      	cmp	r3, #0
 8003518:	d106      	bne.n	8003528 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2200      	movs	r2, #0
 800351e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f006 f9c2 	bl	80098ac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2203      	movs	r2, #3
 800352c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003534:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003538:	2b00      	cmp	r3, #0
 800353a:	d102      	bne.n	8003542 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2200      	movs	r2, #0
 8003540:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4618      	mov	r0, r3
 8003548:	f002 ff2b 	bl	80063a2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	603b      	str	r3, [r7, #0]
 8003552:	687e      	ldr	r6, [r7, #4]
 8003554:	466d      	mov	r5, sp
 8003556:	f106 0410 	add.w	r4, r6, #16
 800355a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800355c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800355e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003560:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003562:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003566:	e885 0003 	stmia.w	r5, {r0, r1}
 800356a:	1d33      	adds	r3, r6, #4
 800356c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800356e:	6838      	ldr	r0, [r7, #0]
 8003570:	f002 fe02 	bl	8006178 <USB_CoreInit>
 8003574:	4603      	mov	r3, r0
 8003576:	2b00      	cmp	r3, #0
 8003578:	d005      	beq.n	8003586 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2202      	movs	r2, #2
 800357e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e0d0      	b.n	8003728 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	2100      	movs	r1, #0
 800358c:	4618      	mov	r0, r3
 800358e:	f002 ff19 	bl	80063c4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003592:	2300      	movs	r3, #0
 8003594:	73fb      	strb	r3, [r7, #15]
 8003596:	e04a      	b.n	800362e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003598:	7bfa      	ldrb	r2, [r7, #15]
 800359a:	6879      	ldr	r1, [r7, #4]
 800359c:	4613      	mov	r3, r2
 800359e:	00db      	lsls	r3, r3, #3
 80035a0:	1a9b      	subs	r3, r3, r2
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	440b      	add	r3, r1
 80035a6:	333d      	adds	r3, #61	; 0x3d
 80035a8:	2201      	movs	r2, #1
 80035aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80035ac:	7bfa      	ldrb	r2, [r7, #15]
 80035ae:	6879      	ldr	r1, [r7, #4]
 80035b0:	4613      	mov	r3, r2
 80035b2:	00db      	lsls	r3, r3, #3
 80035b4:	1a9b      	subs	r3, r3, r2
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	440b      	add	r3, r1
 80035ba:	333c      	adds	r3, #60	; 0x3c
 80035bc:	7bfa      	ldrb	r2, [r7, #15]
 80035be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80035c0:	7bfa      	ldrb	r2, [r7, #15]
 80035c2:	7bfb      	ldrb	r3, [r7, #15]
 80035c4:	b298      	uxth	r0, r3
 80035c6:	6879      	ldr	r1, [r7, #4]
 80035c8:	4613      	mov	r3, r2
 80035ca:	00db      	lsls	r3, r3, #3
 80035cc:	1a9b      	subs	r3, r3, r2
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	440b      	add	r3, r1
 80035d2:	3342      	adds	r3, #66	; 0x42
 80035d4:	4602      	mov	r2, r0
 80035d6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80035d8:	7bfa      	ldrb	r2, [r7, #15]
 80035da:	6879      	ldr	r1, [r7, #4]
 80035dc:	4613      	mov	r3, r2
 80035de:	00db      	lsls	r3, r3, #3
 80035e0:	1a9b      	subs	r3, r3, r2
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	440b      	add	r3, r1
 80035e6:	333f      	adds	r3, #63	; 0x3f
 80035e8:	2200      	movs	r2, #0
 80035ea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80035ec:	7bfa      	ldrb	r2, [r7, #15]
 80035ee:	6879      	ldr	r1, [r7, #4]
 80035f0:	4613      	mov	r3, r2
 80035f2:	00db      	lsls	r3, r3, #3
 80035f4:	1a9b      	subs	r3, r3, r2
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	440b      	add	r3, r1
 80035fa:	3344      	adds	r3, #68	; 0x44
 80035fc:	2200      	movs	r2, #0
 80035fe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003600:	7bfa      	ldrb	r2, [r7, #15]
 8003602:	6879      	ldr	r1, [r7, #4]
 8003604:	4613      	mov	r3, r2
 8003606:	00db      	lsls	r3, r3, #3
 8003608:	1a9b      	subs	r3, r3, r2
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	440b      	add	r3, r1
 800360e:	3348      	adds	r3, #72	; 0x48
 8003610:	2200      	movs	r2, #0
 8003612:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003614:	7bfa      	ldrb	r2, [r7, #15]
 8003616:	6879      	ldr	r1, [r7, #4]
 8003618:	4613      	mov	r3, r2
 800361a:	00db      	lsls	r3, r3, #3
 800361c:	1a9b      	subs	r3, r3, r2
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	440b      	add	r3, r1
 8003622:	3350      	adds	r3, #80	; 0x50
 8003624:	2200      	movs	r2, #0
 8003626:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003628:	7bfb      	ldrb	r3, [r7, #15]
 800362a:	3301      	adds	r3, #1
 800362c:	73fb      	strb	r3, [r7, #15]
 800362e:	7bfa      	ldrb	r2, [r7, #15]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	429a      	cmp	r2, r3
 8003636:	d3af      	bcc.n	8003598 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003638:	2300      	movs	r3, #0
 800363a:	73fb      	strb	r3, [r7, #15]
 800363c:	e044      	b.n	80036c8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800363e:	7bfa      	ldrb	r2, [r7, #15]
 8003640:	6879      	ldr	r1, [r7, #4]
 8003642:	4613      	mov	r3, r2
 8003644:	00db      	lsls	r3, r3, #3
 8003646:	1a9b      	subs	r3, r3, r2
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	440b      	add	r3, r1
 800364c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003650:	2200      	movs	r2, #0
 8003652:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003654:	7bfa      	ldrb	r2, [r7, #15]
 8003656:	6879      	ldr	r1, [r7, #4]
 8003658:	4613      	mov	r3, r2
 800365a:	00db      	lsls	r3, r3, #3
 800365c:	1a9b      	subs	r3, r3, r2
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	440b      	add	r3, r1
 8003662:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003666:	7bfa      	ldrb	r2, [r7, #15]
 8003668:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800366a:	7bfa      	ldrb	r2, [r7, #15]
 800366c:	6879      	ldr	r1, [r7, #4]
 800366e:	4613      	mov	r3, r2
 8003670:	00db      	lsls	r3, r3, #3
 8003672:	1a9b      	subs	r3, r3, r2
 8003674:	009b      	lsls	r3, r3, #2
 8003676:	440b      	add	r3, r1
 8003678:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800367c:	2200      	movs	r2, #0
 800367e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003680:	7bfa      	ldrb	r2, [r7, #15]
 8003682:	6879      	ldr	r1, [r7, #4]
 8003684:	4613      	mov	r3, r2
 8003686:	00db      	lsls	r3, r3, #3
 8003688:	1a9b      	subs	r3, r3, r2
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	440b      	add	r3, r1
 800368e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003692:	2200      	movs	r2, #0
 8003694:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003696:	7bfa      	ldrb	r2, [r7, #15]
 8003698:	6879      	ldr	r1, [r7, #4]
 800369a:	4613      	mov	r3, r2
 800369c:	00db      	lsls	r3, r3, #3
 800369e:	1a9b      	subs	r3, r3, r2
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	440b      	add	r3, r1
 80036a4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80036a8:	2200      	movs	r2, #0
 80036aa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80036ac:	7bfa      	ldrb	r2, [r7, #15]
 80036ae:	6879      	ldr	r1, [r7, #4]
 80036b0:	4613      	mov	r3, r2
 80036b2:	00db      	lsls	r3, r3, #3
 80036b4:	1a9b      	subs	r3, r3, r2
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	440b      	add	r3, r1
 80036ba:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80036be:	2200      	movs	r2, #0
 80036c0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036c2:	7bfb      	ldrb	r3, [r7, #15]
 80036c4:	3301      	adds	r3, #1
 80036c6:	73fb      	strb	r3, [r7, #15]
 80036c8:	7bfa      	ldrb	r2, [r7, #15]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d3b5      	bcc.n	800363e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	603b      	str	r3, [r7, #0]
 80036d8:	687e      	ldr	r6, [r7, #4]
 80036da:	466d      	mov	r5, sp
 80036dc:	f106 0410 	add.w	r4, r6, #16
 80036e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036e8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80036ec:	e885 0003 	stmia.w	r5, {r0, r1}
 80036f0:	1d33      	adds	r3, r6, #4
 80036f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80036f4:	6838      	ldr	r0, [r7, #0]
 80036f6:	f002 fe8f 	bl	8006418 <USB_DevInit>
 80036fa:	4603      	mov	r3, r0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d005      	beq.n	800370c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2202      	movs	r2, #2
 8003704:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e00d      	b.n	8003728 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2200      	movs	r2, #0
 8003710:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4618      	mov	r0, r3
 8003722:	f003 fed7 	bl	80074d4 <USB_DevDisconnect>

  return HAL_OK;
 8003726:	2300      	movs	r3, #0
}
 8003728:	4618      	mov	r0, r3
 800372a:	3714      	adds	r7, #20
 800372c:	46bd      	mov	sp, r7
 800372e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003730 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003744:	2b01      	cmp	r3, #1
 8003746:	d101      	bne.n	800374c <HAL_PCD_Start+0x1c>
 8003748:	2302      	movs	r3, #2
 800374a:	e020      	b.n	800378e <HAL_PCD_Start+0x5e>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2201      	movs	r2, #1
 8003750:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003758:	2b01      	cmp	r3, #1
 800375a:	d109      	bne.n	8003770 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003760:	2b01      	cmp	r3, #1
 8003762:	d005      	beq.n	8003770 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003768:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4618      	mov	r0, r3
 8003776:	f002 fe03 	bl	8006380 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4618      	mov	r0, r3
 8003780:	f003 fe87 	bl	8007492 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2200      	movs	r2, #0
 8003788:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800378c:	2300      	movs	r3, #0
}
 800378e:	4618      	mov	r0, r3
 8003790:	3710      	adds	r7, #16
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}

08003796 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003796:	b590      	push	{r4, r7, lr}
 8003798:	b08d      	sub	sp, #52	; 0x34
 800379a:	af00      	add	r7, sp, #0
 800379c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037a4:	6a3b      	ldr	r3, [r7, #32]
 80037a6:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4618      	mov	r0, r3
 80037ae:	f003 ff45 	bl	800763c <USB_GetMode>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	f040 839d 	bne.w	8003ef4 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4618      	mov	r0, r3
 80037c0:	f003 fea9 	bl	8007516 <USB_ReadInterrupts>
 80037c4:	4603      	mov	r3, r0
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	f000 8393 	beq.w	8003ef2 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4618      	mov	r0, r3
 80037d2:	f003 fea0 	bl	8007516 <USB_ReadInterrupts>
 80037d6:	4603      	mov	r3, r0
 80037d8:	f003 0302 	and.w	r3, r3, #2
 80037dc:	2b02      	cmp	r3, #2
 80037de:	d107      	bne.n	80037f0 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	695a      	ldr	r2, [r3, #20]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f002 0202 	and.w	r2, r2, #2
 80037ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4618      	mov	r0, r3
 80037f6:	f003 fe8e 	bl	8007516 <USB_ReadInterrupts>
 80037fa:	4603      	mov	r3, r0
 80037fc:	f003 0310 	and.w	r3, r3, #16
 8003800:	2b10      	cmp	r3, #16
 8003802:	d161      	bne.n	80038c8 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	699a      	ldr	r2, [r3, #24]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f022 0210 	bic.w	r2, r2, #16
 8003812:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8003814:	6a3b      	ldr	r3, [r7, #32]
 8003816:	6a1b      	ldr	r3, [r3, #32]
 8003818:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800381a:	69bb      	ldr	r3, [r7, #24]
 800381c:	f003 020f 	and.w	r2, r3, #15
 8003820:	4613      	mov	r3, r2
 8003822:	00db      	lsls	r3, r3, #3
 8003824:	1a9b      	subs	r3, r3, r2
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800382c:	687a      	ldr	r2, [r7, #4]
 800382e:	4413      	add	r3, r2
 8003830:	3304      	adds	r3, #4
 8003832:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003834:	69bb      	ldr	r3, [r7, #24]
 8003836:	0c5b      	lsrs	r3, r3, #17
 8003838:	f003 030f 	and.w	r3, r3, #15
 800383c:	2b02      	cmp	r3, #2
 800383e:	d124      	bne.n	800388a <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003840:	69ba      	ldr	r2, [r7, #24]
 8003842:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003846:	4013      	ands	r3, r2
 8003848:	2b00      	cmp	r3, #0
 800384a:	d035      	beq.n	80038b8 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003850:	69bb      	ldr	r3, [r7, #24]
 8003852:	091b      	lsrs	r3, r3, #4
 8003854:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003856:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800385a:	b29b      	uxth	r3, r3
 800385c:	461a      	mov	r2, r3
 800385e:	6a38      	ldr	r0, [r7, #32]
 8003860:	f003 fcf4 	bl	800724c <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	68da      	ldr	r2, [r3, #12]
 8003868:	69bb      	ldr	r3, [r7, #24]
 800386a:	091b      	lsrs	r3, r3, #4
 800386c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003870:	441a      	add	r2, r3
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	699a      	ldr	r2, [r3, #24]
 800387a:	69bb      	ldr	r3, [r7, #24]
 800387c:	091b      	lsrs	r3, r3, #4
 800387e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003882:	441a      	add	r2, r3
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	619a      	str	r2, [r3, #24]
 8003888:	e016      	b.n	80038b8 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800388a:	69bb      	ldr	r3, [r7, #24]
 800388c:	0c5b      	lsrs	r3, r3, #17
 800388e:	f003 030f 	and.w	r3, r3, #15
 8003892:	2b06      	cmp	r3, #6
 8003894:	d110      	bne.n	80038b8 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800389c:	2208      	movs	r2, #8
 800389e:	4619      	mov	r1, r3
 80038a0:	6a38      	ldr	r0, [r7, #32]
 80038a2:	f003 fcd3 	bl	800724c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	699a      	ldr	r2, [r3, #24]
 80038aa:	69bb      	ldr	r3, [r7, #24]
 80038ac:	091b      	lsrs	r3, r3, #4
 80038ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80038b2:	441a      	add	r2, r3
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	699a      	ldr	r2, [r3, #24]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f042 0210 	orr.w	r2, r2, #16
 80038c6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4618      	mov	r0, r3
 80038ce:	f003 fe22 	bl	8007516 <USB_ReadInterrupts>
 80038d2:	4603      	mov	r3, r0
 80038d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038d8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80038dc:	d16e      	bne.n	80039bc <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80038de:	2300      	movs	r3, #0
 80038e0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4618      	mov	r0, r3
 80038e8:	f003 fe28 	bl	800753c <USB_ReadDevAllOutEpInterrupt>
 80038ec:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80038ee:	e062      	b.n	80039b6 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80038f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038f2:	f003 0301 	and.w	r3, r3, #1
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d057      	beq.n	80039aa <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003900:	b2d2      	uxtb	r2, r2
 8003902:	4611      	mov	r1, r2
 8003904:	4618      	mov	r0, r3
 8003906:	f003 fe4d 	bl	80075a4 <USB_ReadDevOutEPInterrupt>
 800390a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	f003 0301 	and.w	r3, r3, #1
 8003912:	2b00      	cmp	r3, #0
 8003914:	d00c      	beq.n	8003930 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003918:	015a      	lsls	r2, r3, #5
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	4413      	add	r3, r2
 800391e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003922:	461a      	mov	r2, r3
 8003924:	2301      	movs	r3, #1
 8003926:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003928:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f000 fdb0 	bl	8004490 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	f003 0308 	and.w	r3, r3, #8
 8003936:	2b00      	cmp	r3, #0
 8003938:	d00c      	beq.n	8003954 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800393a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393c:	015a      	lsls	r2, r3, #5
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	4413      	add	r3, r2
 8003942:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003946:	461a      	mov	r2, r3
 8003948:	2308      	movs	r3, #8
 800394a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800394c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f000 feaa 	bl	80046a8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	f003 0310 	and.w	r3, r3, #16
 800395a:	2b00      	cmp	r3, #0
 800395c:	d008      	beq.n	8003970 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800395e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003960:	015a      	lsls	r2, r3, #5
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	4413      	add	r3, r2
 8003966:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800396a:	461a      	mov	r2, r3
 800396c:	2310      	movs	r3, #16
 800396e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	f003 0320 	and.w	r3, r3, #32
 8003976:	2b00      	cmp	r3, #0
 8003978:	d008      	beq.n	800398c <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800397a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397c:	015a      	lsls	r2, r3, #5
 800397e:	69fb      	ldr	r3, [r7, #28]
 8003980:	4413      	add	r3, r2
 8003982:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003986:	461a      	mov	r2, r3
 8003988:	2320      	movs	r3, #32
 800398a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d009      	beq.n	80039aa <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003998:	015a      	lsls	r2, r3, #5
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	4413      	add	r3, r2
 800399e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039a2:	461a      	mov	r2, r3
 80039a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80039a8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80039aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ac:	3301      	adds	r3, #1
 80039ae:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80039b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039b2:	085b      	lsrs	r3, r3, #1
 80039b4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80039b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d199      	bne.n	80038f0 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4618      	mov	r0, r3
 80039c2:	f003 fda8 	bl	8007516 <USB_ReadInterrupts>
 80039c6:	4603      	mov	r3, r0
 80039c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039cc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80039d0:	f040 80c0 	bne.w	8003b54 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4618      	mov	r0, r3
 80039da:	f003 fdc9 	bl	8007570 <USB_ReadDevAllInEpInterrupt>
 80039de:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80039e0:	2300      	movs	r3, #0
 80039e2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80039e4:	e0b2      	b.n	8003b4c <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80039e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039e8:	f003 0301 	and.w	r3, r3, #1
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	f000 80a7 	beq.w	8003b40 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039f8:	b2d2      	uxtb	r2, r2
 80039fa:	4611      	mov	r1, r2
 80039fc:	4618      	mov	r0, r3
 80039fe:	f003 fdef 	bl	80075e0 <USB_ReadDevInEPInterrupt>
 8003a02:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	f003 0301 	and.w	r3, r3, #1
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d057      	beq.n	8003abe <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a10:	f003 030f 	and.w	r3, r3, #15
 8003a14:	2201      	movs	r2, #1
 8003a16:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	43db      	mvns	r3, r3
 8003a28:	69f9      	ldr	r1, [r7, #28]
 8003a2a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a2e:	4013      	ands	r3, r2
 8003a30:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a34:	015a      	lsls	r2, r3, #5
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	4413      	add	r3, r2
 8003a3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a3e:	461a      	mov	r2, r3
 8003a40:	2301      	movs	r3, #1
 8003a42:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	691b      	ldr	r3, [r3, #16]
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d132      	bne.n	8003ab2 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003a4c:	6879      	ldr	r1, [r7, #4]
 8003a4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a50:	4613      	mov	r3, r2
 8003a52:	00db      	lsls	r3, r3, #3
 8003a54:	1a9b      	subs	r3, r3, r2
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	440b      	add	r3, r1
 8003a5a:	3348      	adds	r3, #72	; 0x48
 8003a5c:	6819      	ldr	r1, [r3, #0]
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a62:	4613      	mov	r3, r2
 8003a64:	00db      	lsls	r3, r3, #3
 8003a66:	1a9b      	subs	r3, r3, r2
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	4403      	add	r3, r0
 8003a6c:	3344      	adds	r3, #68	; 0x44
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4419      	add	r1, r3
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a76:	4613      	mov	r3, r2
 8003a78:	00db      	lsls	r3, r3, #3
 8003a7a:	1a9b      	subs	r3, r3, r2
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	4403      	add	r3, r0
 8003a80:	3348      	adds	r3, #72	; 0x48
 8003a82:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d113      	bne.n	8003ab2 <HAL_PCD_IRQHandler+0x31c>
 8003a8a:	6879      	ldr	r1, [r7, #4]
 8003a8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a8e:	4613      	mov	r3, r2
 8003a90:	00db      	lsls	r3, r3, #3
 8003a92:	1a9b      	subs	r3, r3, r2
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	440b      	add	r3, r1
 8003a98:	3350      	adds	r3, #80	; 0x50
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d108      	bne.n	8003ab2 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6818      	ldr	r0, [r3, #0]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003aaa:	461a      	mov	r2, r3
 8003aac:	2101      	movs	r1, #1
 8003aae:	f003 fdf7 	bl	80076a0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	4619      	mov	r1, r3
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f005 ff78 	bl	80099ae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	f003 0308 	and.w	r3, r3, #8
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d008      	beq.n	8003ada <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aca:	015a      	lsls	r2, r3, #5
 8003acc:	69fb      	ldr	r3, [r7, #28]
 8003ace:	4413      	add	r3, r2
 8003ad0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ad4:	461a      	mov	r2, r3
 8003ad6:	2308      	movs	r3, #8
 8003ad8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	f003 0310 	and.w	r3, r3, #16
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d008      	beq.n	8003af6 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae6:	015a      	lsls	r2, r3, #5
 8003ae8:	69fb      	ldr	r3, [r7, #28]
 8003aea:	4413      	add	r3, r2
 8003aec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003af0:	461a      	mov	r2, r3
 8003af2:	2310      	movs	r3, #16
 8003af4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d008      	beq.n	8003b12 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b02:	015a      	lsls	r2, r3, #5
 8003b04:	69fb      	ldr	r3, [r7, #28]
 8003b06:	4413      	add	r3, r2
 8003b08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b0c:	461a      	mov	r2, r3
 8003b0e:	2340      	movs	r3, #64	; 0x40
 8003b10:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	f003 0302 	and.w	r3, r3, #2
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d008      	beq.n	8003b2e <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b1e:	015a      	lsls	r2, r3, #5
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	4413      	add	r3, r2
 8003b24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b28:	461a      	mov	r2, r3
 8003b2a:	2302      	movs	r3, #2
 8003b2c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d003      	beq.n	8003b40 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003b38:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f000 fc1b 	bl	8004376 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b42:	3301      	adds	r3, #1
 8003b44:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b48:	085b      	lsrs	r3, r3, #1
 8003b4a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	f47f af49 	bne.w	80039e6 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f003 fcdc 	bl	8007516 <USB_ReadInterrupts>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003b64:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b68:	d122      	bne.n	8003bb0 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	69fa      	ldr	r2, [r7, #28]
 8003b74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b78:	f023 0301 	bic.w	r3, r3, #1
 8003b7c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d108      	bne.n	8003b9a <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003b90:	2100      	movs	r1, #0
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f000 fe26 	bl	80047e4 <HAL_PCDEx_LPM_Callback>
 8003b98:	e002      	b.n	8003ba0 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f005 ff74 	bl	8009a88 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	695a      	ldr	r2, [r3, #20]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003bae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f003 fcae 	bl	8007516 <USB_ReadInterrupts>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bc0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bc4:	d112      	bne.n	8003bec <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	f003 0301 	and.w	r3, r3, #1
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d102      	bne.n	8003bdc <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f005 ff30 	bl	8009a3c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	695a      	ldr	r2, [r3, #20]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003bea:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f003 fc90 	bl	8007516 <USB_ReadInterrupts>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c00:	f040 80c7 	bne.w	8003d92 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003c04:	69fb      	ldr	r3, [r7, #28]
 8003c06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	69fa      	ldr	r2, [r7, #28]
 8003c0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c12:	f023 0301 	bic.w	r3, r3, #1
 8003c16:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	2110      	movs	r1, #16
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f002 fd5e 	bl	80066e0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c24:	2300      	movs	r3, #0
 8003c26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c28:	e056      	b.n	8003cd8 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c2c:	015a      	lsls	r2, r3, #5
 8003c2e:	69fb      	ldr	r3, [r7, #28]
 8003c30:	4413      	add	r3, r2
 8003c32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c36:	461a      	mov	r2, r3
 8003c38:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003c3c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c40:	015a      	lsls	r2, r3, #5
 8003c42:	69fb      	ldr	r3, [r7, #28]
 8003c44:	4413      	add	r3, r2
 8003c46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c4e:	0151      	lsls	r1, r2, #5
 8003c50:	69fa      	ldr	r2, [r7, #28]
 8003c52:	440a      	add	r2, r1
 8003c54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c58:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003c5c:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c60:	015a      	lsls	r2, r3, #5
 8003c62:	69fb      	ldr	r3, [r7, #28]
 8003c64:	4413      	add	r3, r2
 8003c66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c6e:	0151      	lsls	r1, r2, #5
 8003c70:	69fa      	ldr	r2, [r7, #28]
 8003c72:	440a      	add	r2, r1
 8003c74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c78:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003c7c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c80:	015a      	lsls	r2, r3, #5
 8003c82:	69fb      	ldr	r3, [r7, #28]
 8003c84:	4413      	add	r3, r2
 8003c86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003c90:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c94:	015a      	lsls	r2, r3, #5
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	4413      	add	r3, r2
 8003c9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ca2:	0151      	lsls	r1, r2, #5
 8003ca4:	69fa      	ldr	r2, [r7, #28]
 8003ca6:	440a      	add	r2, r1
 8003ca8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003cac:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003cb0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cb4:	015a      	lsls	r2, r3, #5
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	4413      	add	r3, r2
 8003cba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cc2:	0151      	lsls	r1, r2, #5
 8003cc4:	69fa      	ldr	r2, [r7, #28]
 8003cc6:	440a      	add	r2, r1
 8003cc8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ccc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003cd0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cd4:	3301      	adds	r3, #1
 8003cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	d3a3      	bcc.n	8003c2a <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ce8:	69db      	ldr	r3, [r3, #28]
 8003cea:	69fa      	ldr	r2, [r7, #28]
 8003cec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cf0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003cf4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d016      	beq.n	8003d2c <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d08:	69fa      	ldr	r2, [r7, #28]
 8003d0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d0e:	f043 030b 	orr.w	r3, r3, #11
 8003d12:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d1e:	69fa      	ldr	r2, [r7, #28]
 8003d20:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d24:	f043 030b 	orr.w	r3, r3, #11
 8003d28:	6453      	str	r3, [r2, #68]	; 0x44
 8003d2a:	e015      	b.n	8003d58 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003d2c:	69fb      	ldr	r3, [r7, #28]
 8003d2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d32:	695b      	ldr	r3, [r3, #20]
 8003d34:	69fa      	ldr	r2, [r7, #28]
 8003d36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d3a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003d3e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003d42:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003d44:	69fb      	ldr	r3, [r7, #28]
 8003d46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d4a:	691b      	ldr	r3, [r3, #16]
 8003d4c:	69fa      	ldr	r2, [r7, #28]
 8003d4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d52:	f043 030b 	orr.w	r3, r3, #11
 8003d56:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003d58:	69fb      	ldr	r3, [r7, #28]
 8003d5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	69fa      	ldr	r2, [r7, #28]
 8003d62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d66:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003d6a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6818      	ldr	r0, [r3, #0]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	691b      	ldr	r3, [r3, #16]
 8003d74:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003d7c:	461a      	mov	r2, r3
 8003d7e:	f003 fc8f 	bl	80076a0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	695a      	ldr	r2, [r3, #20]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003d90:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4618      	mov	r0, r3
 8003d98:	f003 fbbd 	bl	8007516 <USB_ReadInterrupts>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003da2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003da6:	d124      	bne.n	8003df2 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4618      	mov	r0, r3
 8003dae:	f003 fc53 	bl	8007658 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4618      	mov	r0, r3
 8003db8:	f002 fcf3 	bl	80067a2 <USB_GetDevSpeed>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681c      	ldr	r4, [r3, #0]
 8003dc8:	f001 f920 	bl	800500c <HAL_RCC_GetHCLKFreq>
 8003dcc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	4620      	mov	r0, r4
 8003dd8:	f002 fa30 	bl	800623c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	f005 fe0e 	bl	80099fe <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	695a      	ldr	r2, [r3, #20]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003df0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4618      	mov	r0, r3
 8003df8:	f003 fb8d 	bl	8007516 <USB_ReadInterrupts>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	f003 0308 	and.w	r3, r3, #8
 8003e02:	2b08      	cmp	r3, #8
 8003e04:	d10a      	bne.n	8003e1c <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f005 fdeb 	bl	80099e2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	695a      	ldr	r2, [r3, #20]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f002 0208 	and.w	r2, r2, #8
 8003e1a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4618      	mov	r0, r3
 8003e22:	f003 fb78 	bl	8007516 <USB_ReadInterrupts>
 8003e26:	4603      	mov	r3, r0
 8003e28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e30:	d10f      	bne.n	8003e52 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003e32:	2300      	movs	r3, #0
 8003e34:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	4619      	mov	r1, r3
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f005 fe43 	bl	8009ac8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	695a      	ldr	r2, [r3, #20]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003e50:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4618      	mov	r0, r3
 8003e58:	f003 fb5d 	bl	8007516 <USB_ReadInterrupts>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e62:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e66:	d10f      	bne.n	8003e88 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	4619      	mov	r1, r3
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f005 fe16 	bl	8009aa4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	695a      	ldr	r2, [r3, #20]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003e86:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f003 fb42 	bl	8007516 <USB_ReadInterrupts>
 8003e92:	4603      	mov	r3, r0
 8003e94:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003e98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e9c:	d10a      	bne.n	8003eb4 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f005 fe24 	bl	8009aec <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	695a      	ldr	r2, [r3, #20]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003eb2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f003 fb2c 	bl	8007516 <USB_ReadInterrupts>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	f003 0304 	and.w	r3, r3, #4
 8003ec4:	2b04      	cmp	r3, #4
 8003ec6:	d115      	bne.n	8003ef4 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003ed0:	69bb      	ldr	r3, [r7, #24]
 8003ed2:	f003 0304 	and.w	r3, r3, #4
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d002      	beq.n	8003ee0 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f005 fe14 	bl	8009b08 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	6859      	ldr	r1, [r3, #4]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	69ba      	ldr	r2, [r7, #24]
 8003eec:	430a      	orrs	r2, r1
 8003eee:	605a      	str	r2, [r3, #4]
 8003ef0:	e000      	b.n	8003ef4 <HAL_PCD_IRQHandler+0x75e>
      return;
 8003ef2:	bf00      	nop
    }
  }
}
 8003ef4:	3734      	adds	r7, #52	; 0x34
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd90      	pop	{r4, r7, pc}

08003efa <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003efa:	b580      	push	{r7, lr}
 8003efc:	b082      	sub	sp, #8
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	6078      	str	r0, [r7, #4]
 8003f02:	460b      	mov	r3, r1
 8003f04:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d101      	bne.n	8003f14 <HAL_PCD_SetAddress+0x1a>
 8003f10:	2302      	movs	r3, #2
 8003f12:	e013      	b.n	8003f3c <HAL_PCD_SetAddress+0x42>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2201      	movs	r2, #1
 8003f18:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	78fa      	ldrb	r2, [r7, #3]
 8003f20:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	78fa      	ldrb	r2, [r7, #3]
 8003f2a:	4611      	mov	r1, r2
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f003 fa8a 	bl	8007446 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003f3a:	2300      	movs	r3, #0
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3708      	adds	r7, #8
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}

08003f44 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b084      	sub	sp, #16
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
 8003f4c:	4608      	mov	r0, r1
 8003f4e:	4611      	mov	r1, r2
 8003f50:	461a      	mov	r2, r3
 8003f52:	4603      	mov	r3, r0
 8003f54:	70fb      	strb	r3, [r7, #3]
 8003f56:	460b      	mov	r3, r1
 8003f58:	803b      	strh	r3, [r7, #0]
 8003f5a:	4613      	mov	r3, r2
 8003f5c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003f62:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	da0f      	bge.n	8003f8a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f6a:	78fb      	ldrb	r3, [r7, #3]
 8003f6c:	f003 020f 	and.w	r2, r3, #15
 8003f70:	4613      	mov	r3, r2
 8003f72:	00db      	lsls	r3, r3, #3
 8003f74:	1a9b      	subs	r3, r3, r2
 8003f76:	009b      	lsls	r3, r3, #2
 8003f78:	3338      	adds	r3, #56	; 0x38
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	4413      	add	r3, r2
 8003f7e:	3304      	adds	r3, #4
 8003f80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2201      	movs	r2, #1
 8003f86:	705a      	strb	r2, [r3, #1]
 8003f88:	e00f      	b.n	8003faa <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f8a:	78fb      	ldrb	r3, [r7, #3]
 8003f8c:	f003 020f 	and.w	r2, r3, #15
 8003f90:	4613      	mov	r3, r2
 8003f92:	00db      	lsls	r3, r3, #3
 8003f94:	1a9b      	subs	r3, r3, r2
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003f9c:	687a      	ldr	r2, [r7, #4]
 8003f9e:	4413      	add	r3, r2
 8003fa0:	3304      	adds	r3, #4
 8003fa2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003faa:	78fb      	ldrb	r3, [r7, #3]
 8003fac:	f003 030f 	and.w	r3, r3, #15
 8003fb0:	b2da      	uxtb	r2, r3
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003fb6:	883a      	ldrh	r2, [r7, #0]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	78ba      	ldrb	r2, [r7, #2]
 8003fc0:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	785b      	ldrb	r3, [r3, #1]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d004      	beq.n	8003fd4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	781b      	ldrb	r3, [r3, #0]
 8003fce:	b29a      	uxth	r2, r3
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003fd4:	78bb      	ldrb	r3, [r7, #2]
 8003fd6:	2b02      	cmp	r3, #2
 8003fd8:	d102      	bne.n	8003fe0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d101      	bne.n	8003fee <HAL_PCD_EP_Open+0xaa>
 8003fea:	2302      	movs	r3, #2
 8003fec:	e00e      	b.n	800400c <HAL_PCD_EP_Open+0xc8>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	68f9      	ldr	r1, [r7, #12]
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f002 fbf5 	bl	80067ec <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2200      	movs	r2, #0
 8004006:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800400a:	7afb      	ldrb	r3, [r7, #11]
}
 800400c:	4618      	mov	r0, r3
 800400e:	3710      	adds	r7, #16
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}

08004014 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b084      	sub	sp, #16
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
 800401c:	460b      	mov	r3, r1
 800401e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004020:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004024:	2b00      	cmp	r3, #0
 8004026:	da0f      	bge.n	8004048 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004028:	78fb      	ldrb	r3, [r7, #3]
 800402a:	f003 020f 	and.w	r2, r3, #15
 800402e:	4613      	mov	r3, r2
 8004030:	00db      	lsls	r3, r3, #3
 8004032:	1a9b      	subs	r3, r3, r2
 8004034:	009b      	lsls	r3, r3, #2
 8004036:	3338      	adds	r3, #56	; 0x38
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	4413      	add	r3, r2
 800403c:	3304      	adds	r3, #4
 800403e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2201      	movs	r2, #1
 8004044:	705a      	strb	r2, [r3, #1]
 8004046:	e00f      	b.n	8004068 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004048:	78fb      	ldrb	r3, [r7, #3]
 800404a:	f003 020f 	and.w	r2, r3, #15
 800404e:	4613      	mov	r3, r2
 8004050:	00db      	lsls	r3, r3, #3
 8004052:	1a9b      	subs	r3, r3, r2
 8004054:	009b      	lsls	r3, r3, #2
 8004056:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	4413      	add	r3, r2
 800405e:	3304      	adds	r3, #4
 8004060:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2200      	movs	r2, #0
 8004066:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004068:	78fb      	ldrb	r3, [r7, #3]
 800406a:	f003 030f 	and.w	r3, r3, #15
 800406e:	b2da      	uxtb	r2, r3
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800407a:	2b01      	cmp	r3, #1
 800407c:	d101      	bne.n	8004082 <HAL_PCD_EP_Close+0x6e>
 800407e:	2302      	movs	r3, #2
 8004080:	e00e      	b.n	80040a0 <HAL_PCD_EP_Close+0x8c>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2201      	movs	r2, #1
 8004086:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	68f9      	ldr	r1, [r7, #12]
 8004090:	4618      	mov	r0, r3
 8004092:	f002 fc33 	bl	80068fc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2200      	movs	r2, #0
 800409a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800409e:	2300      	movs	r3, #0
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3710      	adds	r7, #16
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}

080040a8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b086      	sub	sp, #24
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	60f8      	str	r0, [r7, #12]
 80040b0:	607a      	str	r2, [r7, #4]
 80040b2:	603b      	str	r3, [r7, #0]
 80040b4:	460b      	mov	r3, r1
 80040b6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80040b8:	7afb      	ldrb	r3, [r7, #11]
 80040ba:	f003 020f 	and.w	r2, r3, #15
 80040be:	4613      	mov	r3, r2
 80040c0:	00db      	lsls	r3, r3, #3
 80040c2:	1a9b      	subs	r3, r3, r2
 80040c4:	009b      	lsls	r3, r3, #2
 80040c6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80040ca:	68fa      	ldr	r2, [r7, #12]
 80040cc:	4413      	add	r3, r2
 80040ce:	3304      	adds	r3, #4
 80040d0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	683a      	ldr	r2, [r7, #0]
 80040dc:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	2200      	movs	r2, #0
 80040e2:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	2200      	movs	r2, #0
 80040e8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80040ea:	7afb      	ldrb	r3, [r7, #11]
 80040ec:	f003 030f 	and.w	r3, r3, #15
 80040f0:	b2da      	uxtb	r2, r3
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	691b      	ldr	r3, [r3, #16]
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d102      	bne.n	8004104 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80040fe:	687a      	ldr	r2, [r7, #4]
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004104:	7afb      	ldrb	r3, [r7, #11]
 8004106:	f003 030f 	and.w	r3, r3, #15
 800410a:	2b00      	cmp	r3, #0
 800410c:	d109      	bne.n	8004122 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	6818      	ldr	r0, [r3, #0]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	691b      	ldr	r3, [r3, #16]
 8004116:	b2db      	uxtb	r3, r3
 8004118:	461a      	mov	r2, r3
 800411a:	6979      	ldr	r1, [r7, #20]
 800411c:	f002 ff0e 	bl	8006f3c <USB_EP0StartXfer>
 8004120:	e008      	b.n	8004134 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	6818      	ldr	r0, [r3, #0]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	691b      	ldr	r3, [r3, #16]
 800412a:	b2db      	uxtb	r3, r3
 800412c:	461a      	mov	r2, r3
 800412e:	6979      	ldr	r1, [r7, #20]
 8004130:	f002 fcc0 	bl	8006ab4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004134:	2300      	movs	r3, #0
}
 8004136:	4618      	mov	r0, r3
 8004138:	3718      	adds	r7, #24
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}

0800413e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800413e:	b480      	push	{r7}
 8004140:	b083      	sub	sp, #12
 8004142:	af00      	add	r7, sp, #0
 8004144:	6078      	str	r0, [r7, #4]
 8004146:	460b      	mov	r3, r1
 8004148:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800414a:	78fb      	ldrb	r3, [r7, #3]
 800414c:	f003 020f 	and.w	r2, r3, #15
 8004150:	6879      	ldr	r1, [r7, #4]
 8004152:	4613      	mov	r3, r2
 8004154:	00db      	lsls	r3, r3, #3
 8004156:	1a9b      	subs	r3, r3, r2
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	440b      	add	r3, r1
 800415c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004160:	681b      	ldr	r3, [r3, #0]
}
 8004162:	4618      	mov	r0, r3
 8004164:	370c      	adds	r7, #12
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr

0800416e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800416e:	b580      	push	{r7, lr}
 8004170:	b086      	sub	sp, #24
 8004172:	af00      	add	r7, sp, #0
 8004174:	60f8      	str	r0, [r7, #12]
 8004176:	607a      	str	r2, [r7, #4]
 8004178:	603b      	str	r3, [r7, #0]
 800417a:	460b      	mov	r3, r1
 800417c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800417e:	7afb      	ldrb	r3, [r7, #11]
 8004180:	f003 020f 	and.w	r2, r3, #15
 8004184:	4613      	mov	r3, r2
 8004186:	00db      	lsls	r3, r3, #3
 8004188:	1a9b      	subs	r3, r3, r2
 800418a:	009b      	lsls	r3, r3, #2
 800418c:	3338      	adds	r3, #56	; 0x38
 800418e:	68fa      	ldr	r2, [r7, #12]
 8004190:	4413      	add	r3, r2
 8004192:	3304      	adds	r3, #4
 8004194:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	687a      	ldr	r2, [r7, #4]
 800419a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	683a      	ldr	r2, [r7, #0]
 80041a0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	2200      	movs	r2, #0
 80041a6:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	2201      	movs	r2, #1
 80041ac:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80041ae:	7afb      	ldrb	r3, [r7, #11]
 80041b0:	f003 030f 	and.w	r3, r3, #15
 80041b4:	b2da      	uxtb	r2, r3
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	691b      	ldr	r3, [r3, #16]
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d102      	bne.n	80041c8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80041c8:	7afb      	ldrb	r3, [r7, #11]
 80041ca:	f003 030f 	and.w	r3, r3, #15
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d109      	bne.n	80041e6 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	6818      	ldr	r0, [r3, #0]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	691b      	ldr	r3, [r3, #16]
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	461a      	mov	r2, r3
 80041de:	6979      	ldr	r1, [r7, #20]
 80041e0:	f002 feac 	bl	8006f3c <USB_EP0StartXfer>
 80041e4:	e008      	b.n	80041f8 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	6818      	ldr	r0, [r3, #0]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	461a      	mov	r2, r3
 80041f2:	6979      	ldr	r1, [r7, #20]
 80041f4:	f002 fc5e 	bl	8006ab4 <USB_EPStartXfer>
  }

  return HAL_OK;
 80041f8:	2300      	movs	r3, #0
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3718      	adds	r7, #24
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}

08004202 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004202:	b580      	push	{r7, lr}
 8004204:	b084      	sub	sp, #16
 8004206:	af00      	add	r7, sp, #0
 8004208:	6078      	str	r0, [r7, #4]
 800420a:	460b      	mov	r3, r1
 800420c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800420e:	78fb      	ldrb	r3, [r7, #3]
 8004210:	f003 020f 	and.w	r2, r3, #15
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	429a      	cmp	r2, r3
 800421a:	d901      	bls.n	8004220 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	e050      	b.n	80042c2 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004220:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004224:	2b00      	cmp	r3, #0
 8004226:	da0f      	bge.n	8004248 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004228:	78fb      	ldrb	r3, [r7, #3]
 800422a:	f003 020f 	and.w	r2, r3, #15
 800422e:	4613      	mov	r3, r2
 8004230:	00db      	lsls	r3, r3, #3
 8004232:	1a9b      	subs	r3, r3, r2
 8004234:	009b      	lsls	r3, r3, #2
 8004236:	3338      	adds	r3, #56	; 0x38
 8004238:	687a      	ldr	r2, [r7, #4]
 800423a:	4413      	add	r3, r2
 800423c:	3304      	adds	r3, #4
 800423e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2201      	movs	r2, #1
 8004244:	705a      	strb	r2, [r3, #1]
 8004246:	e00d      	b.n	8004264 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004248:	78fa      	ldrb	r2, [r7, #3]
 800424a:	4613      	mov	r3, r2
 800424c:	00db      	lsls	r3, r3, #3
 800424e:	1a9b      	subs	r3, r3, r2
 8004250:	009b      	lsls	r3, r3, #2
 8004252:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	4413      	add	r3, r2
 800425a:	3304      	adds	r3, #4
 800425c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2200      	movs	r2, #0
 8004262:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2201      	movs	r2, #1
 8004268:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800426a:	78fb      	ldrb	r3, [r7, #3]
 800426c:	f003 030f 	and.w	r3, r3, #15
 8004270:	b2da      	uxtb	r2, r3
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800427c:	2b01      	cmp	r3, #1
 800427e:	d101      	bne.n	8004284 <HAL_PCD_EP_SetStall+0x82>
 8004280:	2302      	movs	r3, #2
 8004282:	e01e      	b.n	80042c2 <HAL_PCD_EP_SetStall+0xc0>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2201      	movs	r2, #1
 8004288:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	68f9      	ldr	r1, [r7, #12]
 8004292:	4618      	mov	r0, r3
 8004294:	f003 f803 	bl	800729e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004298:	78fb      	ldrb	r3, [r7, #3]
 800429a:	f003 030f 	and.w	r3, r3, #15
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d10a      	bne.n	80042b8 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6818      	ldr	r0, [r3, #0]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	691b      	ldr	r3, [r3, #16]
 80042aa:	b2d9      	uxtb	r1, r3
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80042b2:	461a      	mov	r2, r3
 80042b4:	f003 f9f4 	bl	80076a0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2200      	movs	r2, #0
 80042bc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80042c0:	2300      	movs	r3, #0
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3710      	adds	r7, #16
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}

080042ca <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80042ca:	b580      	push	{r7, lr}
 80042cc:	b084      	sub	sp, #16
 80042ce:	af00      	add	r7, sp, #0
 80042d0:	6078      	str	r0, [r7, #4]
 80042d2:	460b      	mov	r3, r1
 80042d4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80042d6:	78fb      	ldrb	r3, [r7, #3]
 80042d8:	f003 020f 	and.w	r2, r3, #15
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d901      	bls.n	80042e8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	e042      	b.n	800436e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80042e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	da0f      	bge.n	8004310 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80042f0:	78fb      	ldrb	r3, [r7, #3]
 80042f2:	f003 020f 	and.w	r2, r3, #15
 80042f6:	4613      	mov	r3, r2
 80042f8:	00db      	lsls	r3, r3, #3
 80042fa:	1a9b      	subs	r3, r3, r2
 80042fc:	009b      	lsls	r3, r3, #2
 80042fe:	3338      	adds	r3, #56	; 0x38
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	4413      	add	r3, r2
 8004304:	3304      	adds	r3, #4
 8004306:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2201      	movs	r2, #1
 800430c:	705a      	strb	r2, [r3, #1]
 800430e:	e00f      	b.n	8004330 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004310:	78fb      	ldrb	r3, [r7, #3]
 8004312:	f003 020f 	and.w	r2, r3, #15
 8004316:	4613      	mov	r3, r2
 8004318:	00db      	lsls	r3, r3, #3
 800431a:	1a9b      	subs	r3, r3, r2
 800431c:	009b      	lsls	r3, r3, #2
 800431e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004322:	687a      	ldr	r2, [r7, #4]
 8004324:	4413      	add	r3, r2
 8004326:	3304      	adds	r3, #4
 8004328:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2200      	movs	r2, #0
 800432e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2200      	movs	r2, #0
 8004334:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004336:	78fb      	ldrb	r3, [r7, #3]
 8004338:	f003 030f 	and.w	r3, r3, #15
 800433c:	b2da      	uxtb	r2, r3
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004348:	2b01      	cmp	r3, #1
 800434a:	d101      	bne.n	8004350 <HAL_PCD_EP_ClrStall+0x86>
 800434c:	2302      	movs	r3, #2
 800434e:	e00e      	b.n	800436e <HAL_PCD_EP_ClrStall+0xa4>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2201      	movs	r2, #1
 8004354:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	68f9      	ldr	r1, [r7, #12]
 800435e:	4618      	mov	r0, r3
 8004360:	f003 f80b 	bl	800737a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2200      	movs	r2, #0
 8004368:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800436c:	2300      	movs	r3, #0
}
 800436e:	4618      	mov	r0, r3
 8004370:	3710      	adds	r7, #16
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}

08004376 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004376:	b580      	push	{r7, lr}
 8004378:	b08a      	sub	sp, #40	; 0x28
 800437a:	af02      	add	r7, sp, #8
 800437c:	6078      	str	r0, [r7, #4]
 800437e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800438a:	683a      	ldr	r2, [r7, #0]
 800438c:	4613      	mov	r3, r2
 800438e:	00db      	lsls	r3, r3, #3
 8004390:	1a9b      	subs	r3, r3, r2
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	3338      	adds	r3, #56	; 0x38
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	4413      	add	r3, r2
 800439a:	3304      	adds	r3, #4
 800439c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	699a      	ldr	r2, [r3, #24]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	695b      	ldr	r3, [r3, #20]
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d901      	bls.n	80043ae <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e06c      	b.n	8004488 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	695a      	ldr	r2, [r3, #20]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	699b      	ldr	r3, [r3, #24]
 80043b6:	1ad3      	subs	r3, r2, r3
 80043b8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	69fa      	ldr	r2, [r7, #28]
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d902      	bls.n	80043ca <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80043ca:	69fb      	ldr	r3, [r7, #28]
 80043cc:	3303      	adds	r3, #3
 80043ce:	089b      	lsrs	r3, r3, #2
 80043d0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80043d2:	e02b      	b.n	800442c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	695a      	ldr	r2, [r3, #20]
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	699b      	ldr	r3, [r3, #24]
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	69fa      	ldr	r2, [r7, #28]
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d902      	bls.n	80043f0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80043f0:	69fb      	ldr	r3, [r7, #28]
 80043f2:	3303      	adds	r3, #3
 80043f4:	089b      	lsrs	r3, r3, #2
 80043f6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	68d9      	ldr	r1, [r3, #12]
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	b2da      	uxtb	r2, r3
 8004400:	69fb      	ldr	r3, [r7, #28]
 8004402:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004408:	b2db      	uxtb	r3, r3
 800440a:	9300      	str	r3, [sp, #0]
 800440c:	4603      	mov	r3, r0
 800440e:	6978      	ldr	r0, [r7, #20]
 8004410:	f002 fee7 	bl	80071e2 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	68da      	ldr	r2, [r3, #12]
 8004418:	69fb      	ldr	r3, [r7, #28]
 800441a:	441a      	add	r2, r3
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	699a      	ldr	r2, [r3, #24]
 8004424:	69fb      	ldr	r3, [r7, #28]
 8004426:	441a      	add	r2, r3
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	015a      	lsls	r2, r3, #5
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	4413      	add	r3, r2
 8004434:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004438:	699b      	ldr	r3, [r3, #24]
 800443a:	b29b      	uxth	r3, r3
 800443c:	69ba      	ldr	r2, [r7, #24]
 800443e:	429a      	cmp	r2, r3
 8004440:	d809      	bhi.n	8004456 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	699a      	ldr	r2, [r3, #24]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800444a:	429a      	cmp	r2, r3
 800444c:	d203      	bcs.n	8004456 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	695b      	ldr	r3, [r3, #20]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d1be      	bne.n	80043d4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	695a      	ldr	r2, [r3, #20]
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	699b      	ldr	r3, [r3, #24]
 800445e:	429a      	cmp	r2, r3
 8004460:	d811      	bhi.n	8004486 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	f003 030f 	and.w	r3, r3, #15
 8004468:	2201      	movs	r2, #1
 800446a:	fa02 f303 	lsl.w	r3, r2, r3
 800446e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004476:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	43db      	mvns	r3, r3
 800447c:	6939      	ldr	r1, [r7, #16]
 800447e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004482:	4013      	ands	r3, r2
 8004484:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004486:	2300      	movs	r3, #0
}
 8004488:	4618      	mov	r0, r3
 800448a:	3720      	adds	r7, #32
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}

08004490 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b086      	sub	sp, #24
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
 8004498:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	333c      	adds	r3, #60	; 0x3c
 80044a8:	3304      	adds	r3, #4
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	015a      	lsls	r2, r3, #5
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	4413      	add	r3, r2
 80044b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	691b      	ldr	r3, [r3, #16]
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	f040 80a0 	bne.w	8004608 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	f003 0308 	and.w	r3, r3, #8
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d015      	beq.n	80044fe <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	4a72      	ldr	r2, [pc, #456]	; (80046a0 <PCD_EP_OutXfrComplete_int+0x210>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	f240 80dd 	bls.w	8004696 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	f000 80d7 	beq.w	8004696 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	015a      	lsls	r2, r3, #5
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	4413      	add	r3, r2
 80044f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044f4:	461a      	mov	r2, r3
 80044f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044fa:	6093      	str	r3, [r2, #8]
 80044fc:	e0cb      	b.n	8004696 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	f003 0320 	and.w	r3, r3, #32
 8004504:	2b00      	cmp	r3, #0
 8004506:	d009      	beq.n	800451c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	015a      	lsls	r2, r3, #5
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	4413      	add	r3, r2
 8004510:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004514:	461a      	mov	r2, r3
 8004516:	2320      	movs	r3, #32
 8004518:	6093      	str	r3, [r2, #8]
 800451a:	e0bc      	b.n	8004696 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004522:	2b00      	cmp	r3, #0
 8004524:	f040 80b7 	bne.w	8004696 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	4a5d      	ldr	r2, [pc, #372]	; (80046a0 <PCD_EP_OutXfrComplete_int+0x210>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d90f      	bls.n	8004550 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004536:	2b00      	cmp	r3, #0
 8004538:	d00a      	beq.n	8004550 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	015a      	lsls	r2, r3, #5
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	4413      	add	r3, r2
 8004542:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004546:	461a      	mov	r2, r3
 8004548:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800454c:	6093      	str	r3, [r2, #8]
 800454e:	e0a2      	b.n	8004696 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8004550:	6879      	ldr	r1, [r7, #4]
 8004552:	683a      	ldr	r2, [r7, #0]
 8004554:	4613      	mov	r3, r2
 8004556:	00db      	lsls	r3, r3, #3
 8004558:	1a9b      	subs	r3, r3, r2
 800455a:	009b      	lsls	r3, r3, #2
 800455c:	440b      	add	r3, r1
 800455e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004562:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	0159      	lsls	r1, r3, #5
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	440b      	add	r3, r1
 800456c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004570:	691b      	ldr	r3, [r3, #16]
 8004572:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8004576:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	683a      	ldr	r2, [r7, #0]
 800457c:	4613      	mov	r3, r2
 800457e:	00db      	lsls	r3, r3, #3
 8004580:	1a9b      	subs	r3, r3, r2
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	4403      	add	r3, r0
 8004586:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800458a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800458c:	6879      	ldr	r1, [r7, #4]
 800458e:	683a      	ldr	r2, [r7, #0]
 8004590:	4613      	mov	r3, r2
 8004592:	00db      	lsls	r3, r3, #3
 8004594:	1a9b      	subs	r3, r3, r2
 8004596:	009b      	lsls	r3, r3, #2
 8004598:	440b      	add	r3, r1
 800459a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800459e:	6819      	ldr	r1, [r3, #0]
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	683a      	ldr	r2, [r7, #0]
 80045a4:	4613      	mov	r3, r2
 80045a6:	00db      	lsls	r3, r3, #3
 80045a8:	1a9b      	subs	r3, r3, r2
 80045aa:	009b      	lsls	r3, r3, #2
 80045ac:	4403      	add	r3, r0
 80045ae:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4419      	add	r1, r3
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	683a      	ldr	r2, [r7, #0]
 80045ba:	4613      	mov	r3, r2
 80045bc:	00db      	lsls	r3, r3, #3
 80045be:	1a9b      	subs	r3, r3, r2
 80045c0:	009b      	lsls	r3, r3, #2
 80045c2:	4403      	add	r3, r0
 80045c4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80045c8:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d114      	bne.n	80045fa <PCD_EP_OutXfrComplete_int+0x16a>
 80045d0:	6879      	ldr	r1, [r7, #4]
 80045d2:	683a      	ldr	r2, [r7, #0]
 80045d4:	4613      	mov	r3, r2
 80045d6:	00db      	lsls	r3, r3, #3
 80045d8:	1a9b      	subs	r3, r3, r2
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	440b      	add	r3, r1
 80045de:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d108      	bne.n	80045fa <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6818      	ldr	r0, [r3, #0]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80045f2:	461a      	mov	r2, r3
 80045f4:	2101      	movs	r1, #1
 80045f6:	f003 f853 	bl	80076a0 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	4619      	mov	r1, r3
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	f005 f9b9 	bl	8009978 <HAL_PCD_DataOutStageCallback>
 8004606:	e046      	b.n	8004696 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	4a26      	ldr	r2, [pc, #152]	; (80046a4 <PCD_EP_OutXfrComplete_int+0x214>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d124      	bne.n	800465a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004616:	2b00      	cmp	r3, #0
 8004618:	d00a      	beq.n	8004630 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	015a      	lsls	r2, r3, #5
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	4413      	add	r3, r2
 8004622:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004626:	461a      	mov	r2, r3
 8004628:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800462c:	6093      	str	r3, [r2, #8]
 800462e:	e032      	b.n	8004696 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	f003 0320 	and.w	r3, r3, #32
 8004636:	2b00      	cmp	r3, #0
 8004638:	d008      	beq.n	800464c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	015a      	lsls	r2, r3, #5
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	4413      	add	r3, r2
 8004642:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004646:	461a      	mov	r2, r3
 8004648:	2320      	movs	r3, #32
 800464a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	b2db      	uxtb	r3, r3
 8004650:	4619      	mov	r1, r3
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f005 f990 	bl	8009978 <HAL_PCD_DataOutStageCallback>
 8004658:	e01d      	b.n	8004696 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d114      	bne.n	800468a <PCD_EP_OutXfrComplete_int+0x1fa>
 8004660:	6879      	ldr	r1, [r7, #4]
 8004662:	683a      	ldr	r2, [r7, #0]
 8004664:	4613      	mov	r3, r2
 8004666:	00db      	lsls	r3, r3, #3
 8004668:	1a9b      	subs	r3, r3, r2
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	440b      	add	r3, r1
 800466e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d108      	bne.n	800468a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6818      	ldr	r0, [r3, #0]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004682:	461a      	mov	r2, r3
 8004684:	2100      	movs	r1, #0
 8004686:	f003 f80b 	bl	80076a0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	b2db      	uxtb	r3, r3
 800468e:	4619      	mov	r1, r3
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f005 f971 	bl	8009978 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004696:	2300      	movs	r3, #0
}
 8004698:	4618      	mov	r0, r3
 800469a:	3718      	adds	r7, #24
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}
 80046a0:	4f54300a 	.word	0x4f54300a
 80046a4:	4f54310a 	.word	0x4f54310a

080046a8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b086      	sub	sp, #24
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	333c      	adds	r3, #60	; 0x3c
 80046c0:	3304      	adds	r3, #4
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	015a      	lsls	r2, r3, #5
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	4413      	add	r3, r2
 80046ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	4a15      	ldr	r2, [pc, #84]	; (8004730 <PCD_EP_OutSetupPacket_int+0x88>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d90e      	bls.n	80046fc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d009      	beq.n	80046fc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	015a      	lsls	r2, r3, #5
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	4413      	add	r3, r2
 80046f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046f4:	461a      	mov	r2, r3
 80046f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046fa:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80046fc:	6878      	ldr	r0, [r7, #4]
 80046fe:	f005 f929 	bl	8009954 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	4a0a      	ldr	r2, [pc, #40]	; (8004730 <PCD_EP_OutSetupPacket_int+0x88>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d90c      	bls.n	8004724 <PCD_EP_OutSetupPacket_int+0x7c>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	691b      	ldr	r3, [r3, #16]
 800470e:	2b01      	cmp	r3, #1
 8004710:	d108      	bne.n	8004724 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6818      	ldr	r0, [r3, #0]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800471c:	461a      	mov	r2, r3
 800471e:	2101      	movs	r1, #1
 8004720:	f002 ffbe 	bl	80076a0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004724:	2300      	movs	r3, #0
}
 8004726:	4618      	mov	r0, r3
 8004728:	3718      	adds	r7, #24
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}
 800472e:	bf00      	nop
 8004730:	4f54300a 	.word	0x4f54300a

08004734 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004734:	b480      	push	{r7}
 8004736:	b085      	sub	sp, #20
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	460b      	mov	r3, r1
 800473e:	70fb      	strb	r3, [r7, #3]
 8004740:	4613      	mov	r3, r2
 8004742:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800474c:	78fb      	ldrb	r3, [r7, #3]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d107      	bne.n	8004762 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004752:	883b      	ldrh	r3, [r7, #0]
 8004754:	0419      	lsls	r1, r3, #16
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	68ba      	ldr	r2, [r7, #8]
 800475c:	430a      	orrs	r2, r1
 800475e:	629a      	str	r2, [r3, #40]	; 0x28
 8004760:	e028      	b.n	80047b4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004768:	0c1b      	lsrs	r3, r3, #16
 800476a:	68ba      	ldr	r2, [r7, #8]
 800476c:	4413      	add	r3, r2
 800476e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004770:	2300      	movs	r3, #0
 8004772:	73fb      	strb	r3, [r7, #15]
 8004774:	e00d      	b.n	8004792 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	7bfb      	ldrb	r3, [r7, #15]
 800477c:	3340      	adds	r3, #64	; 0x40
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	4413      	add	r3, r2
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	0c1b      	lsrs	r3, r3, #16
 8004786:	68ba      	ldr	r2, [r7, #8]
 8004788:	4413      	add	r3, r2
 800478a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800478c:	7bfb      	ldrb	r3, [r7, #15]
 800478e:	3301      	adds	r3, #1
 8004790:	73fb      	strb	r3, [r7, #15]
 8004792:	7bfa      	ldrb	r2, [r7, #15]
 8004794:	78fb      	ldrb	r3, [r7, #3]
 8004796:	3b01      	subs	r3, #1
 8004798:	429a      	cmp	r2, r3
 800479a:	d3ec      	bcc.n	8004776 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800479c:	883b      	ldrh	r3, [r7, #0]
 800479e:	0418      	lsls	r0, r3, #16
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6819      	ldr	r1, [r3, #0]
 80047a4:	78fb      	ldrb	r3, [r7, #3]
 80047a6:	3b01      	subs	r3, #1
 80047a8:	68ba      	ldr	r2, [r7, #8]
 80047aa:	4302      	orrs	r2, r0
 80047ac:	3340      	adds	r3, #64	; 0x40
 80047ae:	009b      	lsls	r3, r3, #2
 80047b0:	440b      	add	r3, r1
 80047b2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80047b4:	2300      	movs	r3, #0
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3714      	adds	r7, #20
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr

080047c2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80047c2:	b480      	push	{r7}
 80047c4:	b083      	sub	sp, #12
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	6078      	str	r0, [r7, #4]
 80047ca:	460b      	mov	r3, r1
 80047cc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	887a      	ldrh	r2, [r7, #2]
 80047d4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80047d6:	2300      	movs	r3, #0
}
 80047d8:	4618      	mov	r0, r3
 80047da:	370c      	adds	r7, #12
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr

080047e4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b083      	sub	sp, #12
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	460b      	mov	r3, r1
 80047ee:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80047f0:	bf00      	nop
 80047f2:	370c      	adds	r7, #12
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr

080047fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b086      	sub	sp, #24
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d101      	bne.n	800480e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e25b      	b.n	8004cc6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f003 0301 	and.w	r3, r3, #1
 8004816:	2b00      	cmp	r3, #0
 8004818:	d075      	beq.n	8004906 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800481a:	4ba3      	ldr	r3, [pc, #652]	; (8004aa8 <HAL_RCC_OscConfig+0x2ac>)
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	f003 030c 	and.w	r3, r3, #12
 8004822:	2b04      	cmp	r3, #4
 8004824:	d00c      	beq.n	8004840 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004826:	4ba0      	ldr	r3, [pc, #640]	; (8004aa8 <HAL_RCC_OscConfig+0x2ac>)
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800482e:	2b08      	cmp	r3, #8
 8004830:	d112      	bne.n	8004858 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004832:	4b9d      	ldr	r3, [pc, #628]	; (8004aa8 <HAL_RCC_OscConfig+0x2ac>)
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800483a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800483e:	d10b      	bne.n	8004858 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004840:	4b99      	ldr	r3, [pc, #612]	; (8004aa8 <HAL_RCC_OscConfig+0x2ac>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004848:	2b00      	cmp	r3, #0
 800484a:	d05b      	beq.n	8004904 <HAL_RCC_OscConfig+0x108>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d157      	bne.n	8004904 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	e236      	b.n	8004cc6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004860:	d106      	bne.n	8004870 <HAL_RCC_OscConfig+0x74>
 8004862:	4b91      	ldr	r3, [pc, #580]	; (8004aa8 <HAL_RCC_OscConfig+0x2ac>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a90      	ldr	r2, [pc, #576]	; (8004aa8 <HAL_RCC_OscConfig+0x2ac>)
 8004868:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800486c:	6013      	str	r3, [r2, #0]
 800486e:	e01d      	b.n	80048ac <HAL_RCC_OscConfig+0xb0>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004878:	d10c      	bne.n	8004894 <HAL_RCC_OscConfig+0x98>
 800487a:	4b8b      	ldr	r3, [pc, #556]	; (8004aa8 <HAL_RCC_OscConfig+0x2ac>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a8a      	ldr	r2, [pc, #552]	; (8004aa8 <HAL_RCC_OscConfig+0x2ac>)
 8004880:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004884:	6013      	str	r3, [r2, #0]
 8004886:	4b88      	ldr	r3, [pc, #544]	; (8004aa8 <HAL_RCC_OscConfig+0x2ac>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a87      	ldr	r2, [pc, #540]	; (8004aa8 <HAL_RCC_OscConfig+0x2ac>)
 800488c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004890:	6013      	str	r3, [r2, #0]
 8004892:	e00b      	b.n	80048ac <HAL_RCC_OscConfig+0xb0>
 8004894:	4b84      	ldr	r3, [pc, #528]	; (8004aa8 <HAL_RCC_OscConfig+0x2ac>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a83      	ldr	r2, [pc, #524]	; (8004aa8 <HAL_RCC_OscConfig+0x2ac>)
 800489a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800489e:	6013      	str	r3, [r2, #0]
 80048a0:	4b81      	ldr	r3, [pc, #516]	; (8004aa8 <HAL_RCC_OscConfig+0x2ac>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a80      	ldr	r2, [pc, #512]	; (8004aa8 <HAL_RCC_OscConfig+0x2ac>)
 80048a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d013      	beq.n	80048dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048b4:	f7fd fda6 	bl	8002404 <HAL_GetTick>
 80048b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048ba:	e008      	b.n	80048ce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048bc:	f7fd fda2 	bl	8002404 <HAL_GetTick>
 80048c0:	4602      	mov	r2, r0
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	1ad3      	subs	r3, r2, r3
 80048c6:	2b64      	cmp	r3, #100	; 0x64
 80048c8:	d901      	bls.n	80048ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80048ca:	2303      	movs	r3, #3
 80048cc:	e1fb      	b.n	8004cc6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048ce:	4b76      	ldr	r3, [pc, #472]	; (8004aa8 <HAL_RCC_OscConfig+0x2ac>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d0f0      	beq.n	80048bc <HAL_RCC_OscConfig+0xc0>
 80048da:	e014      	b.n	8004906 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048dc:	f7fd fd92 	bl	8002404 <HAL_GetTick>
 80048e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048e2:	e008      	b.n	80048f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048e4:	f7fd fd8e 	bl	8002404 <HAL_GetTick>
 80048e8:	4602      	mov	r2, r0
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	1ad3      	subs	r3, r2, r3
 80048ee:	2b64      	cmp	r3, #100	; 0x64
 80048f0:	d901      	bls.n	80048f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80048f2:	2303      	movs	r3, #3
 80048f4:	e1e7      	b.n	8004cc6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048f6:	4b6c      	ldr	r3, [pc, #432]	; (8004aa8 <HAL_RCC_OscConfig+0x2ac>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d1f0      	bne.n	80048e4 <HAL_RCC_OscConfig+0xe8>
 8004902:	e000      	b.n	8004906 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004904:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 0302 	and.w	r3, r3, #2
 800490e:	2b00      	cmp	r3, #0
 8004910:	d063      	beq.n	80049da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004912:	4b65      	ldr	r3, [pc, #404]	; (8004aa8 <HAL_RCC_OscConfig+0x2ac>)
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	f003 030c 	and.w	r3, r3, #12
 800491a:	2b00      	cmp	r3, #0
 800491c:	d00b      	beq.n	8004936 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800491e:	4b62      	ldr	r3, [pc, #392]	; (8004aa8 <HAL_RCC_OscConfig+0x2ac>)
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004926:	2b08      	cmp	r3, #8
 8004928:	d11c      	bne.n	8004964 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800492a:	4b5f      	ldr	r3, [pc, #380]	; (8004aa8 <HAL_RCC_OscConfig+0x2ac>)
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004932:	2b00      	cmp	r3, #0
 8004934:	d116      	bne.n	8004964 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004936:	4b5c      	ldr	r3, [pc, #368]	; (8004aa8 <HAL_RCC_OscConfig+0x2ac>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 0302 	and.w	r3, r3, #2
 800493e:	2b00      	cmp	r3, #0
 8004940:	d005      	beq.n	800494e <HAL_RCC_OscConfig+0x152>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	68db      	ldr	r3, [r3, #12]
 8004946:	2b01      	cmp	r3, #1
 8004948:	d001      	beq.n	800494e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	e1bb      	b.n	8004cc6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800494e:	4b56      	ldr	r3, [pc, #344]	; (8004aa8 <HAL_RCC_OscConfig+0x2ac>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	691b      	ldr	r3, [r3, #16]
 800495a:	00db      	lsls	r3, r3, #3
 800495c:	4952      	ldr	r1, [pc, #328]	; (8004aa8 <HAL_RCC_OscConfig+0x2ac>)
 800495e:	4313      	orrs	r3, r2
 8004960:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004962:	e03a      	b.n	80049da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d020      	beq.n	80049ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800496c:	4b4f      	ldr	r3, [pc, #316]	; (8004aac <HAL_RCC_OscConfig+0x2b0>)
 800496e:	2201      	movs	r2, #1
 8004970:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004972:	f7fd fd47 	bl	8002404 <HAL_GetTick>
 8004976:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004978:	e008      	b.n	800498c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800497a:	f7fd fd43 	bl	8002404 <HAL_GetTick>
 800497e:	4602      	mov	r2, r0
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	1ad3      	subs	r3, r2, r3
 8004984:	2b02      	cmp	r3, #2
 8004986:	d901      	bls.n	800498c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004988:	2303      	movs	r3, #3
 800498a:	e19c      	b.n	8004cc6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800498c:	4b46      	ldr	r3, [pc, #280]	; (8004aa8 <HAL_RCC_OscConfig+0x2ac>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 0302 	and.w	r3, r3, #2
 8004994:	2b00      	cmp	r3, #0
 8004996:	d0f0      	beq.n	800497a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004998:	4b43      	ldr	r3, [pc, #268]	; (8004aa8 <HAL_RCC_OscConfig+0x2ac>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	691b      	ldr	r3, [r3, #16]
 80049a4:	00db      	lsls	r3, r3, #3
 80049a6:	4940      	ldr	r1, [pc, #256]	; (8004aa8 <HAL_RCC_OscConfig+0x2ac>)
 80049a8:	4313      	orrs	r3, r2
 80049aa:	600b      	str	r3, [r1, #0]
 80049ac:	e015      	b.n	80049da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049ae:	4b3f      	ldr	r3, [pc, #252]	; (8004aac <HAL_RCC_OscConfig+0x2b0>)
 80049b0:	2200      	movs	r2, #0
 80049b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049b4:	f7fd fd26 	bl	8002404 <HAL_GetTick>
 80049b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049ba:	e008      	b.n	80049ce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049bc:	f7fd fd22 	bl	8002404 <HAL_GetTick>
 80049c0:	4602      	mov	r2, r0
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	1ad3      	subs	r3, r2, r3
 80049c6:	2b02      	cmp	r3, #2
 80049c8:	d901      	bls.n	80049ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80049ca:	2303      	movs	r3, #3
 80049cc:	e17b      	b.n	8004cc6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049ce:	4b36      	ldr	r3, [pc, #216]	; (8004aa8 <HAL_RCC_OscConfig+0x2ac>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 0302 	and.w	r3, r3, #2
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d1f0      	bne.n	80049bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 0308 	and.w	r3, r3, #8
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d030      	beq.n	8004a48 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	695b      	ldr	r3, [r3, #20]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d016      	beq.n	8004a1c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049ee:	4b30      	ldr	r3, [pc, #192]	; (8004ab0 <HAL_RCC_OscConfig+0x2b4>)
 80049f0:	2201      	movs	r2, #1
 80049f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049f4:	f7fd fd06 	bl	8002404 <HAL_GetTick>
 80049f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049fa:	e008      	b.n	8004a0e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049fc:	f7fd fd02 	bl	8002404 <HAL_GetTick>
 8004a00:	4602      	mov	r2, r0
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	1ad3      	subs	r3, r2, r3
 8004a06:	2b02      	cmp	r3, #2
 8004a08:	d901      	bls.n	8004a0e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004a0a:	2303      	movs	r3, #3
 8004a0c:	e15b      	b.n	8004cc6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a0e:	4b26      	ldr	r3, [pc, #152]	; (8004aa8 <HAL_RCC_OscConfig+0x2ac>)
 8004a10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a12:	f003 0302 	and.w	r3, r3, #2
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d0f0      	beq.n	80049fc <HAL_RCC_OscConfig+0x200>
 8004a1a:	e015      	b.n	8004a48 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a1c:	4b24      	ldr	r3, [pc, #144]	; (8004ab0 <HAL_RCC_OscConfig+0x2b4>)
 8004a1e:	2200      	movs	r2, #0
 8004a20:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a22:	f7fd fcef 	bl	8002404 <HAL_GetTick>
 8004a26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a28:	e008      	b.n	8004a3c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a2a:	f7fd fceb 	bl	8002404 <HAL_GetTick>
 8004a2e:	4602      	mov	r2, r0
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	1ad3      	subs	r3, r2, r3
 8004a34:	2b02      	cmp	r3, #2
 8004a36:	d901      	bls.n	8004a3c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004a38:	2303      	movs	r3, #3
 8004a3a:	e144      	b.n	8004cc6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a3c:	4b1a      	ldr	r3, [pc, #104]	; (8004aa8 <HAL_RCC_OscConfig+0x2ac>)
 8004a3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a40:	f003 0302 	and.w	r3, r3, #2
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d1f0      	bne.n	8004a2a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f003 0304 	and.w	r3, r3, #4
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	f000 80a0 	beq.w	8004b96 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a56:	2300      	movs	r3, #0
 8004a58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a5a:	4b13      	ldr	r3, [pc, #76]	; (8004aa8 <HAL_RCC_OscConfig+0x2ac>)
 8004a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d10f      	bne.n	8004a86 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a66:	2300      	movs	r3, #0
 8004a68:	60bb      	str	r3, [r7, #8]
 8004a6a:	4b0f      	ldr	r3, [pc, #60]	; (8004aa8 <HAL_RCC_OscConfig+0x2ac>)
 8004a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a6e:	4a0e      	ldr	r2, [pc, #56]	; (8004aa8 <HAL_RCC_OscConfig+0x2ac>)
 8004a70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a74:	6413      	str	r3, [r2, #64]	; 0x40
 8004a76:	4b0c      	ldr	r3, [pc, #48]	; (8004aa8 <HAL_RCC_OscConfig+0x2ac>)
 8004a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a7e:	60bb      	str	r3, [r7, #8]
 8004a80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a82:	2301      	movs	r3, #1
 8004a84:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a86:	4b0b      	ldr	r3, [pc, #44]	; (8004ab4 <HAL_RCC_OscConfig+0x2b8>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d121      	bne.n	8004ad6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a92:	4b08      	ldr	r3, [pc, #32]	; (8004ab4 <HAL_RCC_OscConfig+0x2b8>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a07      	ldr	r2, [pc, #28]	; (8004ab4 <HAL_RCC_OscConfig+0x2b8>)
 8004a98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a9e:	f7fd fcb1 	bl	8002404 <HAL_GetTick>
 8004aa2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004aa4:	e011      	b.n	8004aca <HAL_RCC_OscConfig+0x2ce>
 8004aa6:	bf00      	nop
 8004aa8:	40023800 	.word	0x40023800
 8004aac:	42470000 	.word	0x42470000
 8004ab0:	42470e80 	.word	0x42470e80
 8004ab4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ab8:	f7fd fca4 	bl	8002404 <HAL_GetTick>
 8004abc:	4602      	mov	r2, r0
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	1ad3      	subs	r3, r2, r3
 8004ac2:	2b02      	cmp	r3, #2
 8004ac4:	d901      	bls.n	8004aca <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004ac6:	2303      	movs	r3, #3
 8004ac8:	e0fd      	b.n	8004cc6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004aca:	4b81      	ldr	r3, [pc, #516]	; (8004cd0 <HAL_RCC_OscConfig+0x4d4>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d0f0      	beq.n	8004ab8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d106      	bne.n	8004aec <HAL_RCC_OscConfig+0x2f0>
 8004ade:	4b7d      	ldr	r3, [pc, #500]	; (8004cd4 <HAL_RCC_OscConfig+0x4d8>)
 8004ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ae2:	4a7c      	ldr	r2, [pc, #496]	; (8004cd4 <HAL_RCC_OscConfig+0x4d8>)
 8004ae4:	f043 0301 	orr.w	r3, r3, #1
 8004ae8:	6713      	str	r3, [r2, #112]	; 0x70
 8004aea:	e01c      	b.n	8004b26 <HAL_RCC_OscConfig+0x32a>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	2b05      	cmp	r3, #5
 8004af2:	d10c      	bne.n	8004b0e <HAL_RCC_OscConfig+0x312>
 8004af4:	4b77      	ldr	r3, [pc, #476]	; (8004cd4 <HAL_RCC_OscConfig+0x4d8>)
 8004af6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004af8:	4a76      	ldr	r2, [pc, #472]	; (8004cd4 <HAL_RCC_OscConfig+0x4d8>)
 8004afa:	f043 0304 	orr.w	r3, r3, #4
 8004afe:	6713      	str	r3, [r2, #112]	; 0x70
 8004b00:	4b74      	ldr	r3, [pc, #464]	; (8004cd4 <HAL_RCC_OscConfig+0x4d8>)
 8004b02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b04:	4a73      	ldr	r2, [pc, #460]	; (8004cd4 <HAL_RCC_OscConfig+0x4d8>)
 8004b06:	f043 0301 	orr.w	r3, r3, #1
 8004b0a:	6713      	str	r3, [r2, #112]	; 0x70
 8004b0c:	e00b      	b.n	8004b26 <HAL_RCC_OscConfig+0x32a>
 8004b0e:	4b71      	ldr	r3, [pc, #452]	; (8004cd4 <HAL_RCC_OscConfig+0x4d8>)
 8004b10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b12:	4a70      	ldr	r2, [pc, #448]	; (8004cd4 <HAL_RCC_OscConfig+0x4d8>)
 8004b14:	f023 0301 	bic.w	r3, r3, #1
 8004b18:	6713      	str	r3, [r2, #112]	; 0x70
 8004b1a:	4b6e      	ldr	r3, [pc, #440]	; (8004cd4 <HAL_RCC_OscConfig+0x4d8>)
 8004b1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b1e:	4a6d      	ldr	r2, [pc, #436]	; (8004cd4 <HAL_RCC_OscConfig+0x4d8>)
 8004b20:	f023 0304 	bic.w	r3, r3, #4
 8004b24:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d015      	beq.n	8004b5a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b2e:	f7fd fc69 	bl	8002404 <HAL_GetTick>
 8004b32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b34:	e00a      	b.n	8004b4c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b36:	f7fd fc65 	bl	8002404 <HAL_GetTick>
 8004b3a:	4602      	mov	r2, r0
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	1ad3      	subs	r3, r2, r3
 8004b40:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d901      	bls.n	8004b4c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004b48:	2303      	movs	r3, #3
 8004b4a:	e0bc      	b.n	8004cc6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b4c:	4b61      	ldr	r3, [pc, #388]	; (8004cd4 <HAL_RCC_OscConfig+0x4d8>)
 8004b4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b50:	f003 0302 	and.w	r3, r3, #2
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d0ee      	beq.n	8004b36 <HAL_RCC_OscConfig+0x33a>
 8004b58:	e014      	b.n	8004b84 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b5a:	f7fd fc53 	bl	8002404 <HAL_GetTick>
 8004b5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b60:	e00a      	b.n	8004b78 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b62:	f7fd fc4f 	bl	8002404 <HAL_GetTick>
 8004b66:	4602      	mov	r2, r0
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	1ad3      	subs	r3, r2, r3
 8004b6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d901      	bls.n	8004b78 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004b74:	2303      	movs	r3, #3
 8004b76:	e0a6      	b.n	8004cc6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b78:	4b56      	ldr	r3, [pc, #344]	; (8004cd4 <HAL_RCC_OscConfig+0x4d8>)
 8004b7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b7c:	f003 0302 	and.w	r3, r3, #2
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d1ee      	bne.n	8004b62 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b84:	7dfb      	ldrb	r3, [r7, #23]
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d105      	bne.n	8004b96 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b8a:	4b52      	ldr	r3, [pc, #328]	; (8004cd4 <HAL_RCC_OscConfig+0x4d8>)
 8004b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b8e:	4a51      	ldr	r2, [pc, #324]	; (8004cd4 <HAL_RCC_OscConfig+0x4d8>)
 8004b90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b94:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	699b      	ldr	r3, [r3, #24]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	f000 8092 	beq.w	8004cc4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004ba0:	4b4c      	ldr	r3, [pc, #304]	; (8004cd4 <HAL_RCC_OscConfig+0x4d8>)
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	f003 030c 	and.w	r3, r3, #12
 8004ba8:	2b08      	cmp	r3, #8
 8004baa:	d05c      	beq.n	8004c66 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	699b      	ldr	r3, [r3, #24]
 8004bb0:	2b02      	cmp	r3, #2
 8004bb2:	d141      	bne.n	8004c38 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bb4:	4b48      	ldr	r3, [pc, #288]	; (8004cd8 <HAL_RCC_OscConfig+0x4dc>)
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bba:	f7fd fc23 	bl	8002404 <HAL_GetTick>
 8004bbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bc0:	e008      	b.n	8004bd4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bc2:	f7fd fc1f 	bl	8002404 <HAL_GetTick>
 8004bc6:	4602      	mov	r2, r0
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	1ad3      	subs	r3, r2, r3
 8004bcc:	2b02      	cmp	r3, #2
 8004bce:	d901      	bls.n	8004bd4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004bd0:	2303      	movs	r3, #3
 8004bd2:	e078      	b.n	8004cc6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bd4:	4b3f      	ldr	r3, [pc, #252]	; (8004cd4 <HAL_RCC_OscConfig+0x4d8>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d1f0      	bne.n	8004bc2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	69da      	ldr	r2, [r3, #28]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6a1b      	ldr	r3, [r3, #32]
 8004be8:	431a      	orrs	r2, r3
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bee:	019b      	lsls	r3, r3, #6
 8004bf0:	431a      	orrs	r2, r3
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bf6:	085b      	lsrs	r3, r3, #1
 8004bf8:	3b01      	subs	r3, #1
 8004bfa:	041b      	lsls	r3, r3, #16
 8004bfc:	431a      	orrs	r2, r3
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c02:	061b      	lsls	r3, r3, #24
 8004c04:	4933      	ldr	r1, [pc, #204]	; (8004cd4 <HAL_RCC_OscConfig+0x4d8>)
 8004c06:	4313      	orrs	r3, r2
 8004c08:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c0a:	4b33      	ldr	r3, [pc, #204]	; (8004cd8 <HAL_RCC_OscConfig+0x4dc>)
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c10:	f7fd fbf8 	bl	8002404 <HAL_GetTick>
 8004c14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c16:	e008      	b.n	8004c2a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c18:	f7fd fbf4 	bl	8002404 <HAL_GetTick>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	1ad3      	subs	r3, r2, r3
 8004c22:	2b02      	cmp	r3, #2
 8004c24:	d901      	bls.n	8004c2a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004c26:	2303      	movs	r3, #3
 8004c28:	e04d      	b.n	8004cc6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c2a:	4b2a      	ldr	r3, [pc, #168]	; (8004cd4 <HAL_RCC_OscConfig+0x4d8>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d0f0      	beq.n	8004c18 <HAL_RCC_OscConfig+0x41c>
 8004c36:	e045      	b.n	8004cc4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c38:	4b27      	ldr	r3, [pc, #156]	; (8004cd8 <HAL_RCC_OscConfig+0x4dc>)
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c3e:	f7fd fbe1 	bl	8002404 <HAL_GetTick>
 8004c42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c44:	e008      	b.n	8004c58 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c46:	f7fd fbdd 	bl	8002404 <HAL_GetTick>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	1ad3      	subs	r3, r2, r3
 8004c50:	2b02      	cmp	r3, #2
 8004c52:	d901      	bls.n	8004c58 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004c54:	2303      	movs	r3, #3
 8004c56:	e036      	b.n	8004cc6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c58:	4b1e      	ldr	r3, [pc, #120]	; (8004cd4 <HAL_RCC_OscConfig+0x4d8>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d1f0      	bne.n	8004c46 <HAL_RCC_OscConfig+0x44a>
 8004c64:	e02e      	b.n	8004cc4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	699b      	ldr	r3, [r3, #24]
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	d101      	bne.n	8004c72 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e029      	b.n	8004cc6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004c72:	4b18      	ldr	r3, [pc, #96]	; (8004cd4 <HAL_RCC_OscConfig+0x4d8>)
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	69db      	ldr	r3, [r3, #28]
 8004c82:	429a      	cmp	r2, r3
 8004c84:	d11c      	bne.n	8004cc0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d115      	bne.n	8004cc0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004c94:	68fa      	ldr	r2, [r7, #12]
 8004c96:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004c9a:	4013      	ands	r3, r2
 8004c9c:	687a      	ldr	r2, [r7, #4]
 8004c9e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d10d      	bne.n	8004cc0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	d106      	bne.n	8004cc0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d001      	beq.n	8004cc4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	e000      	b.n	8004cc6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004cc4:	2300      	movs	r3, #0
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3718      	adds	r7, #24
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}
 8004cce:	bf00      	nop
 8004cd0:	40007000 	.word	0x40007000
 8004cd4:	40023800 	.word	0x40023800
 8004cd8:	42470060 	.word	0x42470060

08004cdc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b084      	sub	sp, #16
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
 8004ce4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d101      	bne.n	8004cf0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	e0cc      	b.n	8004e8a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004cf0:	4b68      	ldr	r3, [pc, #416]	; (8004e94 <HAL_RCC_ClockConfig+0x1b8>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 030f 	and.w	r3, r3, #15
 8004cf8:	683a      	ldr	r2, [r7, #0]
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d90c      	bls.n	8004d18 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cfe:	4b65      	ldr	r3, [pc, #404]	; (8004e94 <HAL_RCC_ClockConfig+0x1b8>)
 8004d00:	683a      	ldr	r2, [r7, #0]
 8004d02:	b2d2      	uxtb	r2, r2
 8004d04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d06:	4b63      	ldr	r3, [pc, #396]	; (8004e94 <HAL_RCC_ClockConfig+0x1b8>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 030f 	and.w	r3, r3, #15
 8004d0e:	683a      	ldr	r2, [r7, #0]
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d001      	beq.n	8004d18 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	e0b8      	b.n	8004e8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f003 0302 	and.w	r3, r3, #2
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d020      	beq.n	8004d66 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f003 0304 	and.w	r3, r3, #4
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d005      	beq.n	8004d3c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d30:	4b59      	ldr	r3, [pc, #356]	; (8004e98 <HAL_RCC_ClockConfig+0x1bc>)
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	4a58      	ldr	r2, [pc, #352]	; (8004e98 <HAL_RCC_ClockConfig+0x1bc>)
 8004d36:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004d3a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f003 0308 	and.w	r3, r3, #8
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d005      	beq.n	8004d54 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d48:	4b53      	ldr	r3, [pc, #332]	; (8004e98 <HAL_RCC_ClockConfig+0x1bc>)
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	4a52      	ldr	r2, [pc, #328]	; (8004e98 <HAL_RCC_ClockConfig+0x1bc>)
 8004d4e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004d52:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d54:	4b50      	ldr	r3, [pc, #320]	; (8004e98 <HAL_RCC_ClockConfig+0x1bc>)
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	494d      	ldr	r1, [pc, #308]	; (8004e98 <HAL_RCC_ClockConfig+0x1bc>)
 8004d62:	4313      	orrs	r3, r2
 8004d64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 0301 	and.w	r3, r3, #1
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d044      	beq.n	8004dfc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	d107      	bne.n	8004d8a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d7a:	4b47      	ldr	r3, [pc, #284]	; (8004e98 <HAL_RCC_ClockConfig+0x1bc>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d119      	bne.n	8004dba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	e07f      	b.n	8004e8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	2b02      	cmp	r3, #2
 8004d90:	d003      	beq.n	8004d9a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d96:	2b03      	cmp	r3, #3
 8004d98:	d107      	bne.n	8004daa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d9a:	4b3f      	ldr	r3, [pc, #252]	; (8004e98 <HAL_RCC_ClockConfig+0x1bc>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d109      	bne.n	8004dba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	e06f      	b.n	8004e8a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004daa:	4b3b      	ldr	r3, [pc, #236]	; (8004e98 <HAL_RCC_ClockConfig+0x1bc>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f003 0302 	and.w	r3, r3, #2
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d101      	bne.n	8004dba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	e067      	b.n	8004e8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004dba:	4b37      	ldr	r3, [pc, #220]	; (8004e98 <HAL_RCC_ClockConfig+0x1bc>)
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	f023 0203 	bic.w	r2, r3, #3
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	4934      	ldr	r1, [pc, #208]	; (8004e98 <HAL_RCC_ClockConfig+0x1bc>)
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004dcc:	f7fd fb1a 	bl	8002404 <HAL_GetTick>
 8004dd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dd2:	e00a      	b.n	8004dea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004dd4:	f7fd fb16 	bl	8002404 <HAL_GetTick>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	1ad3      	subs	r3, r2, r3
 8004dde:	f241 3288 	movw	r2, #5000	; 0x1388
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d901      	bls.n	8004dea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004de6:	2303      	movs	r3, #3
 8004de8:	e04f      	b.n	8004e8a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dea:	4b2b      	ldr	r3, [pc, #172]	; (8004e98 <HAL_RCC_ClockConfig+0x1bc>)
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	f003 020c 	and.w	r2, r3, #12
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	009b      	lsls	r3, r3, #2
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	d1eb      	bne.n	8004dd4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004dfc:	4b25      	ldr	r3, [pc, #148]	; (8004e94 <HAL_RCC_ClockConfig+0x1b8>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f003 030f 	and.w	r3, r3, #15
 8004e04:	683a      	ldr	r2, [r7, #0]
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d20c      	bcs.n	8004e24 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e0a:	4b22      	ldr	r3, [pc, #136]	; (8004e94 <HAL_RCC_ClockConfig+0x1b8>)
 8004e0c:	683a      	ldr	r2, [r7, #0]
 8004e0e:	b2d2      	uxtb	r2, r2
 8004e10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e12:	4b20      	ldr	r3, [pc, #128]	; (8004e94 <HAL_RCC_ClockConfig+0x1b8>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f003 030f 	and.w	r3, r3, #15
 8004e1a:	683a      	ldr	r2, [r7, #0]
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d001      	beq.n	8004e24 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004e20:	2301      	movs	r3, #1
 8004e22:	e032      	b.n	8004e8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f003 0304 	and.w	r3, r3, #4
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d008      	beq.n	8004e42 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e30:	4b19      	ldr	r3, [pc, #100]	; (8004e98 <HAL_RCC_ClockConfig+0x1bc>)
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	68db      	ldr	r3, [r3, #12]
 8004e3c:	4916      	ldr	r1, [pc, #88]	; (8004e98 <HAL_RCC_ClockConfig+0x1bc>)
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f003 0308 	and.w	r3, r3, #8
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d009      	beq.n	8004e62 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e4e:	4b12      	ldr	r3, [pc, #72]	; (8004e98 <HAL_RCC_ClockConfig+0x1bc>)
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	691b      	ldr	r3, [r3, #16]
 8004e5a:	00db      	lsls	r3, r3, #3
 8004e5c:	490e      	ldr	r1, [pc, #56]	; (8004e98 <HAL_RCC_ClockConfig+0x1bc>)
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004e62:	f000 f821 	bl	8004ea8 <HAL_RCC_GetSysClockFreq>
 8004e66:	4601      	mov	r1, r0
 8004e68:	4b0b      	ldr	r3, [pc, #44]	; (8004e98 <HAL_RCC_ClockConfig+0x1bc>)
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	091b      	lsrs	r3, r3, #4
 8004e6e:	f003 030f 	and.w	r3, r3, #15
 8004e72:	4a0a      	ldr	r2, [pc, #40]	; (8004e9c <HAL_RCC_ClockConfig+0x1c0>)
 8004e74:	5cd3      	ldrb	r3, [r2, r3]
 8004e76:	fa21 f303 	lsr.w	r3, r1, r3
 8004e7a:	4a09      	ldr	r2, [pc, #36]	; (8004ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8004e7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004e7e:	4b09      	ldr	r3, [pc, #36]	; (8004ea4 <HAL_RCC_ClockConfig+0x1c8>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4618      	mov	r0, r3
 8004e84:	f7fd fa7a 	bl	800237c <HAL_InitTick>

  return HAL_OK;
 8004e88:	2300      	movs	r3, #0
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3710      	adds	r7, #16
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}
 8004e92:	bf00      	nop
 8004e94:	40023c00 	.word	0x40023c00
 8004e98:	40023800 	.word	0x40023800
 8004e9c:	0800b8fc 	.word	0x0800b8fc
 8004ea0:	200000a0 	.word	0x200000a0
 8004ea4:	200000a4 	.word	0x200000a4

08004ea8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004eaa:	b085      	sub	sp, #20
 8004eac:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	607b      	str	r3, [r7, #4]
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	60fb      	str	r3, [r7, #12]
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ebe:	4b50      	ldr	r3, [pc, #320]	; (8005000 <HAL_RCC_GetSysClockFreq+0x158>)
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	f003 030c 	and.w	r3, r3, #12
 8004ec6:	2b04      	cmp	r3, #4
 8004ec8:	d007      	beq.n	8004eda <HAL_RCC_GetSysClockFreq+0x32>
 8004eca:	2b08      	cmp	r3, #8
 8004ecc:	d008      	beq.n	8004ee0 <HAL_RCC_GetSysClockFreq+0x38>
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	f040 808d 	bne.w	8004fee <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ed4:	4b4b      	ldr	r3, [pc, #300]	; (8005004 <HAL_RCC_GetSysClockFreq+0x15c>)
 8004ed6:	60bb      	str	r3, [r7, #8]
       break;
 8004ed8:	e08c      	b.n	8004ff4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004eda:	4b4b      	ldr	r3, [pc, #300]	; (8005008 <HAL_RCC_GetSysClockFreq+0x160>)
 8004edc:	60bb      	str	r3, [r7, #8]
      break;
 8004ede:	e089      	b.n	8004ff4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ee0:	4b47      	ldr	r3, [pc, #284]	; (8005000 <HAL_RCC_GetSysClockFreq+0x158>)
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ee8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004eea:	4b45      	ldr	r3, [pc, #276]	; (8005000 <HAL_RCC_GetSysClockFreq+0x158>)
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d023      	beq.n	8004f3e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ef6:	4b42      	ldr	r3, [pc, #264]	; (8005000 <HAL_RCC_GetSysClockFreq+0x158>)
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	099b      	lsrs	r3, r3, #6
 8004efc:	f04f 0400 	mov.w	r4, #0
 8004f00:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004f04:	f04f 0200 	mov.w	r2, #0
 8004f08:	ea03 0501 	and.w	r5, r3, r1
 8004f0c:	ea04 0602 	and.w	r6, r4, r2
 8004f10:	4a3d      	ldr	r2, [pc, #244]	; (8005008 <HAL_RCC_GetSysClockFreq+0x160>)
 8004f12:	fb02 f106 	mul.w	r1, r2, r6
 8004f16:	2200      	movs	r2, #0
 8004f18:	fb02 f205 	mul.w	r2, r2, r5
 8004f1c:	440a      	add	r2, r1
 8004f1e:	493a      	ldr	r1, [pc, #232]	; (8005008 <HAL_RCC_GetSysClockFreq+0x160>)
 8004f20:	fba5 0101 	umull	r0, r1, r5, r1
 8004f24:	1853      	adds	r3, r2, r1
 8004f26:	4619      	mov	r1, r3
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	f04f 0400 	mov.w	r4, #0
 8004f2e:	461a      	mov	r2, r3
 8004f30:	4623      	mov	r3, r4
 8004f32:	f7fb f9ad 	bl	8000290 <__aeabi_uldivmod>
 8004f36:	4603      	mov	r3, r0
 8004f38:	460c      	mov	r4, r1
 8004f3a:	60fb      	str	r3, [r7, #12]
 8004f3c:	e049      	b.n	8004fd2 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f3e:	4b30      	ldr	r3, [pc, #192]	; (8005000 <HAL_RCC_GetSysClockFreq+0x158>)
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	099b      	lsrs	r3, r3, #6
 8004f44:	f04f 0400 	mov.w	r4, #0
 8004f48:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004f4c:	f04f 0200 	mov.w	r2, #0
 8004f50:	ea03 0501 	and.w	r5, r3, r1
 8004f54:	ea04 0602 	and.w	r6, r4, r2
 8004f58:	4629      	mov	r1, r5
 8004f5a:	4632      	mov	r2, r6
 8004f5c:	f04f 0300 	mov.w	r3, #0
 8004f60:	f04f 0400 	mov.w	r4, #0
 8004f64:	0154      	lsls	r4, r2, #5
 8004f66:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004f6a:	014b      	lsls	r3, r1, #5
 8004f6c:	4619      	mov	r1, r3
 8004f6e:	4622      	mov	r2, r4
 8004f70:	1b49      	subs	r1, r1, r5
 8004f72:	eb62 0206 	sbc.w	r2, r2, r6
 8004f76:	f04f 0300 	mov.w	r3, #0
 8004f7a:	f04f 0400 	mov.w	r4, #0
 8004f7e:	0194      	lsls	r4, r2, #6
 8004f80:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004f84:	018b      	lsls	r3, r1, #6
 8004f86:	1a5b      	subs	r3, r3, r1
 8004f88:	eb64 0402 	sbc.w	r4, r4, r2
 8004f8c:	f04f 0100 	mov.w	r1, #0
 8004f90:	f04f 0200 	mov.w	r2, #0
 8004f94:	00e2      	lsls	r2, r4, #3
 8004f96:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004f9a:	00d9      	lsls	r1, r3, #3
 8004f9c:	460b      	mov	r3, r1
 8004f9e:	4614      	mov	r4, r2
 8004fa0:	195b      	adds	r3, r3, r5
 8004fa2:	eb44 0406 	adc.w	r4, r4, r6
 8004fa6:	f04f 0100 	mov.w	r1, #0
 8004faa:	f04f 0200 	mov.w	r2, #0
 8004fae:	02a2      	lsls	r2, r4, #10
 8004fb0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004fb4:	0299      	lsls	r1, r3, #10
 8004fb6:	460b      	mov	r3, r1
 8004fb8:	4614      	mov	r4, r2
 8004fba:	4618      	mov	r0, r3
 8004fbc:	4621      	mov	r1, r4
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	f04f 0400 	mov.w	r4, #0
 8004fc4:	461a      	mov	r2, r3
 8004fc6:	4623      	mov	r3, r4
 8004fc8:	f7fb f962 	bl	8000290 <__aeabi_uldivmod>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	460c      	mov	r4, r1
 8004fd0:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004fd2:	4b0b      	ldr	r3, [pc, #44]	; (8005000 <HAL_RCC_GetSysClockFreq+0x158>)
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	0c1b      	lsrs	r3, r3, #16
 8004fd8:	f003 0303 	and.w	r3, r3, #3
 8004fdc:	3301      	adds	r3, #1
 8004fde:	005b      	lsls	r3, r3, #1
 8004fe0:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004fe2:	68fa      	ldr	r2, [r7, #12]
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fea:	60bb      	str	r3, [r7, #8]
      break;
 8004fec:	e002      	b.n	8004ff4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004fee:	4b05      	ldr	r3, [pc, #20]	; (8005004 <HAL_RCC_GetSysClockFreq+0x15c>)
 8004ff0:	60bb      	str	r3, [r7, #8]
      break;
 8004ff2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ff4:	68bb      	ldr	r3, [r7, #8]
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3714      	adds	r7, #20
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ffe:	bf00      	nop
 8005000:	40023800 	.word	0x40023800
 8005004:	00f42400 	.word	0x00f42400
 8005008:	017d7840 	.word	0x017d7840

0800500c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800500c:	b480      	push	{r7}
 800500e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005010:	4b03      	ldr	r3, [pc, #12]	; (8005020 <HAL_RCC_GetHCLKFreq+0x14>)
 8005012:	681b      	ldr	r3, [r3, #0]
}
 8005014:	4618      	mov	r0, r3
 8005016:	46bd      	mov	sp, r7
 8005018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501c:	4770      	bx	lr
 800501e:	bf00      	nop
 8005020:	200000a0 	.word	0x200000a0

08005024 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005028:	f7ff fff0 	bl	800500c <HAL_RCC_GetHCLKFreq>
 800502c:	4601      	mov	r1, r0
 800502e:	4b05      	ldr	r3, [pc, #20]	; (8005044 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	0a9b      	lsrs	r3, r3, #10
 8005034:	f003 0307 	and.w	r3, r3, #7
 8005038:	4a03      	ldr	r2, [pc, #12]	; (8005048 <HAL_RCC_GetPCLK1Freq+0x24>)
 800503a:	5cd3      	ldrb	r3, [r2, r3]
 800503c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005040:	4618      	mov	r0, r3
 8005042:	bd80      	pop	{r7, pc}
 8005044:	40023800 	.word	0x40023800
 8005048:	0800b90c 	.word	0x0800b90c

0800504c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b082      	sub	sp, #8
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d101      	bne.n	800505e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800505a:	2301      	movs	r3, #1
 800505c:	e056      	b.n	800510c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2200      	movs	r2, #0
 8005062:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800506a:	b2db      	uxtb	r3, r3
 800506c:	2b00      	cmp	r3, #0
 800506e:	d106      	bne.n	800507e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2200      	movs	r2, #0
 8005074:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	f7fc f895 	bl	80011a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2202      	movs	r2, #2
 8005082:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005094:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	685a      	ldr	r2, [r3, #4]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	431a      	orrs	r2, r3
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	68db      	ldr	r3, [r3, #12]
 80050a4:	431a      	orrs	r2, r3
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	691b      	ldr	r3, [r3, #16]
 80050aa:	431a      	orrs	r2, r3
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	695b      	ldr	r3, [r3, #20]
 80050b0:	431a      	orrs	r2, r3
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	699b      	ldr	r3, [r3, #24]
 80050b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050ba:	431a      	orrs	r2, r3
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	69db      	ldr	r3, [r3, #28]
 80050c0:	431a      	orrs	r2, r3
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6a1b      	ldr	r3, [r3, #32]
 80050c6:	ea42 0103 	orr.w	r1, r2, r3
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	430a      	orrs	r2, r1
 80050d4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	699b      	ldr	r3, [r3, #24]
 80050da:	0c1b      	lsrs	r3, r3, #16
 80050dc:	f003 0104 	and.w	r1, r3, #4
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	430a      	orrs	r2, r1
 80050ea:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	69da      	ldr	r2, [r3, #28]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80050fa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2200      	movs	r2, #0
 8005100:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2201      	movs	r2, #1
 8005106:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800510a:	2300      	movs	r3, #0
}
 800510c:	4618      	mov	r0, r3
 800510e:	3708      	adds	r7, #8
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}

08005114 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b088      	sub	sp, #32
 8005118:	af00      	add	r7, sp, #0
 800511a:	60f8      	str	r0, [r7, #12]
 800511c:	60b9      	str	r1, [r7, #8]
 800511e:	603b      	str	r3, [r7, #0]
 8005120:	4613      	mov	r3, r2
 8005122:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005124:	2300      	movs	r3, #0
 8005126:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800512e:	2b01      	cmp	r3, #1
 8005130:	d101      	bne.n	8005136 <HAL_SPI_Transmit+0x22>
 8005132:	2302      	movs	r3, #2
 8005134:	e11e      	b.n	8005374 <HAL_SPI_Transmit+0x260>
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2201      	movs	r2, #1
 800513a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800513e:	f7fd f961 	bl	8002404 <HAL_GetTick>
 8005142:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005144:	88fb      	ldrh	r3, [r7, #6]
 8005146:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800514e:	b2db      	uxtb	r3, r3
 8005150:	2b01      	cmp	r3, #1
 8005152:	d002      	beq.n	800515a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005154:	2302      	movs	r3, #2
 8005156:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005158:	e103      	b.n	8005362 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d002      	beq.n	8005166 <HAL_SPI_Transmit+0x52>
 8005160:	88fb      	ldrh	r3, [r7, #6]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d102      	bne.n	800516c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	77fb      	strb	r3, [r7, #31]
    goto error;
 800516a:	e0fa      	b.n	8005362 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2203      	movs	r2, #3
 8005170:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2200      	movs	r2, #0
 8005178:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	68ba      	ldr	r2, [r7, #8]
 800517e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	88fa      	ldrh	r2, [r7, #6]
 8005184:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	88fa      	ldrh	r2, [r7, #6]
 800518a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2200      	movs	r2, #0
 8005190:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2200      	movs	r2, #0
 8005196:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2200      	movs	r2, #0
 800519c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2200      	movs	r2, #0
 80051a2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2200      	movs	r2, #0
 80051a8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051b2:	d107      	bne.n	80051c4 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80051c2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051ce:	2b40      	cmp	r3, #64	; 0x40
 80051d0:	d007      	beq.n	80051e2 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051e0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	68db      	ldr	r3, [r3, #12]
 80051e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051ea:	d14b      	bne.n	8005284 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d002      	beq.n	80051fa <HAL_SPI_Transmit+0xe6>
 80051f4:	8afb      	ldrh	r3, [r7, #22]
 80051f6:	2b01      	cmp	r3, #1
 80051f8:	d13e      	bne.n	8005278 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051fe:	881a      	ldrh	r2, [r3, #0]
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800520a:	1c9a      	adds	r2, r3, #2
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005214:	b29b      	uxth	r3, r3
 8005216:	3b01      	subs	r3, #1
 8005218:	b29a      	uxth	r2, r3
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800521e:	e02b      	b.n	8005278 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	f003 0302 	and.w	r3, r3, #2
 800522a:	2b02      	cmp	r3, #2
 800522c:	d112      	bne.n	8005254 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005232:	881a      	ldrh	r2, [r3, #0]
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800523e:	1c9a      	adds	r2, r3, #2
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005248:	b29b      	uxth	r3, r3
 800524a:	3b01      	subs	r3, #1
 800524c:	b29a      	uxth	r2, r3
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	86da      	strh	r2, [r3, #54]	; 0x36
 8005252:	e011      	b.n	8005278 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005254:	f7fd f8d6 	bl	8002404 <HAL_GetTick>
 8005258:	4602      	mov	r2, r0
 800525a:	69bb      	ldr	r3, [r7, #24]
 800525c:	1ad3      	subs	r3, r2, r3
 800525e:	683a      	ldr	r2, [r7, #0]
 8005260:	429a      	cmp	r2, r3
 8005262:	d803      	bhi.n	800526c <HAL_SPI_Transmit+0x158>
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800526a:	d102      	bne.n	8005272 <HAL_SPI_Transmit+0x15e>
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d102      	bne.n	8005278 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8005272:	2303      	movs	r3, #3
 8005274:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005276:	e074      	b.n	8005362 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800527c:	b29b      	uxth	r3, r3
 800527e:	2b00      	cmp	r3, #0
 8005280:	d1ce      	bne.n	8005220 <HAL_SPI_Transmit+0x10c>
 8005282:	e04c      	b.n	800531e <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d002      	beq.n	8005292 <HAL_SPI_Transmit+0x17e>
 800528c:	8afb      	ldrh	r3, [r7, #22]
 800528e:	2b01      	cmp	r3, #1
 8005290:	d140      	bne.n	8005314 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	330c      	adds	r3, #12
 800529c:	7812      	ldrb	r2, [r2, #0]
 800529e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052a4:	1c5a      	adds	r2, r3, #1
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052ae:	b29b      	uxth	r3, r3
 80052b0:	3b01      	subs	r3, #1
 80052b2:	b29a      	uxth	r2, r3
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80052b8:	e02c      	b.n	8005314 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	f003 0302 	and.w	r3, r3, #2
 80052c4:	2b02      	cmp	r3, #2
 80052c6:	d113      	bne.n	80052f0 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	330c      	adds	r3, #12
 80052d2:	7812      	ldrb	r2, [r2, #0]
 80052d4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052da:	1c5a      	adds	r2, r3, #1
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	3b01      	subs	r3, #1
 80052e8:	b29a      	uxth	r2, r3
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	86da      	strh	r2, [r3, #54]	; 0x36
 80052ee:	e011      	b.n	8005314 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80052f0:	f7fd f888 	bl	8002404 <HAL_GetTick>
 80052f4:	4602      	mov	r2, r0
 80052f6:	69bb      	ldr	r3, [r7, #24]
 80052f8:	1ad3      	subs	r3, r2, r3
 80052fa:	683a      	ldr	r2, [r7, #0]
 80052fc:	429a      	cmp	r2, r3
 80052fe:	d803      	bhi.n	8005308 <HAL_SPI_Transmit+0x1f4>
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005306:	d102      	bne.n	800530e <HAL_SPI_Transmit+0x1fa>
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d102      	bne.n	8005314 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800530e:	2303      	movs	r3, #3
 8005310:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005312:	e026      	b.n	8005362 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005318:	b29b      	uxth	r3, r3
 800531a:	2b00      	cmp	r3, #0
 800531c:	d1cd      	bne.n	80052ba <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800531e:	69ba      	ldr	r2, [r7, #24]
 8005320:	6839      	ldr	r1, [r7, #0]
 8005322:	68f8      	ldr	r0, [r7, #12]
 8005324:	f000 fba4 	bl	8005a70 <SPI_EndRxTxTransaction>
 8005328:	4603      	mov	r3, r0
 800532a:	2b00      	cmp	r3, #0
 800532c:	d002      	beq.n	8005334 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2220      	movs	r2, #32
 8005332:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	689b      	ldr	r3, [r3, #8]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d10a      	bne.n	8005352 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800533c:	2300      	movs	r3, #0
 800533e:	613b      	str	r3, [r7, #16]
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	68db      	ldr	r3, [r3, #12]
 8005346:	613b      	str	r3, [r7, #16]
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	613b      	str	r3, [r7, #16]
 8005350:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005356:	2b00      	cmp	r3, #0
 8005358:	d002      	beq.n	8005360 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800535a:	2301      	movs	r3, #1
 800535c:	77fb      	strb	r3, [r7, #31]
 800535e:	e000      	b.n	8005362 <HAL_SPI_Transmit+0x24e>
  }

error:
 8005360:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2201      	movs	r2, #1
 8005366:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2200      	movs	r2, #0
 800536e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005372:	7ffb      	ldrb	r3, [r7, #31]
}
 8005374:	4618      	mov	r0, r3
 8005376:	3720      	adds	r7, #32
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}

0800537c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b088      	sub	sp, #32
 8005380:	af02      	add	r7, sp, #8
 8005382:	60f8      	str	r0, [r7, #12]
 8005384:	60b9      	str	r1, [r7, #8]
 8005386:	603b      	str	r3, [r7, #0]
 8005388:	4613      	mov	r3, r2
 800538a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800538c:	2300      	movs	r3, #0
 800538e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005398:	d112      	bne.n	80053c0 <HAL_SPI_Receive+0x44>
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d10e      	bne.n	80053c0 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2204      	movs	r2, #4
 80053a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80053aa:	88fa      	ldrh	r2, [r7, #6]
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	9300      	str	r3, [sp, #0]
 80053b0:	4613      	mov	r3, r2
 80053b2:	68ba      	ldr	r2, [r7, #8]
 80053b4:	68b9      	ldr	r1, [r7, #8]
 80053b6:	68f8      	ldr	r0, [r7, #12]
 80053b8:	f000 f8e9 	bl	800558e <HAL_SPI_TransmitReceive>
 80053bc:	4603      	mov	r3, r0
 80053be:	e0e2      	b.n	8005586 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80053c6:	2b01      	cmp	r3, #1
 80053c8:	d101      	bne.n	80053ce <HAL_SPI_Receive+0x52>
 80053ca:	2302      	movs	r3, #2
 80053cc:	e0db      	b.n	8005586 <HAL_SPI_Receive+0x20a>
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2201      	movs	r2, #1
 80053d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80053d6:	f7fd f815 	bl	8002404 <HAL_GetTick>
 80053da:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80053e2:	b2db      	uxtb	r3, r3
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	d002      	beq.n	80053ee <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80053e8:	2302      	movs	r3, #2
 80053ea:	75fb      	strb	r3, [r7, #23]
    goto error;
 80053ec:	e0c2      	b.n	8005574 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d002      	beq.n	80053fa <HAL_SPI_Receive+0x7e>
 80053f4:	88fb      	ldrh	r3, [r7, #6]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d102      	bne.n	8005400 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80053fa:	2301      	movs	r3, #1
 80053fc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80053fe:	e0b9      	b.n	8005574 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2204      	movs	r2, #4
 8005404:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2200      	movs	r2, #0
 800540c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	68ba      	ldr	r2, [r7, #8]
 8005412:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	88fa      	ldrh	r2, [r7, #6]
 8005418:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	88fa      	ldrh	r2, [r7, #6]
 800541e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2200      	movs	r2, #0
 8005424:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2200      	movs	r2, #0
 800542a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2200      	movs	r2, #0
 8005430:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2200      	movs	r2, #0
 8005436:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2200      	movs	r2, #0
 800543c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005446:	d107      	bne.n	8005458 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005456:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005462:	2b40      	cmp	r3, #64	; 0x40
 8005464:	d007      	beq.n	8005476 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005474:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	68db      	ldr	r3, [r3, #12]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d162      	bne.n	8005544 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800547e:	e02e      	b.n	80054de <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	f003 0301 	and.w	r3, r3, #1
 800548a:	2b01      	cmp	r3, #1
 800548c:	d115      	bne.n	80054ba <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f103 020c 	add.w	r2, r3, #12
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800549a:	7812      	ldrb	r2, [r2, #0]
 800549c:	b2d2      	uxtb	r2, r2
 800549e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a4:	1c5a      	adds	r2, r3, #1
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054ae:	b29b      	uxth	r3, r3
 80054b0:	3b01      	subs	r3, #1
 80054b2:	b29a      	uxth	r2, r3
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80054b8:	e011      	b.n	80054de <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80054ba:	f7fc ffa3 	bl	8002404 <HAL_GetTick>
 80054be:	4602      	mov	r2, r0
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	1ad3      	subs	r3, r2, r3
 80054c4:	683a      	ldr	r2, [r7, #0]
 80054c6:	429a      	cmp	r2, r3
 80054c8:	d803      	bhi.n	80054d2 <HAL_SPI_Receive+0x156>
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054d0:	d102      	bne.n	80054d8 <HAL_SPI_Receive+0x15c>
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d102      	bne.n	80054de <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 80054d8:	2303      	movs	r3, #3
 80054da:	75fb      	strb	r3, [r7, #23]
          goto error;
 80054dc:	e04a      	b.n	8005574 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d1cb      	bne.n	8005480 <HAL_SPI_Receive+0x104>
 80054e8:	e031      	b.n	800554e <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	f003 0301 	and.w	r3, r3, #1
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	d113      	bne.n	8005520 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	68da      	ldr	r2, [r3, #12]
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005502:	b292      	uxth	r2, r2
 8005504:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800550a:	1c9a      	adds	r2, r3, #2
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005514:	b29b      	uxth	r3, r3
 8005516:	3b01      	subs	r3, #1
 8005518:	b29a      	uxth	r2, r3
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800551e:	e011      	b.n	8005544 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005520:	f7fc ff70 	bl	8002404 <HAL_GetTick>
 8005524:	4602      	mov	r2, r0
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	1ad3      	subs	r3, r2, r3
 800552a:	683a      	ldr	r2, [r7, #0]
 800552c:	429a      	cmp	r2, r3
 800552e:	d803      	bhi.n	8005538 <HAL_SPI_Receive+0x1bc>
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005536:	d102      	bne.n	800553e <HAL_SPI_Receive+0x1c2>
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d102      	bne.n	8005544 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800553e:	2303      	movs	r3, #3
 8005540:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005542:	e017      	b.n	8005574 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005548:	b29b      	uxth	r3, r3
 800554a:	2b00      	cmp	r3, #0
 800554c:	d1cd      	bne.n	80054ea <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800554e:	693a      	ldr	r2, [r7, #16]
 8005550:	6839      	ldr	r1, [r7, #0]
 8005552:	68f8      	ldr	r0, [r7, #12]
 8005554:	f000 fa27 	bl	80059a6 <SPI_EndRxTransaction>
 8005558:	4603      	mov	r3, r0
 800555a:	2b00      	cmp	r3, #0
 800555c:	d002      	beq.n	8005564 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2220      	movs	r2, #32
 8005562:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005568:	2b00      	cmp	r3, #0
 800556a:	d002      	beq.n	8005572 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800556c:	2301      	movs	r3, #1
 800556e:	75fb      	strb	r3, [r7, #23]
 8005570:	e000      	b.n	8005574 <HAL_SPI_Receive+0x1f8>
  }

error :
 8005572:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2201      	movs	r2, #1
 8005578:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2200      	movs	r2, #0
 8005580:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005584:	7dfb      	ldrb	r3, [r7, #23]
}
 8005586:	4618      	mov	r0, r3
 8005588:	3718      	adds	r7, #24
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}

0800558e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800558e:	b580      	push	{r7, lr}
 8005590:	b08c      	sub	sp, #48	; 0x30
 8005592:	af00      	add	r7, sp, #0
 8005594:	60f8      	str	r0, [r7, #12]
 8005596:	60b9      	str	r1, [r7, #8]
 8005598:	607a      	str	r2, [r7, #4]
 800559a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800559c:	2301      	movs	r3, #1
 800559e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80055a0:	2300      	movs	r3, #0
 80055a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d101      	bne.n	80055b4 <HAL_SPI_TransmitReceive+0x26>
 80055b0:	2302      	movs	r3, #2
 80055b2:	e18a      	b.n	80058ca <HAL_SPI_TransmitReceive+0x33c>
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2201      	movs	r2, #1
 80055b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80055bc:	f7fc ff22 	bl	8002404 <HAL_GetTick>
 80055c0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80055c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80055d2:	887b      	ldrh	r3, [r7, #2]
 80055d4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80055d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80055da:	2b01      	cmp	r3, #1
 80055dc:	d00f      	beq.n	80055fe <HAL_SPI_TransmitReceive+0x70>
 80055de:	69fb      	ldr	r3, [r7, #28]
 80055e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80055e4:	d107      	bne.n	80055f6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	689b      	ldr	r3, [r3, #8]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d103      	bne.n	80055f6 <HAL_SPI_TransmitReceive+0x68>
 80055ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80055f2:	2b04      	cmp	r3, #4
 80055f4:	d003      	beq.n	80055fe <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80055f6:	2302      	movs	r3, #2
 80055f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80055fc:	e15b      	b.n	80058b6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d005      	beq.n	8005610 <HAL_SPI_TransmitReceive+0x82>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d002      	beq.n	8005610 <HAL_SPI_TransmitReceive+0x82>
 800560a:	887b      	ldrh	r3, [r7, #2]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d103      	bne.n	8005618 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005610:	2301      	movs	r3, #1
 8005612:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005616:	e14e      	b.n	80058b6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800561e:	b2db      	uxtb	r3, r3
 8005620:	2b04      	cmp	r3, #4
 8005622:	d003      	beq.n	800562c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2205      	movs	r2, #5
 8005628:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2200      	movs	r2, #0
 8005630:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	687a      	ldr	r2, [r7, #4]
 8005636:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	887a      	ldrh	r2, [r7, #2]
 800563c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	887a      	ldrh	r2, [r7, #2]
 8005642:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	68ba      	ldr	r2, [r7, #8]
 8005648:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	887a      	ldrh	r2, [r7, #2]
 800564e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	887a      	ldrh	r2, [r7, #2]
 8005654:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2200      	movs	r2, #0
 800565a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2200      	movs	r2, #0
 8005660:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800566c:	2b40      	cmp	r3, #64	; 0x40
 800566e:	d007      	beq.n	8005680 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	681a      	ldr	r2, [r3, #0]
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800567e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	68db      	ldr	r3, [r3, #12]
 8005684:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005688:	d178      	bne.n	800577c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d002      	beq.n	8005698 <HAL_SPI_TransmitReceive+0x10a>
 8005692:	8b7b      	ldrh	r3, [r7, #26]
 8005694:	2b01      	cmp	r3, #1
 8005696:	d166      	bne.n	8005766 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800569c:	881a      	ldrh	r2, [r3, #0]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056a8:	1c9a      	adds	r2, r3, #2
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056b2:	b29b      	uxth	r3, r3
 80056b4:	3b01      	subs	r3, #1
 80056b6:	b29a      	uxth	r2, r3
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80056bc:	e053      	b.n	8005766 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	689b      	ldr	r3, [r3, #8]
 80056c4:	f003 0302 	and.w	r3, r3, #2
 80056c8:	2b02      	cmp	r3, #2
 80056ca:	d11b      	bne.n	8005704 <HAL_SPI_TransmitReceive+0x176>
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056d0:	b29b      	uxth	r3, r3
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d016      	beq.n	8005704 <HAL_SPI_TransmitReceive+0x176>
 80056d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056d8:	2b01      	cmp	r3, #1
 80056da:	d113      	bne.n	8005704 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056e0:	881a      	ldrh	r2, [r3, #0]
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ec:	1c9a      	adds	r2, r3, #2
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056f6:	b29b      	uxth	r3, r3
 80056f8:	3b01      	subs	r3, #1
 80056fa:	b29a      	uxth	r2, r3
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005700:	2300      	movs	r3, #0
 8005702:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	f003 0301 	and.w	r3, r3, #1
 800570e:	2b01      	cmp	r3, #1
 8005710:	d119      	bne.n	8005746 <HAL_SPI_TransmitReceive+0x1b8>
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005716:	b29b      	uxth	r3, r3
 8005718:	2b00      	cmp	r3, #0
 800571a:	d014      	beq.n	8005746 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	68da      	ldr	r2, [r3, #12]
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005726:	b292      	uxth	r2, r2
 8005728:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800572e:	1c9a      	adds	r2, r3, #2
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005738:	b29b      	uxth	r3, r3
 800573a:	3b01      	subs	r3, #1
 800573c:	b29a      	uxth	r2, r3
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005742:	2301      	movs	r3, #1
 8005744:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005746:	f7fc fe5d 	bl	8002404 <HAL_GetTick>
 800574a:	4602      	mov	r2, r0
 800574c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800574e:	1ad3      	subs	r3, r2, r3
 8005750:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005752:	429a      	cmp	r2, r3
 8005754:	d807      	bhi.n	8005766 <HAL_SPI_TransmitReceive+0x1d8>
 8005756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800575c:	d003      	beq.n	8005766 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800575e:	2303      	movs	r3, #3
 8005760:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005764:	e0a7      	b.n	80058b6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800576a:	b29b      	uxth	r3, r3
 800576c:	2b00      	cmp	r3, #0
 800576e:	d1a6      	bne.n	80056be <HAL_SPI_TransmitReceive+0x130>
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005774:	b29b      	uxth	r3, r3
 8005776:	2b00      	cmp	r3, #0
 8005778:	d1a1      	bne.n	80056be <HAL_SPI_TransmitReceive+0x130>
 800577a:	e07c      	b.n	8005876 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d002      	beq.n	800578a <HAL_SPI_TransmitReceive+0x1fc>
 8005784:	8b7b      	ldrh	r3, [r7, #26]
 8005786:	2b01      	cmp	r3, #1
 8005788:	d16b      	bne.n	8005862 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	330c      	adds	r3, #12
 8005794:	7812      	ldrb	r2, [r2, #0]
 8005796:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800579c:	1c5a      	adds	r2, r3, #1
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057a6:	b29b      	uxth	r3, r3
 80057a8:	3b01      	subs	r3, #1
 80057aa:	b29a      	uxth	r2, r3
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80057b0:	e057      	b.n	8005862 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	f003 0302 	and.w	r3, r3, #2
 80057bc:	2b02      	cmp	r3, #2
 80057be:	d11c      	bne.n	80057fa <HAL_SPI_TransmitReceive+0x26c>
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057c4:	b29b      	uxth	r3, r3
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d017      	beq.n	80057fa <HAL_SPI_TransmitReceive+0x26c>
 80057ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d114      	bne.n	80057fa <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	330c      	adds	r3, #12
 80057da:	7812      	ldrb	r2, [r2, #0]
 80057dc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057e2:	1c5a      	adds	r2, r3, #1
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	3b01      	subs	r3, #1
 80057f0:	b29a      	uxth	r2, r3
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80057f6:	2300      	movs	r3, #0
 80057f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	f003 0301 	and.w	r3, r3, #1
 8005804:	2b01      	cmp	r3, #1
 8005806:	d119      	bne.n	800583c <HAL_SPI_TransmitReceive+0x2ae>
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800580c:	b29b      	uxth	r3, r3
 800580e:	2b00      	cmp	r3, #0
 8005810:	d014      	beq.n	800583c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	68da      	ldr	r2, [r3, #12]
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800581c:	b2d2      	uxtb	r2, r2
 800581e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005824:	1c5a      	adds	r2, r3, #1
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800582e:	b29b      	uxth	r3, r3
 8005830:	3b01      	subs	r3, #1
 8005832:	b29a      	uxth	r2, r3
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005838:	2301      	movs	r3, #1
 800583a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800583c:	f7fc fde2 	bl	8002404 <HAL_GetTick>
 8005840:	4602      	mov	r2, r0
 8005842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005844:	1ad3      	subs	r3, r2, r3
 8005846:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005848:	429a      	cmp	r2, r3
 800584a:	d803      	bhi.n	8005854 <HAL_SPI_TransmitReceive+0x2c6>
 800584c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800584e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005852:	d102      	bne.n	800585a <HAL_SPI_TransmitReceive+0x2cc>
 8005854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005856:	2b00      	cmp	r3, #0
 8005858:	d103      	bne.n	8005862 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800585a:	2303      	movs	r3, #3
 800585c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005860:	e029      	b.n	80058b6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005866:	b29b      	uxth	r3, r3
 8005868:	2b00      	cmp	r3, #0
 800586a:	d1a2      	bne.n	80057b2 <HAL_SPI_TransmitReceive+0x224>
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005870:	b29b      	uxth	r3, r3
 8005872:	2b00      	cmp	r3, #0
 8005874:	d19d      	bne.n	80057b2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005876:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005878:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800587a:	68f8      	ldr	r0, [r7, #12]
 800587c:	f000 f8f8 	bl	8005a70 <SPI_EndRxTxTransaction>
 8005880:	4603      	mov	r3, r0
 8005882:	2b00      	cmp	r3, #0
 8005884:	d006      	beq.n	8005894 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005886:	2301      	movs	r3, #1
 8005888:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2220      	movs	r2, #32
 8005890:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005892:	e010      	b.n	80058b6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	689b      	ldr	r3, [r3, #8]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d10b      	bne.n	80058b4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800589c:	2300      	movs	r3, #0
 800589e:	617b      	str	r3, [r7, #20]
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	68db      	ldr	r3, [r3, #12]
 80058a6:	617b      	str	r3, [r7, #20]
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	617b      	str	r3, [r7, #20]
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	e000      	b.n	80058b6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80058b4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2201      	movs	r2, #1
 80058ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2200      	movs	r2, #0
 80058c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80058c6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	3730      	adds	r7, #48	; 0x30
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}

080058d2 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80058d2:	b580      	push	{r7, lr}
 80058d4:	b084      	sub	sp, #16
 80058d6:	af00      	add	r7, sp, #0
 80058d8:	60f8      	str	r0, [r7, #12]
 80058da:	60b9      	str	r1, [r7, #8]
 80058dc:	603b      	str	r3, [r7, #0]
 80058de:	4613      	mov	r3, r2
 80058e0:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80058e2:	e04c      	b.n	800597e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058ea:	d048      	beq.n	800597e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80058ec:	f7fc fd8a 	bl	8002404 <HAL_GetTick>
 80058f0:	4602      	mov	r2, r0
 80058f2:	69bb      	ldr	r3, [r7, #24]
 80058f4:	1ad3      	subs	r3, r2, r3
 80058f6:	683a      	ldr	r2, [r7, #0]
 80058f8:	429a      	cmp	r2, r3
 80058fa:	d902      	bls.n	8005902 <SPI_WaitFlagStateUntilTimeout+0x30>
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d13d      	bne.n	800597e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	685a      	ldr	r2, [r3, #4]
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005910:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800591a:	d111      	bne.n	8005940 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	689b      	ldr	r3, [r3, #8]
 8005920:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005924:	d004      	beq.n	8005930 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	689b      	ldr	r3, [r3, #8]
 800592a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800592e:	d107      	bne.n	8005940 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	681a      	ldr	r2, [r3, #0]
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800593e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005944:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005948:	d10f      	bne.n	800596a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	681a      	ldr	r2, [r3, #0]
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005958:	601a      	str	r2, [r3, #0]
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005968:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2201      	movs	r2, #1
 800596e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2200      	movs	r2, #0
 8005976:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800597a:	2303      	movs	r3, #3
 800597c:	e00f      	b.n	800599e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	689a      	ldr	r2, [r3, #8]
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	4013      	ands	r3, r2
 8005988:	68ba      	ldr	r2, [r7, #8]
 800598a:	429a      	cmp	r2, r3
 800598c:	bf0c      	ite	eq
 800598e:	2301      	moveq	r3, #1
 8005990:	2300      	movne	r3, #0
 8005992:	b2db      	uxtb	r3, r3
 8005994:	461a      	mov	r2, r3
 8005996:	79fb      	ldrb	r3, [r7, #7]
 8005998:	429a      	cmp	r2, r3
 800599a:	d1a3      	bne.n	80058e4 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800599c:	2300      	movs	r3, #0
}
 800599e:	4618      	mov	r0, r3
 80059a0:	3710      	adds	r7, #16
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}

080059a6 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80059a6:	b580      	push	{r7, lr}
 80059a8:	b086      	sub	sp, #24
 80059aa:	af02      	add	r7, sp, #8
 80059ac:	60f8      	str	r0, [r7, #12]
 80059ae:	60b9      	str	r1, [r7, #8]
 80059b0:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80059ba:	d111      	bne.n	80059e0 <SPI_EndRxTransaction+0x3a>
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059c4:	d004      	beq.n	80059d0 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059ce:	d107      	bne.n	80059e0 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	681a      	ldr	r2, [r3, #0]
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059de:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80059e8:	d12a      	bne.n	8005a40 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059f2:	d012      	beq.n	8005a1a <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	9300      	str	r3, [sp, #0]
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	2200      	movs	r2, #0
 80059fc:	2180      	movs	r1, #128	; 0x80
 80059fe:	68f8      	ldr	r0, [r7, #12]
 8005a00:	f7ff ff67 	bl	80058d2 <SPI_WaitFlagStateUntilTimeout>
 8005a04:	4603      	mov	r3, r0
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d02d      	beq.n	8005a66 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a0e:	f043 0220 	orr.w	r2, r3, #32
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005a16:	2303      	movs	r3, #3
 8005a18:	e026      	b.n	8005a68 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	9300      	str	r3, [sp, #0]
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	2200      	movs	r2, #0
 8005a22:	2101      	movs	r1, #1
 8005a24:	68f8      	ldr	r0, [r7, #12]
 8005a26:	f7ff ff54 	bl	80058d2 <SPI_WaitFlagStateUntilTimeout>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d01a      	beq.n	8005a66 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a34:	f043 0220 	orr.w	r2, r3, #32
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005a3c:	2303      	movs	r3, #3
 8005a3e:	e013      	b.n	8005a68 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	9300      	str	r3, [sp, #0]
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	2200      	movs	r2, #0
 8005a48:	2101      	movs	r1, #1
 8005a4a:	68f8      	ldr	r0, [r7, #12]
 8005a4c:	f7ff ff41 	bl	80058d2 <SPI_WaitFlagStateUntilTimeout>
 8005a50:	4603      	mov	r3, r0
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d007      	beq.n	8005a66 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a5a:	f043 0220 	orr.w	r2, r3, #32
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005a62:	2303      	movs	r3, #3
 8005a64:	e000      	b.n	8005a68 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005a66:	2300      	movs	r3, #0
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	3710      	adds	r7, #16
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}

08005a70 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b088      	sub	sp, #32
 8005a74:	af02      	add	r7, sp, #8
 8005a76:	60f8      	str	r0, [r7, #12]
 8005a78:	60b9      	str	r1, [r7, #8]
 8005a7a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005a7c:	4b1b      	ldr	r3, [pc, #108]	; (8005aec <SPI_EndRxTxTransaction+0x7c>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a1b      	ldr	r2, [pc, #108]	; (8005af0 <SPI_EndRxTxTransaction+0x80>)
 8005a82:	fba2 2303 	umull	r2, r3, r2, r3
 8005a86:	0d5b      	lsrs	r3, r3, #21
 8005a88:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005a8c:	fb02 f303 	mul.w	r3, r2, r3
 8005a90:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a9a:	d112      	bne.n	8005ac2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	9300      	str	r3, [sp, #0]
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	2180      	movs	r1, #128	; 0x80
 8005aa6:	68f8      	ldr	r0, [r7, #12]
 8005aa8:	f7ff ff13 	bl	80058d2 <SPI_WaitFlagStateUntilTimeout>
 8005aac:	4603      	mov	r3, r0
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d016      	beq.n	8005ae0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ab6:	f043 0220 	orr.w	r2, r3, #32
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005abe:	2303      	movs	r3, #3
 8005ac0:	e00f      	b.n	8005ae2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d00a      	beq.n	8005ade <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	3b01      	subs	r3, #1
 8005acc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ad8:	2b80      	cmp	r3, #128	; 0x80
 8005ada:	d0f2      	beq.n	8005ac2 <SPI_EndRxTxTransaction+0x52>
 8005adc:	e000      	b.n	8005ae0 <SPI_EndRxTxTransaction+0x70>
        break;
 8005ade:	bf00      	nop
  }

  return HAL_OK;
 8005ae0:	2300      	movs	r3, #0
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3718      	adds	r7, #24
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}
 8005aea:	bf00      	nop
 8005aec:	200000a0 	.word	0x200000a0
 8005af0:	165e9f81 	.word	0x165e9f81

08005af4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b086      	sub	sp, #24
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
 8005afc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d101      	bne.n	8005b08 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005b04:	2301      	movs	r3, #1
 8005b06:	e083      	b.n	8005c10 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b0e:	b2db      	uxtb	r3, r3
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d106      	bne.n	8005b22 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2200      	movs	r2, #0
 8005b18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005b1c:	6878      	ldr	r0, [r7, #4]
 8005b1e:	f7fc f8af 	bl	8001c80 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2202      	movs	r2, #2
 8005b26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	687a      	ldr	r2, [r7, #4]
 8005b32:	6812      	ldr	r2, [r2, #0]
 8005b34:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b38:	f023 0307 	bic.w	r3, r3, #7
 8005b3c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681a      	ldr	r2, [r3, #0]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	3304      	adds	r3, #4
 8005b46:	4619      	mov	r1, r3
 8005b48:	4610      	mov	r0, r2
 8005b4a:	f000 f9ed 	bl	8005f28 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	689b      	ldr	r3, [r3, #8]
 8005b54:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	699b      	ldr	r3, [r3, #24]
 8005b5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	6a1b      	ldr	r3, [r3, #32]
 8005b64:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	697a      	ldr	r2, [r7, #20]
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b76:	f023 0303 	bic.w	r3, r3, #3
 8005b7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	689a      	ldr	r2, [r3, #8]
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	699b      	ldr	r3, [r3, #24]
 8005b84:	021b      	lsls	r3, r3, #8
 8005b86:	4313      	orrs	r3, r2
 8005b88:	693a      	ldr	r2, [r7, #16]
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005b94:	f023 030c 	bic.w	r3, r3, #12
 8005b98:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005ba0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ba4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	68da      	ldr	r2, [r3, #12]
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	69db      	ldr	r3, [r3, #28]
 8005bae:	021b      	lsls	r3, r3, #8
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	693a      	ldr	r2, [r7, #16]
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	691b      	ldr	r3, [r3, #16]
 8005bbc:	011a      	lsls	r2, r3, #4
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	6a1b      	ldr	r3, [r3, #32]
 8005bc2:	031b      	lsls	r3, r3, #12
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	693a      	ldr	r2, [r7, #16]
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005bd2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005bda:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	685a      	ldr	r2, [r3, #4]
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	695b      	ldr	r3, [r3, #20]
 8005be4:	011b      	lsls	r3, r3, #4
 8005be6:	4313      	orrs	r3, r2
 8005be8:	68fa      	ldr	r2, [r7, #12]
 8005bea:	4313      	orrs	r3, r2
 8005bec:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	697a      	ldr	r2, [r7, #20]
 8005bf4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	693a      	ldr	r2, [r7, #16]
 8005bfc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	68fa      	ldr	r2, [r7, #12]
 8005c04:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2201      	movs	r2, #1
 8005c0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c0e:	2300      	movs	r3, #0
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3718      	adds	r7, #24
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}

08005c18 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b082      	sub	sp, #8
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
 8005c20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d002      	beq.n	8005c2e <HAL_TIM_Encoder_Start_IT+0x16>
 8005c28:	2b04      	cmp	r3, #4
 8005c2a:	d010      	beq.n	8005c4e <HAL_TIM_Encoder_Start_IT+0x36>
 8005c2c:	e01f      	b.n	8005c6e <HAL_TIM_Encoder_Start_IT+0x56>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	2201      	movs	r2, #1
 8005c34:	2100      	movs	r1, #0
 8005c36:	4618      	mov	r0, r3
 8005c38:	f000 f9f6 	bl	8006028 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	68da      	ldr	r2, [r3, #12]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f042 0202 	orr.w	r2, r2, #2
 8005c4a:	60da      	str	r2, [r3, #12]
      break;
 8005c4c:	e02e      	b.n	8005cac <HAL_TIM_Encoder_Start_IT+0x94>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	2201      	movs	r2, #1
 8005c54:	2104      	movs	r1, #4
 8005c56:	4618      	mov	r0, r3
 8005c58:	f000 f9e6 	bl	8006028 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	68da      	ldr	r2, [r3, #12]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f042 0204 	orr.w	r2, r2, #4
 8005c6a:	60da      	str	r2, [r3, #12]
      break;
 8005c6c:	e01e      	b.n	8005cac <HAL_TIM_Encoder_Start_IT+0x94>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	2201      	movs	r2, #1
 8005c74:	2100      	movs	r1, #0
 8005c76:	4618      	mov	r0, r3
 8005c78:	f000 f9d6 	bl	8006028 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	2201      	movs	r2, #1
 8005c82:	2104      	movs	r1, #4
 8005c84:	4618      	mov	r0, r3
 8005c86:	f000 f9cf 	bl	8006028 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	68da      	ldr	r2, [r3, #12]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f042 0202 	orr.w	r2, r2, #2
 8005c98:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	68da      	ldr	r2, [r3, #12]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f042 0204 	orr.w	r2, r2, #4
 8005ca8:	60da      	str	r2, [r3, #12]
      break;
 8005caa:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	681a      	ldr	r2, [r3, #0]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f042 0201 	orr.w	r2, r2, #1
 8005cba:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005cbc:	2300      	movs	r3, #0
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3708      	adds	r7, #8
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}

08005cc6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005cc6:	b580      	push	{r7, lr}
 8005cc8:	b082      	sub	sp, #8
 8005cca:	af00      	add	r7, sp, #0
 8005ccc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	691b      	ldr	r3, [r3, #16]
 8005cd4:	f003 0302 	and.w	r3, r3, #2
 8005cd8:	2b02      	cmp	r3, #2
 8005cda:	d122      	bne.n	8005d22 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	68db      	ldr	r3, [r3, #12]
 8005ce2:	f003 0302 	and.w	r3, r3, #2
 8005ce6:	2b02      	cmp	r3, #2
 8005ce8:	d11b      	bne.n	8005d22 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f06f 0202 	mvn.w	r2, #2
 8005cf2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	699b      	ldr	r3, [r3, #24]
 8005d00:	f003 0303 	and.w	r3, r3, #3
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d003      	beq.n	8005d10 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	f7fb f8dd 	bl	8000ec8 <HAL_TIM_IC_CaptureCallback>
 8005d0e:	e005      	b.n	8005d1c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f000 f8ea 	bl	8005eea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f000 f8f1 	bl	8005efe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	691b      	ldr	r3, [r3, #16]
 8005d28:	f003 0304 	and.w	r3, r3, #4
 8005d2c:	2b04      	cmp	r3, #4
 8005d2e:	d122      	bne.n	8005d76 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	68db      	ldr	r3, [r3, #12]
 8005d36:	f003 0304 	and.w	r3, r3, #4
 8005d3a:	2b04      	cmp	r3, #4
 8005d3c:	d11b      	bne.n	8005d76 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f06f 0204 	mvn.w	r2, #4
 8005d46:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2202      	movs	r2, #2
 8005d4c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	699b      	ldr	r3, [r3, #24]
 8005d54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d003      	beq.n	8005d64 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d5c:	6878      	ldr	r0, [r7, #4]
 8005d5e:	f7fb f8b3 	bl	8000ec8 <HAL_TIM_IC_CaptureCallback>
 8005d62:	e005      	b.n	8005d70 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d64:	6878      	ldr	r0, [r7, #4]
 8005d66:	f000 f8c0 	bl	8005eea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f000 f8c7 	bl	8005efe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2200      	movs	r2, #0
 8005d74:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	691b      	ldr	r3, [r3, #16]
 8005d7c:	f003 0308 	and.w	r3, r3, #8
 8005d80:	2b08      	cmp	r3, #8
 8005d82:	d122      	bne.n	8005dca <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	68db      	ldr	r3, [r3, #12]
 8005d8a:	f003 0308 	and.w	r3, r3, #8
 8005d8e:	2b08      	cmp	r3, #8
 8005d90:	d11b      	bne.n	8005dca <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f06f 0208 	mvn.w	r2, #8
 8005d9a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2204      	movs	r2, #4
 8005da0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	69db      	ldr	r3, [r3, #28]
 8005da8:	f003 0303 	and.w	r3, r3, #3
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d003      	beq.n	8005db8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005db0:	6878      	ldr	r0, [r7, #4]
 8005db2:	f7fb f889 	bl	8000ec8 <HAL_TIM_IC_CaptureCallback>
 8005db6:	e005      	b.n	8005dc4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	f000 f896 	bl	8005eea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	f000 f89d 	bl	8005efe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	691b      	ldr	r3, [r3, #16]
 8005dd0:	f003 0310 	and.w	r3, r3, #16
 8005dd4:	2b10      	cmp	r3, #16
 8005dd6:	d122      	bne.n	8005e1e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	68db      	ldr	r3, [r3, #12]
 8005dde:	f003 0310 	and.w	r3, r3, #16
 8005de2:	2b10      	cmp	r3, #16
 8005de4:	d11b      	bne.n	8005e1e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f06f 0210 	mvn.w	r2, #16
 8005dee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2208      	movs	r2, #8
 8005df4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	69db      	ldr	r3, [r3, #28]
 8005dfc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d003      	beq.n	8005e0c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	f7fb f85f 	bl	8000ec8 <HAL_TIM_IC_CaptureCallback>
 8005e0a:	e005      	b.n	8005e18 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f000 f86c 	bl	8005eea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	f000 f873 	bl	8005efe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	691b      	ldr	r3, [r3, #16]
 8005e24:	f003 0301 	and.w	r3, r3, #1
 8005e28:	2b01      	cmp	r3, #1
 8005e2a:	d10e      	bne.n	8005e4a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	68db      	ldr	r3, [r3, #12]
 8005e32:	f003 0301 	and.w	r3, r3, #1
 8005e36:	2b01      	cmp	r3, #1
 8005e38:	d107      	bne.n	8005e4a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f06f 0201 	mvn.w	r2, #1
 8005e42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	f000 f846 	bl	8005ed6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	691b      	ldr	r3, [r3, #16]
 8005e50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e54:	2b80      	cmp	r3, #128	; 0x80
 8005e56:	d10e      	bne.n	8005e76 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	68db      	ldr	r3, [r3, #12]
 8005e5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e62:	2b80      	cmp	r3, #128	; 0x80
 8005e64:	d107      	bne.n	8005e76 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005e6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f000 f977 	bl	8006164 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	691b      	ldr	r3, [r3, #16]
 8005e7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e80:	2b40      	cmp	r3, #64	; 0x40
 8005e82:	d10e      	bne.n	8005ea2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	68db      	ldr	r3, [r3, #12]
 8005e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e8e:	2b40      	cmp	r3, #64	; 0x40
 8005e90:	d107      	bne.n	8005ea2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005e9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	f000 f838 	bl	8005f12 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	691b      	ldr	r3, [r3, #16]
 8005ea8:	f003 0320 	and.w	r3, r3, #32
 8005eac:	2b20      	cmp	r3, #32
 8005eae:	d10e      	bne.n	8005ece <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	68db      	ldr	r3, [r3, #12]
 8005eb6:	f003 0320 	and.w	r3, r3, #32
 8005eba:	2b20      	cmp	r3, #32
 8005ebc:	d107      	bne.n	8005ece <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f06f 0220 	mvn.w	r2, #32
 8005ec6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f000 f941 	bl	8006150 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005ece:	bf00      	nop
 8005ed0:	3708      	adds	r7, #8
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}

08005ed6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ed6:	b480      	push	{r7}
 8005ed8:	b083      	sub	sp, #12
 8005eda:	af00      	add	r7, sp, #0
 8005edc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005ede:	bf00      	nop
 8005ee0:	370c      	adds	r7, #12
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee8:	4770      	bx	lr

08005eea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005eea:	b480      	push	{r7}
 8005eec:	b083      	sub	sp, #12
 8005eee:	af00      	add	r7, sp, #0
 8005ef0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ef2:	bf00      	nop
 8005ef4:	370c      	adds	r7, #12
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efc:	4770      	bx	lr

08005efe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005efe:	b480      	push	{r7}
 8005f00:	b083      	sub	sp, #12
 8005f02:	af00      	add	r7, sp, #0
 8005f04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f06:	bf00      	nop
 8005f08:	370c      	adds	r7, #12
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f10:	4770      	bx	lr

08005f12 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005f12:	b480      	push	{r7}
 8005f14:	b083      	sub	sp, #12
 8005f16:	af00      	add	r7, sp, #0
 8005f18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005f1a:	bf00      	nop
 8005f1c:	370c      	adds	r7, #12
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f24:	4770      	bx	lr
	...

08005f28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b085      	sub	sp, #20
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
 8005f30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	4a34      	ldr	r2, [pc, #208]	; (800600c <TIM_Base_SetConfig+0xe4>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d00f      	beq.n	8005f60 <TIM_Base_SetConfig+0x38>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f46:	d00b      	beq.n	8005f60 <TIM_Base_SetConfig+0x38>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	4a31      	ldr	r2, [pc, #196]	; (8006010 <TIM_Base_SetConfig+0xe8>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d007      	beq.n	8005f60 <TIM_Base_SetConfig+0x38>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	4a30      	ldr	r2, [pc, #192]	; (8006014 <TIM_Base_SetConfig+0xec>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d003      	beq.n	8005f60 <TIM_Base_SetConfig+0x38>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	4a2f      	ldr	r2, [pc, #188]	; (8006018 <TIM_Base_SetConfig+0xf0>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d108      	bne.n	8005f72 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	68fa      	ldr	r2, [r7, #12]
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	4a25      	ldr	r2, [pc, #148]	; (800600c <TIM_Base_SetConfig+0xe4>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d01b      	beq.n	8005fb2 <TIM_Base_SetConfig+0x8a>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f80:	d017      	beq.n	8005fb2 <TIM_Base_SetConfig+0x8a>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	4a22      	ldr	r2, [pc, #136]	; (8006010 <TIM_Base_SetConfig+0xe8>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d013      	beq.n	8005fb2 <TIM_Base_SetConfig+0x8a>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	4a21      	ldr	r2, [pc, #132]	; (8006014 <TIM_Base_SetConfig+0xec>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d00f      	beq.n	8005fb2 <TIM_Base_SetConfig+0x8a>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	4a20      	ldr	r2, [pc, #128]	; (8006018 <TIM_Base_SetConfig+0xf0>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d00b      	beq.n	8005fb2 <TIM_Base_SetConfig+0x8a>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	4a1f      	ldr	r2, [pc, #124]	; (800601c <TIM_Base_SetConfig+0xf4>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d007      	beq.n	8005fb2 <TIM_Base_SetConfig+0x8a>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	4a1e      	ldr	r2, [pc, #120]	; (8006020 <TIM_Base_SetConfig+0xf8>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d003      	beq.n	8005fb2 <TIM_Base_SetConfig+0x8a>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	4a1d      	ldr	r2, [pc, #116]	; (8006024 <TIM_Base_SetConfig+0xfc>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d108      	bne.n	8005fc4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	68db      	ldr	r3, [r3, #12]
 8005fbe:	68fa      	ldr	r2, [r7, #12]
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	695b      	ldr	r3, [r3, #20]
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	68fa      	ldr	r2, [r7, #12]
 8005fd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	689a      	ldr	r2, [r3, #8]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	681a      	ldr	r2, [r3, #0]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	4a08      	ldr	r2, [pc, #32]	; (800600c <TIM_Base_SetConfig+0xe4>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d103      	bne.n	8005ff8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	691a      	ldr	r2, [r3, #16]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	615a      	str	r2, [r3, #20]
}
 8005ffe:	bf00      	nop
 8006000:	3714      	adds	r7, #20
 8006002:	46bd      	mov	sp, r7
 8006004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006008:	4770      	bx	lr
 800600a:	bf00      	nop
 800600c:	40010000 	.word	0x40010000
 8006010:	40000400 	.word	0x40000400
 8006014:	40000800 	.word	0x40000800
 8006018:	40000c00 	.word	0x40000c00
 800601c:	40014000 	.word	0x40014000
 8006020:	40014400 	.word	0x40014400
 8006024:	40014800 	.word	0x40014800

08006028 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006028:	b480      	push	{r7}
 800602a:	b087      	sub	sp, #28
 800602c:	af00      	add	r7, sp, #0
 800602e:	60f8      	str	r0, [r7, #12]
 8006030:	60b9      	str	r1, [r7, #8]
 8006032:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	f003 031f 	and.w	r3, r3, #31
 800603a:	2201      	movs	r2, #1
 800603c:	fa02 f303 	lsl.w	r3, r2, r3
 8006040:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	6a1a      	ldr	r2, [r3, #32]
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	43db      	mvns	r3, r3
 800604a:	401a      	ands	r2, r3
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	6a1a      	ldr	r2, [r3, #32]
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	f003 031f 	and.w	r3, r3, #31
 800605a:	6879      	ldr	r1, [r7, #4]
 800605c:	fa01 f303 	lsl.w	r3, r1, r3
 8006060:	431a      	orrs	r2, r3
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	621a      	str	r2, [r3, #32]
}
 8006066:	bf00      	nop
 8006068:	371c      	adds	r7, #28
 800606a:	46bd      	mov	sp, r7
 800606c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006070:	4770      	bx	lr
	...

08006074 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006074:	b480      	push	{r7}
 8006076:	b085      	sub	sp, #20
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
 800607c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006084:	2b01      	cmp	r3, #1
 8006086:	d101      	bne.n	800608c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006088:	2302      	movs	r3, #2
 800608a:	e050      	b.n	800612e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2201      	movs	r2, #1
 8006090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2202      	movs	r2, #2
 8006098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	689b      	ldr	r3, [r3, #8]
 80060aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	68fa      	ldr	r2, [r7, #12]
 80060ba:	4313      	orrs	r3, r2
 80060bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	68fa      	ldr	r2, [r7, #12]
 80060c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a1c      	ldr	r2, [pc, #112]	; (800613c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d018      	beq.n	8006102 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060d8:	d013      	beq.n	8006102 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a18      	ldr	r2, [pc, #96]	; (8006140 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d00e      	beq.n	8006102 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a16      	ldr	r2, [pc, #88]	; (8006144 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d009      	beq.n	8006102 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a15      	ldr	r2, [pc, #84]	; (8006148 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d004      	beq.n	8006102 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a13      	ldr	r2, [pc, #76]	; (800614c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d10c      	bne.n	800611c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006108:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	68ba      	ldr	r2, [r7, #8]
 8006110:	4313      	orrs	r3, r2
 8006112:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	68ba      	ldr	r2, [r7, #8]
 800611a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2201      	movs	r2, #1
 8006120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2200      	movs	r2, #0
 8006128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800612c:	2300      	movs	r3, #0
}
 800612e:	4618      	mov	r0, r3
 8006130:	3714      	adds	r7, #20
 8006132:	46bd      	mov	sp, r7
 8006134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006138:	4770      	bx	lr
 800613a:	bf00      	nop
 800613c:	40010000 	.word	0x40010000
 8006140:	40000400 	.word	0x40000400
 8006144:	40000800 	.word	0x40000800
 8006148:	40000c00 	.word	0x40000c00
 800614c:	40014000 	.word	0x40014000

08006150 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006150:	b480      	push	{r7}
 8006152:	b083      	sub	sp, #12
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006158:	bf00      	nop
 800615a:	370c      	adds	r7, #12
 800615c:	46bd      	mov	sp, r7
 800615e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006162:	4770      	bx	lr

08006164 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006164:	b480      	push	{r7}
 8006166:	b083      	sub	sp, #12
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800616c:	bf00      	nop
 800616e:	370c      	adds	r7, #12
 8006170:	46bd      	mov	sp, r7
 8006172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006176:	4770      	bx	lr

08006178 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006178:	b084      	sub	sp, #16
 800617a:	b580      	push	{r7, lr}
 800617c:	b084      	sub	sp, #16
 800617e:	af00      	add	r7, sp, #0
 8006180:	6078      	str	r0, [r7, #4]
 8006182:	f107 001c 	add.w	r0, r7, #28
 8006186:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800618a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800618c:	2b01      	cmp	r3, #1
 800618e:	d122      	bne.n	80061d6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006194:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	68db      	ldr	r3, [r3, #12]
 80061a0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80061a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061a8:	687a      	ldr	r2, [r7, #4]
 80061aa:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	68db      	ldr	r3, [r3, #12]
 80061b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80061b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061ba:	2b01      	cmp	r3, #1
 80061bc:	d105      	bne.n	80061ca <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	68db      	ldr	r3, [r3, #12]
 80061c2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f001 fac6 	bl	800775c <USB_CoreReset>
 80061d0:	4603      	mov	r3, r0
 80061d2:	73fb      	strb	r3, [r7, #15]
 80061d4:	e01a      	b.n	800620c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	68db      	ldr	r3, [r3, #12]
 80061da:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f001 faba 	bl	800775c <USB_CoreReset>
 80061e8:	4603      	mov	r3, r0
 80061ea:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80061ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d106      	bne.n	8006200 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061f6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	639a      	str	r2, [r3, #56]	; 0x38
 80061fe:	e005      	b.n	800620c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006204:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800620c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800620e:	2b01      	cmp	r3, #1
 8006210:	d10b      	bne.n	800622a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	689b      	ldr	r3, [r3, #8]
 8006216:	f043 0206 	orr.w	r2, r3, #6
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	689b      	ldr	r3, [r3, #8]
 8006222:	f043 0220 	orr.w	r2, r3, #32
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800622a:	7bfb      	ldrb	r3, [r7, #15]
}
 800622c:	4618      	mov	r0, r3
 800622e:	3710      	adds	r7, #16
 8006230:	46bd      	mov	sp, r7
 8006232:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006236:	b004      	add	sp, #16
 8006238:	4770      	bx	lr
	...

0800623c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800623c:	b480      	push	{r7}
 800623e:	b087      	sub	sp, #28
 8006240:	af00      	add	r7, sp, #0
 8006242:	60f8      	str	r0, [r7, #12]
 8006244:	60b9      	str	r1, [r7, #8]
 8006246:	4613      	mov	r3, r2
 8006248:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800624a:	79fb      	ldrb	r3, [r7, #7]
 800624c:	2b02      	cmp	r3, #2
 800624e:	d165      	bne.n	800631c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	4a41      	ldr	r2, [pc, #260]	; (8006358 <USB_SetTurnaroundTime+0x11c>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d906      	bls.n	8006266 <USB_SetTurnaroundTime+0x2a>
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	4a40      	ldr	r2, [pc, #256]	; (800635c <USB_SetTurnaroundTime+0x120>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d802      	bhi.n	8006266 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006260:	230f      	movs	r3, #15
 8006262:	617b      	str	r3, [r7, #20]
 8006264:	e062      	b.n	800632c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	4a3c      	ldr	r2, [pc, #240]	; (800635c <USB_SetTurnaroundTime+0x120>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d906      	bls.n	800627c <USB_SetTurnaroundTime+0x40>
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	4a3b      	ldr	r2, [pc, #236]	; (8006360 <USB_SetTurnaroundTime+0x124>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d802      	bhi.n	800627c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006276:	230e      	movs	r3, #14
 8006278:	617b      	str	r3, [r7, #20]
 800627a:	e057      	b.n	800632c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	4a38      	ldr	r2, [pc, #224]	; (8006360 <USB_SetTurnaroundTime+0x124>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d906      	bls.n	8006292 <USB_SetTurnaroundTime+0x56>
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	4a37      	ldr	r2, [pc, #220]	; (8006364 <USB_SetTurnaroundTime+0x128>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d802      	bhi.n	8006292 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800628c:	230d      	movs	r3, #13
 800628e:	617b      	str	r3, [r7, #20]
 8006290:	e04c      	b.n	800632c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	4a33      	ldr	r2, [pc, #204]	; (8006364 <USB_SetTurnaroundTime+0x128>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d906      	bls.n	80062a8 <USB_SetTurnaroundTime+0x6c>
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	4a32      	ldr	r2, [pc, #200]	; (8006368 <USB_SetTurnaroundTime+0x12c>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d802      	bhi.n	80062a8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80062a2:	230c      	movs	r3, #12
 80062a4:	617b      	str	r3, [r7, #20]
 80062a6:	e041      	b.n	800632c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	4a2f      	ldr	r2, [pc, #188]	; (8006368 <USB_SetTurnaroundTime+0x12c>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d906      	bls.n	80062be <USB_SetTurnaroundTime+0x82>
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	4a2e      	ldr	r2, [pc, #184]	; (800636c <USB_SetTurnaroundTime+0x130>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d802      	bhi.n	80062be <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80062b8:	230b      	movs	r3, #11
 80062ba:	617b      	str	r3, [r7, #20]
 80062bc:	e036      	b.n	800632c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	4a2a      	ldr	r2, [pc, #168]	; (800636c <USB_SetTurnaroundTime+0x130>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d906      	bls.n	80062d4 <USB_SetTurnaroundTime+0x98>
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	4a29      	ldr	r2, [pc, #164]	; (8006370 <USB_SetTurnaroundTime+0x134>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d802      	bhi.n	80062d4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80062ce:	230a      	movs	r3, #10
 80062d0:	617b      	str	r3, [r7, #20]
 80062d2:	e02b      	b.n	800632c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	4a26      	ldr	r2, [pc, #152]	; (8006370 <USB_SetTurnaroundTime+0x134>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d906      	bls.n	80062ea <USB_SetTurnaroundTime+0xae>
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	4a25      	ldr	r2, [pc, #148]	; (8006374 <USB_SetTurnaroundTime+0x138>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d802      	bhi.n	80062ea <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80062e4:	2309      	movs	r3, #9
 80062e6:	617b      	str	r3, [r7, #20]
 80062e8:	e020      	b.n	800632c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	4a21      	ldr	r2, [pc, #132]	; (8006374 <USB_SetTurnaroundTime+0x138>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d906      	bls.n	8006300 <USB_SetTurnaroundTime+0xc4>
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	4a20      	ldr	r2, [pc, #128]	; (8006378 <USB_SetTurnaroundTime+0x13c>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d802      	bhi.n	8006300 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80062fa:	2308      	movs	r3, #8
 80062fc:	617b      	str	r3, [r7, #20]
 80062fe:	e015      	b.n	800632c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	4a1d      	ldr	r2, [pc, #116]	; (8006378 <USB_SetTurnaroundTime+0x13c>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d906      	bls.n	8006316 <USB_SetTurnaroundTime+0xda>
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	4a1c      	ldr	r2, [pc, #112]	; (800637c <USB_SetTurnaroundTime+0x140>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d802      	bhi.n	8006316 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006310:	2307      	movs	r3, #7
 8006312:	617b      	str	r3, [r7, #20]
 8006314:	e00a      	b.n	800632c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006316:	2306      	movs	r3, #6
 8006318:	617b      	str	r3, [r7, #20]
 800631a:	e007      	b.n	800632c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800631c:	79fb      	ldrb	r3, [r7, #7]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d102      	bne.n	8006328 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006322:	2309      	movs	r3, #9
 8006324:	617b      	str	r3, [r7, #20]
 8006326:	e001      	b.n	800632c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006328:	2309      	movs	r3, #9
 800632a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	68db      	ldr	r3, [r3, #12]
 8006330:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	68da      	ldr	r2, [r3, #12]
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	029b      	lsls	r3, r3, #10
 8006340:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006344:	431a      	orrs	r2, r3
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800634a:	2300      	movs	r3, #0
}
 800634c:	4618      	mov	r0, r3
 800634e:	371c      	adds	r7, #28
 8006350:	46bd      	mov	sp, r7
 8006352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006356:	4770      	bx	lr
 8006358:	00d8acbf 	.word	0x00d8acbf
 800635c:	00e4e1bf 	.word	0x00e4e1bf
 8006360:	00f423ff 	.word	0x00f423ff
 8006364:	0106737f 	.word	0x0106737f
 8006368:	011a499f 	.word	0x011a499f
 800636c:	01312cff 	.word	0x01312cff
 8006370:	014ca43f 	.word	0x014ca43f
 8006374:	016e35ff 	.word	0x016e35ff
 8006378:	01a6ab1f 	.word	0x01a6ab1f
 800637c:	01e847ff 	.word	0x01e847ff

08006380 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006380:	b480      	push	{r7}
 8006382:	b083      	sub	sp, #12
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	689b      	ldr	r3, [r3, #8]
 800638c:	f043 0201 	orr.w	r2, r3, #1
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006394:	2300      	movs	r3, #0
}
 8006396:	4618      	mov	r0, r3
 8006398:	370c      	adds	r7, #12
 800639a:	46bd      	mov	sp, r7
 800639c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a0:	4770      	bx	lr

080063a2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80063a2:	b480      	push	{r7}
 80063a4:	b083      	sub	sp, #12
 80063a6:	af00      	add	r7, sp, #0
 80063a8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	689b      	ldr	r3, [r3, #8]
 80063ae:	f023 0201 	bic.w	r2, r3, #1
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80063b6:	2300      	movs	r3, #0
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	370c      	adds	r7, #12
 80063bc:	46bd      	mov	sp, r7
 80063be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c2:	4770      	bx	lr

080063c4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b082      	sub	sp, #8
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
 80063cc:	460b      	mov	r3, r1
 80063ce:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	68db      	ldr	r3, [r3, #12]
 80063d4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80063dc:	78fb      	ldrb	r3, [r7, #3]
 80063de:	2b01      	cmp	r3, #1
 80063e0:	d106      	bne.n	80063f0 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	68db      	ldr	r3, [r3, #12]
 80063e6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	60da      	str	r2, [r3, #12]
 80063ee:	e00b      	b.n	8006408 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80063f0:	78fb      	ldrb	r3, [r7, #3]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d106      	bne.n	8006404 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	68db      	ldr	r3, [r3, #12]
 80063fa:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	60da      	str	r2, [r3, #12]
 8006402:	e001      	b.n	8006408 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006404:	2301      	movs	r3, #1
 8006406:	e003      	b.n	8006410 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006408:	2032      	movs	r0, #50	; 0x32
 800640a:	f7fc f807 	bl	800241c <HAL_Delay>

  return HAL_OK;
 800640e:	2300      	movs	r3, #0
}
 8006410:	4618      	mov	r0, r3
 8006412:	3708      	adds	r7, #8
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}

08006418 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006418:	b084      	sub	sp, #16
 800641a:	b580      	push	{r7, lr}
 800641c:	b086      	sub	sp, #24
 800641e:	af00      	add	r7, sp, #0
 8006420:	6078      	str	r0, [r7, #4]
 8006422:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006426:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800642a:	2300      	movs	r3, #0
 800642c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006432:	2300      	movs	r3, #0
 8006434:	613b      	str	r3, [r7, #16]
 8006436:	e009      	b.n	800644c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006438:	687a      	ldr	r2, [r7, #4]
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	3340      	adds	r3, #64	; 0x40
 800643e:	009b      	lsls	r3, r3, #2
 8006440:	4413      	add	r3, r2
 8006442:	2200      	movs	r2, #0
 8006444:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	3301      	adds	r3, #1
 800644a:	613b      	str	r3, [r7, #16]
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	2b0e      	cmp	r3, #14
 8006450:	d9f2      	bls.n	8006438 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006452:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006454:	2b00      	cmp	r3, #0
 8006456:	d11c      	bne.n	8006492 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	68fa      	ldr	r2, [r7, #12]
 8006462:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006466:	f043 0302 	orr.w	r3, r3, #2
 800646a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006470:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800647c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006488:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	639a      	str	r2, [r3, #56]	; 0x38
 8006490:	e00b      	b.n	80064aa <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006496:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064a2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80064b0:	461a      	mov	r2, r3
 80064b2:	2300      	movs	r3, #0
 80064b4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064bc:	4619      	mov	r1, r3
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064c4:	461a      	mov	r2, r3
 80064c6:	680b      	ldr	r3, [r1, #0]
 80064c8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80064ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064cc:	2b01      	cmp	r3, #1
 80064ce:	d10c      	bne.n	80064ea <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80064d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d104      	bne.n	80064e0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80064d6:	2100      	movs	r1, #0
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f000 f949 	bl	8006770 <USB_SetDevSpeed>
 80064de:	e008      	b.n	80064f2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80064e0:	2101      	movs	r1, #1
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f000 f944 	bl	8006770 <USB_SetDevSpeed>
 80064e8:	e003      	b.n	80064f2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80064ea:	2103      	movs	r1, #3
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f000 f93f 	bl	8006770 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80064f2:	2110      	movs	r1, #16
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	f000 f8f3 	bl	80066e0 <USB_FlushTxFifo>
 80064fa:	4603      	mov	r3, r0
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d001      	beq.n	8006504 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8006500:	2301      	movs	r3, #1
 8006502:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	f000 f911 	bl	800672c <USB_FlushRxFifo>
 800650a:	4603      	mov	r3, r0
 800650c:	2b00      	cmp	r3, #0
 800650e:	d001      	beq.n	8006514 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8006510:	2301      	movs	r3, #1
 8006512:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800651a:	461a      	mov	r2, r3
 800651c:	2300      	movs	r3, #0
 800651e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006526:	461a      	mov	r2, r3
 8006528:	2300      	movs	r3, #0
 800652a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006532:	461a      	mov	r2, r3
 8006534:	2300      	movs	r3, #0
 8006536:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006538:	2300      	movs	r3, #0
 800653a:	613b      	str	r3, [r7, #16]
 800653c:	e043      	b.n	80065c6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	015a      	lsls	r2, r3, #5
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	4413      	add	r3, r2
 8006546:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006550:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006554:	d118      	bne.n	8006588 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d10a      	bne.n	8006572 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	015a      	lsls	r2, r3, #5
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	4413      	add	r3, r2
 8006564:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006568:	461a      	mov	r2, r3
 800656a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800656e:	6013      	str	r3, [r2, #0]
 8006570:	e013      	b.n	800659a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006572:	693b      	ldr	r3, [r7, #16]
 8006574:	015a      	lsls	r2, r3, #5
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	4413      	add	r3, r2
 800657a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800657e:	461a      	mov	r2, r3
 8006580:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006584:	6013      	str	r3, [r2, #0]
 8006586:	e008      	b.n	800659a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006588:	693b      	ldr	r3, [r7, #16]
 800658a:	015a      	lsls	r2, r3, #5
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	4413      	add	r3, r2
 8006590:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006594:	461a      	mov	r2, r3
 8006596:	2300      	movs	r3, #0
 8006598:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	015a      	lsls	r2, r3, #5
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	4413      	add	r3, r2
 80065a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065a6:	461a      	mov	r2, r3
 80065a8:	2300      	movs	r3, #0
 80065aa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	015a      	lsls	r2, r3, #5
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	4413      	add	r3, r2
 80065b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065b8:	461a      	mov	r2, r3
 80065ba:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80065be:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	3301      	adds	r3, #1
 80065c4:	613b      	str	r3, [r7, #16]
 80065c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c8:	693a      	ldr	r2, [r7, #16]
 80065ca:	429a      	cmp	r2, r3
 80065cc:	d3b7      	bcc.n	800653e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80065ce:	2300      	movs	r3, #0
 80065d0:	613b      	str	r3, [r7, #16]
 80065d2:	e043      	b.n	800665c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	015a      	lsls	r2, r3, #5
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	4413      	add	r3, r2
 80065dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80065e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065ea:	d118      	bne.n	800661e <USB_DevInit+0x206>
    {
      if (i == 0U)
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d10a      	bne.n	8006608 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	015a      	lsls	r2, r3, #5
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	4413      	add	r3, r2
 80065fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065fe:	461a      	mov	r2, r3
 8006600:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006604:	6013      	str	r3, [r2, #0]
 8006606:	e013      	b.n	8006630 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006608:	693b      	ldr	r3, [r7, #16]
 800660a:	015a      	lsls	r2, r3, #5
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	4413      	add	r3, r2
 8006610:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006614:	461a      	mov	r2, r3
 8006616:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800661a:	6013      	str	r3, [r2, #0]
 800661c:	e008      	b.n	8006630 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	015a      	lsls	r2, r3, #5
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	4413      	add	r3, r2
 8006626:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800662a:	461a      	mov	r2, r3
 800662c:	2300      	movs	r3, #0
 800662e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	015a      	lsls	r2, r3, #5
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	4413      	add	r3, r2
 8006638:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800663c:	461a      	mov	r2, r3
 800663e:	2300      	movs	r3, #0
 8006640:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006642:	693b      	ldr	r3, [r7, #16]
 8006644:	015a      	lsls	r2, r3, #5
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	4413      	add	r3, r2
 800664a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800664e:	461a      	mov	r2, r3
 8006650:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006654:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006656:	693b      	ldr	r3, [r7, #16]
 8006658:	3301      	adds	r3, #1
 800665a:	613b      	str	r3, [r7, #16]
 800665c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800665e:	693a      	ldr	r2, [r7, #16]
 8006660:	429a      	cmp	r2, r3
 8006662:	d3b7      	bcc.n	80065d4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800666a:	691b      	ldr	r3, [r3, #16]
 800666c:	68fa      	ldr	r2, [r7, #12]
 800666e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006672:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006676:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2200      	movs	r2, #0
 800667c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006684:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006688:	2b00      	cmp	r3, #0
 800668a:	d105      	bne.n	8006698 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	699b      	ldr	r3, [r3, #24]
 8006690:	f043 0210 	orr.w	r2, r3, #16
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	699a      	ldr	r2, [r3, #24]
 800669c:	4b0f      	ldr	r3, [pc, #60]	; (80066dc <USB_DevInit+0x2c4>)
 800669e:	4313      	orrs	r3, r2
 80066a0:	687a      	ldr	r2, [r7, #4]
 80066a2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80066a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d005      	beq.n	80066b6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	699b      	ldr	r3, [r3, #24]
 80066ae:	f043 0208 	orr.w	r2, r3, #8
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80066b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066b8:	2b01      	cmp	r3, #1
 80066ba:	d107      	bne.n	80066cc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	699b      	ldr	r3, [r3, #24]
 80066c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80066c4:	f043 0304 	orr.w	r3, r3, #4
 80066c8:	687a      	ldr	r2, [r7, #4]
 80066ca:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80066cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	3718      	adds	r7, #24
 80066d2:	46bd      	mov	sp, r7
 80066d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80066d8:	b004      	add	sp, #16
 80066da:	4770      	bx	lr
 80066dc:	803c3800 	.word	0x803c3800

080066e0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b085      	sub	sp, #20
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
 80066e8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80066ea:	2300      	movs	r3, #0
 80066ec:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	019b      	lsls	r3, r3, #6
 80066f2:	f043 0220 	orr.w	r2, r3, #32
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	3301      	adds	r3, #1
 80066fe:	60fb      	str	r3, [r7, #12]
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	4a09      	ldr	r2, [pc, #36]	; (8006728 <USB_FlushTxFifo+0x48>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d901      	bls.n	800670c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006708:	2303      	movs	r3, #3
 800670a:	e006      	b.n	800671a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	691b      	ldr	r3, [r3, #16]
 8006710:	f003 0320 	and.w	r3, r3, #32
 8006714:	2b20      	cmp	r3, #32
 8006716:	d0f0      	beq.n	80066fa <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006718:	2300      	movs	r3, #0
}
 800671a:	4618      	mov	r0, r3
 800671c:	3714      	adds	r7, #20
 800671e:	46bd      	mov	sp, r7
 8006720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006724:	4770      	bx	lr
 8006726:	bf00      	nop
 8006728:	00030d40 	.word	0x00030d40

0800672c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800672c:	b480      	push	{r7}
 800672e:	b085      	sub	sp, #20
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006734:	2300      	movs	r3, #0
 8006736:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2210      	movs	r2, #16
 800673c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	3301      	adds	r3, #1
 8006742:	60fb      	str	r3, [r7, #12]
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	4a09      	ldr	r2, [pc, #36]	; (800676c <USB_FlushRxFifo+0x40>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d901      	bls.n	8006750 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800674c:	2303      	movs	r3, #3
 800674e:	e006      	b.n	800675e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	691b      	ldr	r3, [r3, #16]
 8006754:	f003 0310 	and.w	r3, r3, #16
 8006758:	2b10      	cmp	r3, #16
 800675a:	d0f0      	beq.n	800673e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800675c:	2300      	movs	r3, #0
}
 800675e:	4618      	mov	r0, r3
 8006760:	3714      	adds	r7, #20
 8006762:	46bd      	mov	sp, r7
 8006764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006768:	4770      	bx	lr
 800676a:	bf00      	nop
 800676c:	00030d40 	.word	0x00030d40

08006770 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006770:	b480      	push	{r7}
 8006772:	b085      	sub	sp, #20
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
 8006778:	460b      	mov	r3, r1
 800677a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006786:	681a      	ldr	r2, [r3, #0]
 8006788:	78fb      	ldrb	r3, [r7, #3]
 800678a:	68f9      	ldr	r1, [r7, #12]
 800678c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006790:	4313      	orrs	r3, r2
 8006792:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006794:	2300      	movs	r3, #0
}
 8006796:	4618      	mov	r0, r3
 8006798:	3714      	adds	r7, #20
 800679a:	46bd      	mov	sp, r7
 800679c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a0:	4770      	bx	lr

080067a2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80067a2:	b480      	push	{r7}
 80067a4:	b087      	sub	sp, #28
 80067a6:	af00      	add	r7, sp, #0
 80067a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067b4:	689b      	ldr	r3, [r3, #8]
 80067b6:	f003 0306 	and.w	r3, r3, #6
 80067ba:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d102      	bne.n	80067c8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80067c2:	2300      	movs	r3, #0
 80067c4:	75fb      	strb	r3, [r7, #23]
 80067c6:	e00a      	b.n	80067de <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	2b02      	cmp	r3, #2
 80067cc:	d002      	beq.n	80067d4 <USB_GetDevSpeed+0x32>
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	2b06      	cmp	r3, #6
 80067d2:	d102      	bne.n	80067da <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80067d4:	2302      	movs	r3, #2
 80067d6:	75fb      	strb	r3, [r7, #23]
 80067d8:	e001      	b.n	80067de <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80067da:	230f      	movs	r3, #15
 80067dc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80067de:	7dfb      	ldrb	r3, [r7, #23]
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	371c      	adds	r7, #28
 80067e4:	46bd      	mov	sp, r7
 80067e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ea:	4770      	bx	lr

080067ec <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b085      	sub	sp, #20
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
 80067f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	781b      	ldrb	r3, [r3, #0]
 80067fe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	785b      	ldrb	r3, [r3, #1]
 8006804:	2b01      	cmp	r3, #1
 8006806:	d13a      	bne.n	800687e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800680e:	69da      	ldr	r2, [r3, #28]
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	781b      	ldrb	r3, [r3, #0]
 8006814:	f003 030f 	and.w	r3, r3, #15
 8006818:	2101      	movs	r1, #1
 800681a:	fa01 f303 	lsl.w	r3, r1, r3
 800681e:	b29b      	uxth	r3, r3
 8006820:	68f9      	ldr	r1, [r7, #12]
 8006822:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006826:	4313      	orrs	r3, r2
 8006828:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	015a      	lsls	r2, r3, #5
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	4413      	add	r3, r2
 8006832:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800683c:	2b00      	cmp	r3, #0
 800683e:	d155      	bne.n	80068ec <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	015a      	lsls	r2, r3, #5
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	4413      	add	r3, r2
 8006848:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800684c:	681a      	ldr	r2, [r3, #0]
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	689b      	ldr	r3, [r3, #8]
 8006852:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	78db      	ldrb	r3, [r3, #3]
 800685a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800685c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	059b      	lsls	r3, r3, #22
 8006862:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006864:	4313      	orrs	r3, r2
 8006866:	68ba      	ldr	r2, [r7, #8]
 8006868:	0151      	lsls	r1, r2, #5
 800686a:	68fa      	ldr	r2, [r7, #12]
 800686c:	440a      	add	r2, r1
 800686e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006872:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006876:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800687a:	6013      	str	r3, [r2, #0]
 800687c:	e036      	b.n	80068ec <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006884:	69da      	ldr	r2, [r3, #28]
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	781b      	ldrb	r3, [r3, #0]
 800688a:	f003 030f 	and.w	r3, r3, #15
 800688e:	2101      	movs	r1, #1
 8006890:	fa01 f303 	lsl.w	r3, r1, r3
 8006894:	041b      	lsls	r3, r3, #16
 8006896:	68f9      	ldr	r1, [r7, #12]
 8006898:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800689c:	4313      	orrs	r3, r2
 800689e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	015a      	lsls	r2, r3, #5
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	4413      	add	r3, r2
 80068a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d11a      	bne.n	80068ec <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	015a      	lsls	r2, r3, #5
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	4413      	add	r3, r2
 80068be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068c2:	681a      	ldr	r2, [r3, #0]
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	689b      	ldr	r3, [r3, #8]
 80068c8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	78db      	ldrb	r3, [r3, #3]
 80068d0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80068d2:	430b      	orrs	r3, r1
 80068d4:	4313      	orrs	r3, r2
 80068d6:	68ba      	ldr	r2, [r7, #8]
 80068d8:	0151      	lsls	r1, r2, #5
 80068da:	68fa      	ldr	r2, [r7, #12]
 80068dc:	440a      	add	r2, r1
 80068de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068ea:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80068ec:	2300      	movs	r3, #0
}
 80068ee:	4618      	mov	r0, r3
 80068f0:	3714      	adds	r7, #20
 80068f2:	46bd      	mov	sp, r7
 80068f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f8:	4770      	bx	lr
	...

080068fc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b085      	sub	sp, #20
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
 8006904:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	781b      	ldrb	r3, [r3, #0]
 800690e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	785b      	ldrb	r3, [r3, #1]
 8006914:	2b01      	cmp	r3, #1
 8006916:	d161      	bne.n	80069dc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	015a      	lsls	r2, r3, #5
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	4413      	add	r3, r2
 8006920:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800692a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800692e:	d11f      	bne.n	8006970 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	015a      	lsls	r2, r3, #5
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	4413      	add	r3, r2
 8006938:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	68ba      	ldr	r2, [r7, #8]
 8006940:	0151      	lsls	r1, r2, #5
 8006942:	68fa      	ldr	r2, [r7, #12]
 8006944:	440a      	add	r2, r1
 8006946:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800694a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800694e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	015a      	lsls	r2, r3, #5
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	4413      	add	r3, r2
 8006958:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	68ba      	ldr	r2, [r7, #8]
 8006960:	0151      	lsls	r1, r2, #5
 8006962:	68fa      	ldr	r2, [r7, #12]
 8006964:	440a      	add	r2, r1
 8006966:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800696a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800696e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006976:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	781b      	ldrb	r3, [r3, #0]
 800697c:	f003 030f 	and.w	r3, r3, #15
 8006980:	2101      	movs	r1, #1
 8006982:	fa01 f303 	lsl.w	r3, r1, r3
 8006986:	b29b      	uxth	r3, r3
 8006988:	43db      	mvns	r3, r3
 800698a:	68f9      	ldr	r1, [r7, #12]
 800698c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006990:	4013      	ands	r3, r2
 8006992:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800699a:	69da      	ldr	r2, [r3, #28]
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	781b      	ldrb	r3, [r3, #0]
 80069a0:	f003 030f 	and.w	r3, r3, #15
 80069a4:	2101      	movs	r1, #1
 80069a6:	fa01 f303 	lsl.w	r3, r1, r3
 80069aa:	b29b      	uxth	r3, r3
 80069ac:	43db      	mvns	r3, r3
 80069ae:	68f9      	ldr	r1, [r7, #12]
 80069b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80069b4:	4013      	ands	r3, r2
 80069b6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	015a      	lsls	r2, r3, #5
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	4413      	add	r3, r2
 80069c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069c4:	681a      	ldr	r2, [r3, #0]
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	0159      	lsls	r1, r3, #5
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	440b      	add	r3, r1
 80069ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069d2:	4619      	mov	r1, r3
 80069d4:	4b35      	ldr	r3, [pc, #212]	; (8006aac <USB_DeactivateEndpoint+0x1b0>)
 80069d6:	4013      	ands	r3, r2
 80069d8:	600b      	str	r3, [r1, #0]
 80069da:	e060      	b.n	8006a9e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	015a      	lsls	r2, r3, #5
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	4413      	add	r3, r2
 80069e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80069ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80069f2:	d11f      	bne.n	8006a34 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	015a      	lsls	r2, r3, #5
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	4413      	add	r3, r2
 80069fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	68ba      	ldr	r2, [r7, #8]
 8006a04:	0151      	lsls	r1, r2, #5
 8006a06:	68fa      	ldr	r2, [r7, #12]
 8006a08:	440a      	add	r2, r1
 8006a0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a0e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006a12:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	015a      	lsls	r2, r3, #5
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	4413      	add	r3, r2
 8006a1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	68ba      	ldr	r2, [r7, #8]
 8006a24:	0151      	lsls	r1, r2, #5
 8006a26:	68fa      	ldr	r2, [r7, #12]
 8006a28:	440a      	add	r2, r1
 8006a2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a2e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a32:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	781b      	ldrb	r3, [r3, #0]
 8006a40:	f003 030f 	and.w	r3, r3, #15
 8006a44:	2101      	movs	r1, #1
 8006a46:	fa01 f303 	lsl.w	r3, r1, r3
 8006a4a:	041b      	lsls	r3, r3, #16
 8006a4c:	43db      	mvns	r3, r3
 8006a4e:	68f9      	ldr	r1, [r7, #12]
 8006a50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a54:	4013      	ands	r3, r2
 8006a56:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a5e:	69da      	ldr	r2, [r3, #28]
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	781b      	ldrb	r3, [r3, #0]
 8006a64:	f003 030f 	and.w	r3, r3, #15
 8006a68:	2101      	movs	r1, #1
 8006a6a:	fa01 f303 	lsl.w	r3, r1, r3
 8006a6e:	041b      	lsls	r3, r3, #16
 8006a70:	43db      	mvns	r3, r3
 8006a72:	68f9      	ldr	r1, [r7, #12]
 8006a74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a78:	4013      	ands	r3, r2
 8006a7a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	015a      	lsls	r2, r3, #5
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	4413      	add	r3, r2
 8006a84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a88:	681a      	ldr	r2, [r3, #0]
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	0159      	lsls	r1, r3, #5
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	440b      	add	r3, r1
 8006a92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a96:	4619      	mov	r1, r3
 8006a98:	4b05      	ldr	r3, [pc, #20]	; (8006ab0 <USB_DeactivateEndpoint+0x1b4>)
 8006a9a:	4013      	ands	r3, r2
 8006a9c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006a9e:	2300      	movs	r3, #0
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	3714      	adds	r7, #20
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aaa:	4770      	bx	lr
 8006aac:	ec337800 	.word	0xec337800
 8006ab0:	eff37800 	.word	0xeff37800

08006ab4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b08a      	sub	sp, #40	; 0x28
 8006ab8:	af02      	add	r7, sp, #8
 8006aba:	60f8      	str	r0, [r7, #12]
 8006abc:	60b9      	str	r1, [r7, #8]
 8006abe:	4613      	mov	r3, r2
 8006ac0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	781b      	ldrb	r3, [r3, #0]
 8006aca:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	785b      	ldrb	r3, [r3, #1]
 8006ad0:	2b01      	cmp	r3, #1
 8006ad2:	f040 815c 	bne.w	8006d8e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	695b      	ldr	r3, [r3, #20]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d132      	bne.n	8006b44 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006ade:	69bb      	ldr	r3, [r7, #24]
 8006ae0:	015a      	lsls	r2, r3, #5
 8006ae2:	69fb      	ldr	r3, [r7, #28]
 8006ae4:	4413      	add	r3, r2
 8006ae6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006aea:	691b      	ldr	r3, [r3, #16]
 8006aec:	69ba      	ldr	r2, [r7, #24]
 8006aee:	0151      	lsls	r1, r2, #5
 8006af0:	69fa      	ldr	r2, [r7, #28]
 8006af2:	440a      	add	r2, r1
 8006af4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006af8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006afc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006b00:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006b02:	69bb      	ldr	r3, [r7, #24]
 8006b04:	015a      	lsls	r2, r3, #5
 8006b06:	69fb      	ldr	r3, [r7, #28]
 8006b08:	4413      	add	r3, r2
 8006b0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b0e:	691b      	ldr	r3, [r3, #16]
 8006b10:	69ba      	ldr	r2, [r7, #24]
 8006b12:	0151      	lsls	r1, r2, #5
 8006b14:	69fa      	ldr	r2, [r7, #28]
 8006b16:	440a      	add	r2, r1
 8006b18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b1c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006b20:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006b22:	69bb      	ldr	r3, [r7, #24]
 8006b24:	015a      	lsls	r2, r3, #5
 8006b26:	69fb      	ldr	r3, [r7, #28]
 8006b28:	4413      	add	r3, r2
 8006b2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b2e:	691b      	ldr	r3, [r3, #16]
 8006b30:	69ba      	ldr	r2, [r7, #24]
 8006b32:	0151      	lsls	r1, r2, #5
 8006b34:	69fa      	ldr	r2, [r7, #28]
 8006b36:	440a      	add	r2, r1
 8006b38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b3c:	0cdb      	lsrs	r3, r3, #19
 8006b3e:	04db      	lsls	r3, r3, #19
 8006b40:	6113      	str	r3, [r2, #16]
 8006b42:	e074      	b.n	8006c2e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006b44:	69bb      	ldr	r3, [r7, #24]
 8006b46:	015a      	lsls	r2, r3, #5
 8006b48:	69fb      	ldr	r3, [r7, #28]
 8006b4a:	4413      	add	r3, r2
 8006b4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b50:	691b      	ldr	r3, [r3, #16]
 8006b52:	69ba      	ldr	r2, [r7, #24]
 8006b54:	0151      	lsls	r1, r2, #5
 8006b56:	69fa      	ldr	r2, [r7, #28]
 8006b58:	440a      	add	r2, r1
 8006b5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b5e:	0cdb      	lsrs	r3, r3, #19
 8006b60:	04db      	lsls	r3, r3, #19
 8006b62:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006b64:	69bb      	ldr	r3, [r7, #24]
 8006b66:	015a      	lsls	r2, r3, #5
 8006b68:	69fb      	ldr	r3, [r7, #28]
 8006b6a:	4413      	add	r3, r2
 8006b6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b70:	691b      	ldr	r3, [r3, #16]
 8006b72:	69ba      	ldr	r2, [r7, #24]
 8006b74:	0151      	lsls	r1, r2, #5
 8006b76:	69fa      	ldr	r2, [r7, #28]
 8006b78:	440a      	add	r2, r1
 8006b7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b7e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006b82:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006b86:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006b88:	69bb      	ldr	r3, [r7, #24]
 8006b8a:	015a      	lsls	r2, r3, #5
 8006b8c:	69fb      	ldr	r3, [r7, #28]
 8006b8e:	4413      	add	r3, r2
 8006b90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b94:	691a      	ldr	r2, [r3, #16]
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	6959      	ldr	r1, [r3, #20]
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	689b      	ldr	r3, [r3, #8]
 8006b9e:	440b      	add	r3, r1
 8006ba0:	1e59      	subs	r1, r3, #1
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	689b      	ldr	r3, [r3, #8]
 8006ba6:	fbb1 f3f3 	udiv	r3, r1, r3
 8006baa:	04d9      	lsls	r1, r3, #19
 8006bac:	4b9d      	ldr	r3, [pc, #628]	; (8006e24 <USB_EPStartXfer+0x370>)
 8006bae:	400b      	ands	r3, r1
 8006bb0:	69b9      	ldr	r1, [r7, #24]
 8006bb2:	0148      	lsls	r0, r1, #5
 8006bb4:	69f9      	ldr	r1, [r7, #28]
 8006bb6:	4401      	add	r1, r0
 8006bb8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006bc0:	69bb      	ldr	r3, [r7, #24]
 8006bc2:	015a      	lsls	r2, r3, #5
 8006bc4:	69fb      	ldr	r3, [r7, #28]
 8006bc6:	4413      	add	r3, r2
 8006bc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bcc:	691a      	ldr	r2, [r3, #16]
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	695b      	ldr	r3, [r3, #20]
 8006bd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006bd6:	69b9      	ldr	r1, [r7, #24]
 8006bd8:	0148      	lsls	r0, r1, #5
 8006bda:	69f9      	ldr	r1, [r7, #28]
 8006bdc:	4401      	add	r1, r0
 8006bde:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006be2:	4313      	orrs	r3, r2
 8006be4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	78db      	ldrb	r3, [r3, #3]
 8006bea:	2b01      	cmp	r3, #1
 8006bec:	d11f      	bne.n	8006c2e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006bee:	69bb      	ldr	r3, [r7, #24]
 8006bf0:	015a      	lsls	r2, r3, #5
 8006bf2:	69fb      	ldr	r3, [r7, #28]
 8006bf4:	4413      	add	r3, r2
 8006bf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bfa:	691b      	ldr	r3, [r3, #16]
 8006bfc:	69ba      	ldr	r2, [r7, #24]
 8006bfe:	0151      	lsls	r1, r2, #5
 8006c00:	69fa      	ldr	r2, [r7, #28]
 8006c02:	440a      	add	r2, r1
 8006c04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c08:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006c0c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006c0e:	69bb      	ldr	r3, [r7, #24]
 8006c10:	015a      	lsls	r2, r3, #5
 8006c12:	69fb      	ldr	r3, [r7, #28]
 8006c14:	4413      	add	r3, r2
 8006c16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c1a:	691b      	ldr	r3, [r3, #16]
 8006c1c:	69ba      	ldr	r2, [r7, #24]
 8006c1e:	0151      	lsls	r1, r2, #5
 8006c20:	69fa      	ldr	r2, [r7, #28]
 8006c22:	440a      	add	r2, r1
 8006c24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c28:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006c2c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006c2e:	79fb      	ldrb	r3, [r7, #7]
 8006c30:	2b01      	cmp	r3, #1
 8006c32:	d14b      	bne.n	8006ccc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	691b      	ldr	r3, [r3, #16]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d009      	beq.n	8006c50 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006c3c:	69bb      	ldr	r3, [r7, #24]
 8006c3e:	015a      	lsls	r2, r3, #5
 8006c40:	69fb      	ldr	r3, [r7, #28]
 8006c42:	4413      	add	r3, r2
 8006c44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c48:	461a      	mov	r2, r3
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	691b      	ldr	r3, [r3, #16]
 8006c4e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	78db      	ldrb	r3, [r3, #3]
 8006c54:	2b01      	cmp	r3, #1
 8006c56:	d128      	bne.n	8006caa <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006c58:	69fb      	ldr	r3, [r7, #28]
 8006c5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c5e:	689b      	ldr	r3, [r3, #8]
 8006c60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d110      	bne.n	8006c8a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006c68:	69bb      	ldr	r3, [r7, #24]
 8006c6a:	015a      	lsls	r2, r3, #5
 8006c6c:	69fb      	ldr	r3, [r7, #28]
 8006c6e:	4413      	add	r3, r2
 8006c70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	69ba      	ldr	r2, [r7, #24]
 8006c78:	0151      	lsls	r1, r2, #5
 8006c7a:	69fa      	ldr	r2, [r7, #28]
 8006c7c:	440a      	add	r2, r1
 8006c7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c82:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006c86:	6013      	str	r3, [r2, #0]
 8006c88:	e00f      	b.n	8006caa <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006c8a:	69bb      	ldr	r3, [r7, #24]
 8006c8c:	015a      	lsls	r2, r3, #5
 8006c8e:	69fb      	ldr	r3, [r7, #28]
 8006c90:	4413      	add	r3, r2
 8006c92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	69ba      	ldr	r2, [r7, #24]
 8006c9a:	0151      	lsls	r1, r2, #5
 8006c9c:	69fa      	ldr	r2, [r7, #28]
 8006c9e:	440a      	add	r2, r1
 8006ca0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ca4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ca8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006caa:	69bb      	ldr	r3, [r7, #24]
 8006cac:	015a      	lsls	r2, r3, #5
 8006cae:	69fb      	ldr	r3, [r7, #28]
 8006cb0:	4413      	add	r3, r2
 8006cb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	69ba      	ldr	r2, [r7, #24]
 8006cba:	0151      	lsls	r1, r2, #5
 8006cbc:	69fa      	ldr	r2, [r7, #28]
 8006cbe:	440a      	add	r2, r1
 8006cc0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cc4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006cc8:	6013      	str	r3, [r2, #0]
 8006cca:	e12f      	b.n	8006f2c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006ccc:	69bb      	ldr	r3, [r7, #24]
 8006cce:	015a      	lsls	r2, r3, #5
 8006cd0:	69fb      	ldr	r3, [r7, #28]
 8006cd2:	4413      	add	r3, r2
 8006cd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	69ba      	ldr	r2, [r7, #24]
 8006cdc:	0151      	lsls	r1, r2, #5
 8006cde:	69fa      	ldr	r2, [r7, #28]
 8006ce0:	440a      	add	r2, r1
 8006ce2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ce6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006cea:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	78db      	ldrb	r3, [r3, #3]
 8006cf0:	2b01      	cmp	r3, #1
 8006cf2:	d015      	beq.n	8006d20 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	695b      	ldr	r3, [r3, #20]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	f000 8117 	beq.w	8006f2c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006cfe:	69fb      	ldr	r3, [r7, #28]
 8006d00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	781b      	ldrb	r3, [r3, #0]
 8006d0a:	f003 030f 	and.w	r3, r3, #15
 8006d0e:	2101      	movs	r1, #1
 8006d10:	fa01 f303 	lsl.w	r3, r1, r3
 8006d14:	69f9      	ldr	r1, [r7, #28]
 8006d16:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	634b      	str	r3, [r1, #52]	; 0x34
 8006d1e:	e105      	b.n	8006f2c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006d20:	69fb      	ldr	r3, [r7, #28]
 8006d22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d26:	689b      	ldr	r3, [r3, #8]
 8006d28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d110      	bne.n	8006d52 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006d30:	69bb      	ldr	r3, [r7, #24]
 8006d32:	015a      	lsls	r2, r3, #5
 8006d34:	69fb      	ldr	r3, [r7, #28]
 8006d36:	4413      	add	r3, r2
 8006d38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	69ba      	ldr	r2, [r7, #24]
 8006d40:	0151      	lsls	r1, r2, #5
 8006d42:	69fa      	ldr	r2, [r7, #28]
 8006d44:	440a      	add	r2, r1
 8006d46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d4a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006d4e:	6013      	str	r3, [r2, #0]
 8006d50:	e00f      	b.n	8006d72 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006d52:	69bb      	ldr	r3, [r7, #24]
 8006d54:	015a      	lsls	r2, r3, #5
 8006d56:	69fb      	ldr	r3, [r7, #28]
 8006d58:	4413      	add	r3, r2
 8006d5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	69ba      	ldr	r2, [r7, #24]
 8006d62:	0151      	lsls	r1, r2, #5
 8006d64:	69fa      	ldr	r2, [r7, #28]
 8006d66:	440a      	add	r2, r1
 8006d68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d70:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	68d9      	ldr	r1, [r3, #12]
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	781a      	ldrb	r2, [r3, #0]
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	695b      	ldr	r3, [r3, #20]
 8006d7e:	b298      	uxth	r0, r3
 8006d80:	79fb      	ldrb	r3, [r7, #7]
 8006d82:	9300      	str	r3, [sp, #0]
 8006d84:	4603      	mov	r3, r0
 8006d86:	68f8      	ldr	r0, [r7, #12]
 8006d88:	f000 fa2b 	bl	80071e2 <USB_WritePacket>
 8006d8c:	e0ce      	b.n	8006f2c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006d8e:	69bb      	ldr	r3, [r7, #24]
 8006d90:	015a      	lsls	r2, r3, #5
 8006d92:	69fb      	ldr	r3, [r7, #28]
 8006d94:	4413      	add	r3, r2
 8006d96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d9a:	691b      	ldr	r3, [r3, #16]
 8006d9c:	69ba      	ldr	r2, [r7, #24]
 8006d9e:	0151      	lsls	r1, r2, #5
 8006da0:	69fa      	ldr	r2, [r7, #28]
 8006da2:	440a      	add	r2, r1
 8006da4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006da8:	0cdb      	lsrs	r3, r3, #19
 8006daa:	04db      	lsls	r3, r3, #19
 8006dac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006dae:	69bb      	ldr	r3, [r7, #24]
 8006db0:	015a      	lsls	r2, r3, #5
 8006db2:	69fb      	ldr	r3, [r7, #28]
 8006db4:	4413      	add	r3, r2
 8006db6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dba:	691b      	ldr	r3, [r3, #16]
 8006dbc:	69ba      	ldr	r2, [r7, #24]
 8006dbe:	0151      	lsls	r1, r2, #5
 8006dc0:	69fa      	ldr	r2, [r7, #28]
 8006dc2:	440a      	add	r2, r1
 8006dc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006dc8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006dcc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006dd0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	695b      	ldr	r3, [r3, #20]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d126      	bne.n	8006e28 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006dda:	69bb      	ldr	r3, [r7, #24]
 8006ddc:	015a      	lsls	r2, r3, #5
 8006dde:	69fb      	ldr	r3, [r7, #28]
 8006de0:	4413      	add	r3, r2
 8006de2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006de6:	691a      	ldr	r2, [r3, #16]
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	689b      	ldr	r3, [r3, #8]
 8006dec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006df0:	69b9      	ldr	r1, [r7, #24]
 8006df2:	0148      	lsls	r0, r1, #5
 8006df4:	69f9      	ldr	r1, [r7, #28]
 8006df6:	4401      	add	r1, r0
 8006df8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006dfc:	4313      	orrs	r3, r2
 8006dfe:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006e00:	69bb      	ldr	r3, [r7, #24]
 8006e02:	015a      	lsls	r2, r3, #5
 8006e04:	69fb      	ldr	r3, [r7, #28]
 8006e06:	4413      	add	r3, r2
 8006e08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e0c:	691b      	ldr	r3, [r3, #16]
 8006e0e:	69ba      	ldr	r2, [r7, #24]
 8006e10:	0151      	lsls	r1, r2, #5
 8006e12:	69fa      	ldr	r2, [r7, #28]
 8006e14:	440a      	add	r2, r1
 8006e16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e1a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006e1e:	6113      	str	r3, [r2, #16]
 8006e20:	e036      	b.n	8006e90 <USB_EPStartXfer+0x3dc>
 8006e22:	bf00      	nop
 8006e24:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	695a      	ldr	r2, [r3, #20]
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	689b      	ldr	r3, [r3, #8]
 8006e30:	4413      	add	r3, r2
 8006e32:	1e5a      	subs	r2, r3, #1
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	689b      	ldr	r3, [r3, #8]
 8006e38:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e3c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006e3e:	69bb      	ldr	r3, [r7, #24]
 8006e40:	015a      	lsls	r2, r3, #5
 8006e42:	69fb      	ldr	r3, [r7, #28]
 8006e44:	4413      	add	r3, r2
 8006e46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e4a:	691a      	ldr	r2, [r3, #16]
 8006e4c:	8afb      	ldrh	r3, [r7, #22]
 8006e4e:	04d9      	lsls	r1, r3, #19
 8006e50:	4b39      	ldr	r3, [pc, #228]	; (8006f38 <USB_EPStartXfer+0x484>)
 8006e52:	400b      	ands	r3, r1
 8006e54:	69b9      	ldr	r1, [r7, #24]
 8006e56:	0148      	lsls	r0, r1, #5
 8006e58:	69f9      	ldr	r1, [r7, #28]
 8006e5a:	4401      	add	r1, r0
 8006e5c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006e60:	4313      	orrs	r3, r2
 8006e62:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8006e64:	69bb      	ldr	r3, [r7, #24]
 8006e66:	015a      	lsls	r2, r3, #5
 8006e68:	69fb      	ldr	r3, [r7, #28]
 8006e6a:	4413      	add	r3, r2
 8006e6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e70:	691a      	ldr	r2, [r3, #16]
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	689b      	ldr	r3, [r3, #8]
 8006e76:	8af9      	ldrh	r1, [r7, #22]
 8006e78:	fb01 f303 	mul.w	r3, r1, r3
 8006e7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e80:	69b9      	ldr	r1, [r7, #24]
 8006e82:	0148      	lsls	r0, r1, #5
 8006e84:	69f9      	ldr	r1, [r7, #28]
 8006e86:	4401      	add	r1, r0
 8006e88:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006e90:	79fb      	ldrb	r3, [r7, #7]
 8006e92:	2b01      	cmp	r3, #1
 8006e94:	d10d      	bne.n	8006eb2 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	68db      	ldr	r3, [r3, #12]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d009      	beq.n	8006eb2 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	68d9      	ldr	r1, [r3, #12]
 8006ea2:	69bb      	ldr	r3, [r7, #24]
 8006ea4:	015a      	lsls	r2, r3, #5
 8006ea6:	69fb      	ldr	r3, [r7, #28]
 8006ea8:	4413      	add	r3, r2
 8006eaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006eae:	460a      	mov	r2, r1
 8006eb0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	78db      	ldrb	r3, [r3, #3]
 8006eb6:	2b01      	cmp	r3, #1
 8006eb8:	d128      	bne.n	8006f0c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006eba:	69fb      	ldr	r3, [r7, #28]
 8006ebc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ec0:	689b      	ldr	r3, [r3, #8]
 8006ec2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d110      	bne.n	8006eec <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006eca:	69bb      	ldr	r3, [r7, #24]
 8006ecc:	015a      	lsls	r2, r3, #5
 8006ece:	69fb      	ldr	r3, [r7, #28]
 8006ed0:	4413      	add	r3, r2
 8006ed2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	69ba      	ldr	r2, [r7, #24]
 8006eda:	0151      	lsls	r1, r2, #5
 8006edc:	69fa      	ldr	r2, [r7, #28]
 8006ede:	440a      	add	r2, r1
 8006ee0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ee4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006ee8:	6013      	str	r3, [r2, #0]
 8006eea:	e00f      	b.n	8006f0c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006eec:	69bb      	ldr	r3, [r7, #24]
 8006eee:	015a      	lsls	r2, r3, #5
 8006ef0:	69fb      	ldr	r3, [r7, #28]
 8006ef2:	4413      	add	r3, r2
 8006ef4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	69ba      	ldr	r2, [r7, #24]
 8006efc:	0151      	lsls	r1, r2, #5
 8006efe:	69fa      	ldr	r2, [r7, #28]
 8006f00:	440a      	add	r2, r1
 8006f02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f0a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006f0c:	69bb      	ldr	r3, [r7, #24]
 8006f0e:	015a      	lsls	r2, r3, #5
 8006f10:	69fb      	ldr	r3, [r7, #28]
 8006f12:	4413      	add	r3, r2
 8006f14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	69ba      	ldr	r2, [r7, #24]
 8006f1c:	0151      	lsls	r1, r2, #5
 8006f1e:	69fa      	ldr	r2, [r7, #28]
 8006f20:	440a      	add	r2, r1
 8006f22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f26:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006f2a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006f2c:	2300      	movs	r3, #0
}
 8006f2e:	4618      	mov	r0, r3
 8006f30:	3720      	adds	r7, #32
 8006f32:	46bd      	mov	sp, r7
 8006f34:	bd80      	pop	{r7, pc}
 8006f36:	bf00      	nop
 8006f38:	1ff80000 	.word	0x1ff80000

08006f3c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b087      	sub	sp, #28
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	60f8      	str	r0, [r7, #12]
 8006f44:	60b9      	str	r1, [r7, #8]
 8006f46:	4613      	mov	r3, r2
 8006f48:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	781b      	ldrb	r3, [r3, #0]
 8006f52:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	785b      	ldrb	r3, [r3, #1]
 8006f58:	2b01      	cmp	r3, #1
 8006f5a:	f040 80cd 	bne.w	80070f8 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	695b      	ldr	r3, [r3, #20]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d132      	bne.n	8006fcc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	015a      	lsls	r2, r3, #5
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	4413      	add	r3, r2
 8006f6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f72:	691b      	ldr	r3, [r3, #16]
 8006f74:	693a      	ldr	r2, [r7, #16]
 8006f76:	0151      	lsls	r1, r2, #5
 8006f78:	697a      	ldr	r2, [r7, #20]
 8006f7a:	440a      	add	r2, r1
 8006f7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f80:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006f84:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006f88:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006f8a:	693b      	ldr	r3, [r7, #16]
 8006f8c:	015a      	lsls	r2, r3, #5
 8006f8e:	697b      	ldr	r3, [r7, #20]
 8006f90:	4413      	add	r3, r2
 8006f92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f96:	691b      	ldr	r3, [r3, #16]
 8006f98:	693a      	ldr	r2, [r7, #16]
 8006f9a:	0151      	lsls	r1, r2, #5
 8006f9c:	697a      	ldr	r2, [r7, #20]
 8006f9e:	440a      	add	r2, r1
 8006fa0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fa4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006fa8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006faa:	693b      	ldr	r3, [r7, #16]
 8006fac:	015a      	lsls	r2, r3, #5
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	4413      	add	r3, r2
 8006fb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fb6:	691b      	ldr	r3, [r3, #16]
 8006fb8:	693a      	ldr	r2, [r7, #16]
 8006fba:	0151      	lsls	r1, r2, #5
 8006fbc:	697a      	ldr	r2, [r7, #20]
 8006fbe:	440a      	add	r2, r1
 8006fc0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fc4:	0cdb      	lsrs	r3, r3, #19
 8006fc6:	04db      	lsls	r3, r3, #19
 8006fc8:	6113      	str	r3, [r2, #16]
 8006fca:	e04e      	b.n	800706a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006fcc:	693b      	ldr	r3, [r7, #16]
 8006fce:	015a      	lsls	r2, r3, #5
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	4413      	add	r3, r2
 8006fd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fd8:	691b      	ldr	r3, [r3, #16]
 8006fda:	693a      	ldr	r2, [r7, #16]
 8006fdc:	0151      	lsls	r1, r2, #5
 8006fde:	697a      	ldr	r2, [r7, #20]
 8006fe0:	440a      	add	r2, r1
 8006fe2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fe6:	0cdb      	lsrs	r3, r3, #19
 8006fe8:	04db      	lsls	r3, r3, #19
 8006fea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006fec:	693b      	ldr	r3, [r7, #16]
 8006fee:	015a      	lsls	r2, r3, #5
 8006ff0:	697b      	ldr	r3, [r7, #20]
 8006ff2:	4413      	add	r3, r2
 8006ff4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ff8:	691b      	ldr	r3, [r3, #16]
 8006ffa:	693a      	ldr	r2, [r7, #16]
 8006ffc:	0151      	lsls	r1, r2, #5
 8006ffe:	697a      	ldr	r2, [r7, #20]
 8007000:	440a      	add	r2, r1
 8007002:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007006:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800700a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800700e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	695a      	ldr	r2, [r3, #20]
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	689b      	ldr	r3, [r3, #8]
 8007018:	429a      	cmp	r2, r3
 800701a:	d903      	bls.n	8007024 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	689a      	ldr	r2, [r3, #8]
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007024:	693b      	ldr	r3, [r7, #16]
 8007026:	015a      	lsls	r2, r3, #5
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	4413      	add	r3, r2
 800702c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007030:	691b      	ldr	r3, [r3, #16]
 8007032:	693a      	ldr	r2, [r7, #16]
 8007034:	0151      	lsls	r1, r2, #5
 8007036:	697a      	ldr	r2, [r7, #20]
 8007038:	440a      	add	r2, r1
 800703a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800703e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007042:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	015a      	lsls	r2, r3, #5
 8007048:	697b      	ldr	r3, [r7, #20]
 800704a:	4413      	add	r3, r2
 800704c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007050:	691a      	ldr	r2, [r3, #16]
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	695b      	ldr	r3, [r3, #20]
 8007056:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800705a:	6939      	ldr	r1, [r7, #16]
 800705c:	0148      	lsls	r0, r1, #5
 800705e:	6979      	ldr	r1, [r7, #20]
 8007060:	4401      	add	r1, r0
 8007062:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007066:	4313      	orrs	r3, r2
 8007068:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800706a:	79fb      	ldrb	r3, [r7, #7]
 800706c:	2b01      	cmp	r3, #1
 800706e:	d11e      	bne.n	80070ae <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	691b      	ldr	r3, [r3, #16]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d009      	beq.n	800708c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007078:	693b      	ldr	r3, [r7, #16]
 800707a:	015a      	lsls	r2, r3, #5
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	4413      	add	r3, r2
 8007080:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007084:	461a      	mov	r2, r3
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	691b      	ldr	r3, [r3, #16]
 800708a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	015a      	lsls	r2, r3, #5
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	4413      	add	r3, r2
 8007094:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	693a      	ldr	r2, [r7, #16]
 800709c:	0151      	lsls	r1, r2, #5
 800709e:	697a      	ldr	r2, [r7, #20]
 80070a0:	440a      	add	r2, r1
 80070a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070a6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80070aa:	6013      	str	r3, [r2, #0]
 80070ac:	e092      	b.n	80071d4 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	015a      	lsls	r2, r3, #5
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	4413      	add	r3, r2
 80070b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	693a      	ldr	r2, [r7, #16]
 80070be:	0151      	lsls	r1, r2, #5
 80070c0:	697a      	ldr	r2, [r7, #20]
 80070c2:	440a      	add	r2, r1
 80070c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070c8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80070cc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	695b      	ldr	r3, [r3, #20]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d07e      	beq.n	80071d4 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80070d6:	697b      	ldr	r3, [r7, #20]
 80070d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80070de:	68bb      	ldr	r3, [r7, #8]
 80070e0:	781b      	ldrb	r3, [r3, #0]
 80070e2:	f003 030f 	and.w	r3, r3, #15
 80070e6:	2101      	movs	r1, #1
 80070e8:	fa01 f303 	lsl.w	r3, r1, r3
 80070ec:	6979      	ldr	r1, [r7, #20]
 80070ee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80070f2:	4313      	orrs	r3, r2
 80070f4:	634b      	str	r3, [r1, #52]	; 0x34
 80070f6:	e06d      	b.n	80071d4 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80070f8:	693b      	ldr	r3, [r7, #16]
 80070fa:	015a      	lsls	r2, r3, #5
 80070fc:	697b      	ldr	r3, [r7, #20]
 80070fe:	4413      	add	r3, r2
 8007100:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007104:	691b      	ldr	r3, [r3, #16]
 8007106:	693a      	ldr	r2, [r7, #16]
 8007108:	0151      	lsls	r1, r2, #5
 800710a:	697a      	ldr	r2, [r7, #20]
 800710c:	440a      	add	r2, r1
 800710e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007112:	0cdb      	lsrs	r3, r3, #19
 8007114:	04db      	lsls	r3, r3, #19
 8007116:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007118:	693b      	ldr	r3, [r7, #16]
 800711a:	015a      	lsls	r2, r3, #5
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	4413      	add	r3, r2
 8007120:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007124:	691b      	ldr	r3, [r3, #16]
 8007126:	693a      	ldr	r2, [r7, #16]
 8007128:	0151      	lsls	r1, r2, #5
 800712a:	697a      	ldr	r2, [r7, #20]
 800712c:	440a      	add	r2, r1
 800712e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007132:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007136:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800713a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	695b      	ldr	r3, [r3, #20]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d003      	beq.n	800714c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	689a      	ldr	r2, [r3, #8]
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	015a      	lsls	r2, r3, #5
 8007150:	697b      	ldr	r3, [r7, #20]
 8007152:	4413      	add	r3, r2
 8007154:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007158:	691b      	ldr	r3, [r3, #16]
 800715a:	693a      	ldr	r2, [r7, #16]
 800715c:	0151      	lsls	r1, r2, #5
 800715e:	697a      	ldr	r2, [r7, #20]
 8007160:	440a      	add	r2, r1
 8007162:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007166:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800716a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800716c:	693b      	ldr	r3, [r7, #16]
 800716e:	015a      	lsls	r2, r3, #5
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	4413      	add	r3, r2
 8007174:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007178:	691a      	ldr	r2, [r3, #16]
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	689b      	ldr	r3, [r3, #8]
 800717e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007182:	6939      	ldr	r1, [r7, #16]
 8007184:	0148      	lsls	r0, r1, #5
 8007186:	6979      	ldr	r1, [r7, #20]
 8007188:	4401      	add	r1, r0
 800718a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800718e:	4313      	orrs	r3, r2
 8007190:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007192:	79fb      	ldrb	r3, [r7, #7]
 8007194:	2b01      	cmp	r3, #1
 8007196:	d10d      	bne.n	80071b4 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	68db      	ldr	r3, [r3, #12]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d009      	beq.n	80071b4 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	68d9      	ldr	r1, [r3, #12]
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	015a      	lsls	r2, r3, #5
 80071a8:	697b      	ldr	r3, [r7, #20]
 80071aa:	4413      	add	r3, r2
 80071ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071b0:	460a      	mov	r2, r1
 80071b2:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80071b4:	693b      	ldr	r3, [r7, #16]
 80071b6:	015a      	lsls	r2, r3, #5
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	4413      	add	r3, r2
 80071bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	693a      	ldr	r2, [r7, #16]
 80071c4:	0151      	lsls	r1, r2, #5
 80071c6:	697a      	ldr	r2, [r7, #20]
 80071c8:	440a      	add	r2, r1
 80071ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071ce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80071d2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80071d4:	2300      	movs	r3, #0
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	371c      	adds	r7, #28
 80071da:	46bd      	mov	sp, r7
 80071dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e0:	4770      	bx	lr

080071e2 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80071e2:	b480      	push	{r7}
 80071e4:	b089      	sub	sp, #36	; 0x24
 80071e6:	af00      	add	r7, sp, #0
 80071e8:	60f8      	str	r0, [r7, #12]
 80071ea:	60b9      	str	r1, [r7, #8]
 80071ec:	4611      	mov	r1, r2
 80071ee:	461a      	mov	r2, r3
 80071f0:	460b      	mov	r3, r1
 80071f2:	71fb      	strb	r3, [r7, #7]
 80071f4:	4613      	mov	r3, r2
 80071f6:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8007200:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007204:	2b00      	cmp	r3, #0
 8007206:	d11a      	bne.n	800723e <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007208:	88bb      	ldrh	r3, [r7, #4]
 800720a:	3303      	adds	r3, #3
 800720c:	089b      	lsrs	r3, r3, #2
 800720e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007210:	2300      	movs	r3, #0
 8007212:	61bb      	str	r3, [r7, #24]
 8007214:	e00f      	b.n	8007236 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007216:	79fb      	ldrb	r3, [r7, #7]
 8007218:	031a      	lsls	r2, r3, #12
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	4413      	add	r3, r2
 800721e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007222:	461a      	mov	r2, r3
 8007224:	69fb      	ldr	r3, [r7, #28]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	6013      	str	r3, [r2, #0]
      pSrc++;
 800722a:	69fb      	ldr	r3, [r7, #28]
 800722c:	3304      	adds	r3, #4
 800722e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007230:	69bb      	ldr	r3, [r7, #24]
 8007232:	3301      	adds	r3, #1
 8007234:	61bb      	str	r3, [r7, #24]
 8007236:	69ba      	ldr	r2, [r7, #24]
 8007238:	693b      	ldr	r3, [r7, #16]
 800723a:	429a      	cmp	r2, r3
 800723c:	d3eb      	bcc.n	8007216 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800723e:	2300      	movs	r3, #0
}
 8007240:	4618      	mov	r0, r3
 8007242:	3724      	adds	r7, #36	; 0x24
 8007244:	46bd      	mov	sp, r7
 8007246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724a:	4770      	bx	lr

0800724c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800724c:	b480      	push	{r7}
 800724e:	b089      	sub	sp, #36	; 0x24
 8007250:	af00      	add	r7, sp, #0
 8007252:	60f8      	str	r0, [r7, #12]
 8007254:	60b9      	str	r1, [r7, #8]
 8007256:	4613      	mov	r3, r2
 8007258:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8007262:	88fb      	ldrh	r3, [r7, #6]
 8007264:	3303      	adds	r3, #3
 8007266:	089b      	lsrs	r3, r3, #2
 8007268:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800726a:	2300      	movs	r3, #0
 800726c:	61bb      	str	r3, [r7, #24]
 800726e:	e00b      	b.n	8007288 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007276:	681a      	ldr	r2, [r3, #0]
 8007278:	69fb      	ldr	r3, [r7, #28]
 800727a:	601a      	str	r2, [r3, #0]
    pDest++;
 800727c:	69fb      	ldr	r3, [r7, #28]
 800727e:	3304      	adds	r3, #4
 8007280:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8007282:	69bb      	ldr	r3, [r7, #24]
 8007284:	3301      	adds	r3, #1
 8007286:	61bb      	str	r3, [r7, #24]
 8007288:	69ba      	ldr	r2, [r7, #24]
 800728a:	693b      	ldr	r3, [r7, #16]
 800728c:	429a      	cmp	r2, r3
 800728e:	d3ef      	bcc.n	8007270 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8007290:	69fb      	ldr	r3, [r7, #28]
}
 8007292:	4618      	mov	r0, r3
 8007294:	3724      	adds	r7, #36	; 0x24
 8007296:	46bd      	mov	sp, r7
 8007298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729c:	4770      	bx	lr

0800729e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800729e:	b480      	push	{r7}
 80072a0:	b085      	sub	sp, #20
 80072a2:	af00      	add	r7, sp, #0
 80072a4:	6078      	str	r0, [r7, #4]
 80072a6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	781b      	ldrb	r3, [r3, #0]
 80072b0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	785b      	ldrb	r3, [r3, #1]
 80072b6:	2b01      	cmp	r3, #1
 80072b8:	d12c      	bne.n	8007314 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	015a      	lsls	r2, r3, #5
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	4413      	add	r3, r2
 80072c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	db12      	blt.n	80072f2 <USB_EPSetStall+0x54>
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d00f      	beq.n	80072f2 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	015a      	lsls	r2, r3, #5
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	4413      	add	r3, r2
 80072da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	68ba      	ldr	r2, [r7, #8]
 80072e2:	0151      	lsls	r1, r2, #5
 80072e4:	68fa      	ldr	r2, [r7, #12]
 80072e6:	440a      	add	r2, r1
 80072e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072ec:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80072f0:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	015a      	lsls	r2, r3, #5
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	4413      	add	r3, r2
 80072fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	68ba      	ldr	r2, [r7, #8]
 8007302:	0151      	lsls	r1, r2, #5
 8007304:	68fa      	ldr	r2, [r7, #12]
 8007306:	440a      	add	r2, r1
 8007308:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800730c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007310:	6013      	str	r3, [r2, #0]
 8007312:	e02b      	b.n	800736c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	015a      	lsls	r2, r3, #5
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	4413      	add	r3, r2
 800731c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	2b00      	cmp	r3, #0
 8007324:	db12      	blt.n	800734c <USB_EPSetStall+0xae>
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d00f      	beq.n	800734c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	015a      	lsls	r2, r3, #5
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	4413      	add	r3, r2
 8007334:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	68ba      	ldr	r2, [r7, #8]
 800733c:	0151      	lsls	r1, r2, #5
 800733e:	68fa      	ldr	r2, [r7, #12]
 8007340:	440a      	add	r2, r1
 8007342:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007346:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800734a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	015a      	lsls	r2, r3, #5
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	4413      	add	r3, r2
 8007354:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	68ba      	ldr	r2, [r7, #8]
 800735c:	0151      	lsls	r1, r2, #5
 800735e:	68fa      	ldr	r2, [r7, #12]
 8007360:	440a      	add	r2, r1
 8007362:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007366:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800736a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800736c:	2300      	movs	r3, #0
}
 800736e:	4618      	mov	r0, r3
 8007370:	3714      	adds	r7, #20
 8007372:	46bd      	mov	sp, r7
 8007374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007378:	4770      	bx	lr

0800737a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800737a:	b480      	push	{r7}
 800737c:	b085      	sub	sp, #20
 800737e:	af00      	add	r7, sp, #0
 8007380:	6078      	str	r0, [r7, #4]
 8007382:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	781b      	ldrb	r3, [r3, #0]
 800738c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	785b      	ldrb	r3, [r3, #1]
 8007392:	2b01      	cmp	r3, #1
 8007394:	d128      	bne.n	80073e8 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	015a      	lsls	r2, r3, #5
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	4413      	add	r3, r2
 800739e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	68ba      	ldr	r2, [r7, #8]
 80073a6:	0151      	lsls	r1, r2, #5
 80073a8:	68fa      	ldr	r2, [r7, #12]
 80073aa:	440a      	add	r2, r1
 80073ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073b0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80073b4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	78db      	ldrb	r3, [r3, #3]
 80073ba:	2b03      	cmp	r3, #3
 80073bc:	d003      	beq.n	80073c6 <USB_EPClearStall+0x4c>
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	78db      	ldrb	r3, [r3, #3]
 80073c2:	2b02      	cmp	r3, #2
 80073c4:	d138      	bne.n	8007438 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	015a      	lsls	r2, r3, #5
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	4413      	add	r3, r2
 80073ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	68ba      	ldr	r2, [r7, #8]
 80073d6:	0151      	lsls	r1, r2, #5
 80073d8:	68fa      	ldr	r2, [r7, #12]
 80073da:	440a      	add	r2, r1
 80073dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073e4:	6013      	str	r3, [r2, #0]
 80073e6:	e027      	b.n	8007438 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	015a      	lsls	r2, r3, #5
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	4413      	add	r3, r2
 80073f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	68ba      	ldr	r2, [r7, #8]
 80073f8:	0151      	lsls	r1, r2, #5
 80073fa:	68fa      	ldr	r2, [r7, #12]
 80073fc:	440a      	add	r2, r1
 80073fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007402:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007406:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	78db      	ldrb	r3, [r3, #3]
 800740c:	2b03      	cmp	r3, #3
 800740e:	d003      	beq.n	8007418 <USB_EPClearStall+0x9e>
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	78db      	ldrb	r3, [r3, #3]
 8007414:	2b02      	cmp	r3, #2
 8007416:	d10f      	bne.n	8007438 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	015a      	lsls	r2, r3, #5
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	4413      	add	r3, r2
 8007420:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	68ba      	ldr	r2, [r7, #8]
 8007428:	0151      	lsls	r1, r2, #5
 800742a:	68fa      	ldr	r2, [r7, #12]
 800742c:	440a      	add	r2, r1
 800742e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007432:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007436:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007438:	2300      	movs	r3, #0
}
 800743a:	4618      	mov	r0, r3
 800743c:	3714      	adds	r7, #20
 800743e:	46bd      	mov	sp, r7
 8007440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007444:	4770      	bx	lr

08007446 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007446:	b480      	push	{r7}
 8007448:	b085      	sub	sp, #20
 800744a:	af00      	add	r7, sp, #0
 800744c:	6078      	str	r0, [r7, #4]
 800744e:	460b      	mov	r3, r1
 8007450:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	68fa      	ldr	r2, [r7, #12]
 8007460:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007464:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007468:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007470:	681a      	ldr	r2, [r3, #0]
 8007472:	78fb      	ldrb	r3, [r7, #3]
 8007474:	011b      	lsls	r3, r3, #4
 8007476:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800747a:	68f9      	ldr	r1, [r7, #12]
 800747c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007480:	4313      	orrs	r3, r2
 8007482:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007484:	2300      	movs	r3, #0
}
 8007486:	4618      	mov	r0, r3
 8007488:	3714      	adds	r7, #20
 800748a:	46bd      	mov	sp, r7
 800748c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007490:	4770      	bx	lr

08007492 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007492:	b480      	push	{r7}
 8007494:	b085      	sub	sp, #20
 8007496:	af00      	add	r7, sp, #0
 8007498:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	68fa      	ldr	r2, [r7, #12]
 80074a8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80074ac:	f023 0303 	bic.w	r3, r3, #3
 80074b0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074b8:	685b      	ldr	r3, [r3, #4]
 80074ba:	68fa      	ldr	r2, [r7, #12]
 80074bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80074c0:	f023 0302 	bic.w	r3, r3, #2
 80074c4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80074c6:	2300      	movs	r3, #0
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	3714      	adds	r7, #20
 80074cc:	46bd      	mov	sp, r7
 80074ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d2:	4770      	bx	lr

080074d4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80074d4:	b480      	push	{r7}
 80074d6:	b085      	sub	sp, #20
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	68fa      	ldr	r2, [r7, #12]
 80074ea:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80074ee:	f023 0303 	bic.w	r3, r3, #3
 80074f2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074fa:	685b      	ldr	r3, [r3, #4]
 80074fc:	68fa      	ldr	r2, [r7, #12]
 80074fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007502:	f043 0302 	orr.w	r3, r3, #2
 8007506:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007508:	2300      	movs	r3, #0
}
 800750a:	4618      	mov	r0, r3
 800750c:	3714      	adds	r7, #20
 800750e:	46bd      	mov	sp, r7
 8007510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007514:	4770      	bx	lr

08007516 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007516:	b480      	push	{r7}
 8007518:	b085      	sub	sp, #20
 800751a:	af00      	add	r7, sp, #0
 800751c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	695b      	ldr	r3, [r3, #20]
 8007522:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	699b      	ldr	r3, [r3, #24]
 8007528:	68fa      	ldr	r2, [r7, #12]
 800752a:	4013      	ands	r3, r2
 800752c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800752e:	68fb      	ldr	r3, [r7, #12]
}
 8007530:	4618      	mov	r0, r3
 8007532:	3714      	adds	r7, #20
 8007534:	46bd      	mov	sp, r7
 8007536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753a:	4770      	bx	lr

0800753c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800753c:	b480      	push	{r7}
 800753e:	b085      	sub	sp, #20
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800754e:	699b      	ldr	r3, [r3, #24]
 8007550:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007558:	69db      	ldr	r3, [r3, #28]
 800755a:	68ba      	ldr	r2, [r7, #8]
 800755c:	4013      	ands	r3, r2
 800755e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	0c1b      	lsrs	r3, r3, #16
}
 8007564:	4618      	mov	r0, r3
 8007566:	3714      	adds	r7, #20
 8007568:	46bd      	mov	sp, r7
 800756a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756e:	4770      	bx	lr

08007570 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007570:	b480      	push	{r7}
 8007572:	b085      	sub	sp, #20
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007582:	699b      	ldr	r3, [r3, #24]
 8007584:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800758c:	69db      	ldr	r3, [r3, #28]
 800758e:	68ba      	ldr	r2, [r7, #8]
 8007590:	4013      	ands	r3, r2
 8007592:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	b29b      	uxth	r3, r3
}
 8007598:	4618      	mov	r0, r3
 800759a:	3714      	adds	r7, #20
 800759c:	46bd      	mov	sp, r7
 800759e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a2:	4770      	bx	lr

080075a4 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80075a4:	b480      	push	{r7}
 80075a6:	b085      	sub	sp, #20
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
 80075ac:	460b      	mov	r3, r1
 80075ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80075b4:	78fb      	ldrb	r3, [r7, #3]
 80075b6:	015a      	lsls	r2, r3, #5
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	4413      	add	r3, r2
 80075bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075c0:	689b      	ldr	r3, [r3, #8]
 80075c2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075ca:	695b      	ldr	r3, [r3, #20]
 80075cc:	68ba      	ldr	r2, [r7, #8]
 80075ce:	4013      	ands	r3, r2
 80075d0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80075d2:	68bb      	ldr	r3, [r7, #8]
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	3714      	adds	r7, #20
 80075d8:	46bd      	mov	sp, r7
 80075da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075de:	4770      	bx	lr

080075e0 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80075e0:	b480      	push	{r7}
 80075e2:	b087      	sub	sp, #28
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
 80075e8:	460b      	mov	r3, r1
 80075ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80075f0:	697b      	ldr	r3, [r7, #20]
 80075f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075f6:	691b      	ldr	r3, [r3, #16]
 80075f8:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80075fa:	697b      	ldr	r3, [r7, #20]
 80075fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007602:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007604:	78fb      	ldrb	r3, [r7, #3]
 8007606:	f003 030f 	and.w	r3, r3, #15
 800760a:	68fa      	ldr	r2, [r7, #12]
 800760c:	fa22 f303 	lsr.w	r3, r2, r3
 8007610:	01db      	lsls	r3, r3, #7
 8007612:	b2db      	uxtb	r3, r3
 8007614:	693a      	ldr	r2, [r7, #16]
 8007616:	4313      	orrs	r3, r2
 8007618:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800761a:	78fb      	ldrb	r3, [r7, #3]
 800761c:	015a      	lsls	r2, r3, #5
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	4413      	add	r3, r2
 8007622:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007626:	689b      	ldr	r3, [r3, #8]
 8007628:	693a      	ldr	r2, [r7, #16]
 800762a:	4013      	ands	r3, r2
 800762c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800762e:	68bb      	ldr	r3, [r7, #8]
}
 8007630:	4618      	mov	r0, r3
 8007632:	371c      	adds	r7, #28
 8007634:	46bd      	mov	sp, r7
 8007636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763a:	4770      	bx	lr

0800763c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800763c:	b480      	push	{r7}
 800763e:	b083      	sub	sp, #12
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	695b      	ldr	r3, [r3, #20]
 8007648:	f003 0301 	and.w	r3, r3, #1
}
 800764c:	4618      	mov	r0, r3
 800764e:	370c      	adds	r7, #12
 8007650:	46bd      	mov	sp, r7
 8007652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007656:	4770      	bx	lr

08007658 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007658:	b480      	push	{r7}
 800765a:	b085      	sub	sp, #20
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	68fa      	ldr	r2, [r7, #12]
 800766e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007672:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007676:	f023 0307 	bic.w	r3, r3, #7
 800767a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007682:	685b      	ldr	r3, [r3, #4]
 8007684:	68fa      	ldr	r2, [r7, #12]
 8007686:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800768a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800768e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007690:	2300      	movs	r3, #0
}
 8007692:	4618      	mov	r0, r3
 8007694:	3714      	adds	r7, #20
 8007696:	46bd      	mov	sp, r7
 8007698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769c:	4770      	bx	lr
	...

080076a0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80076a0:	b480      	push	{r7}
 80076a2:	b087      	sub	sp, #28
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	60f8      	str	r0, [r7, #12]
 80076a8:	460b      	mov	r3, r1
 80076aa:	607a      	str	r2, [r7, #4]
 80076ac:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	333c      	adds	r3, #60	; 0x3c
 80076b6:	3304      	adds	r3, #4
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80076bc:	693b      	ldr	r3, [r7, #16]
 80076be:	4a26      	ldr	r2, [pc, #152]	; (8007758 <USB_EP0_OutStart+0xb8>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d90a      	bls.n	80076da <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80076c4:	697b      	ldr	r3, [r7, #20]
 80076c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80076d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80076d4:	d101      	bne.n	80076da <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80076d6:	2300      	movs	r3, #0
 80076d8:	e037      	b.n	800774a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80076da:	697b      	ldr	r3, [r7, #20]
 80076dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076e0:	461a      	mov	r2, r3
 80076e2:	2300      	movs	r3, #0
 80076e4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076ec:	691b      	ldr	r3, [r3, #16]
 80076ee:	697a      	ldr	r2, [r7, #20]
 80076f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80076f8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007700:	691b      	ldr	r3, [r3, #16]
 8007702:	697a      	ldr	r2, [r7, #20]
 8007704:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007708:	f043 0318 	orr.w	r3, r3, #24
 800770c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800770e:	697b      	ldr	r3, [r7, #20]
 8007710:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007714:	691b      	ldr	r3, [r3, #16]
 8007716:	697a      	ldr	r2, [r7, #20]
 8007718:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800771c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007720:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007722:	7afb      	ldrb	r3, [r7, #11]
 8007724:	2b01      	cmp	r3, #1
 8007726:	d10f      	bne.n	8007748 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007728:	697b      	ldr	r3, [r7, #20]
 800772a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800772e:	461a      	mov	r2, r3
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007734:	697b      	ldr	r3, [r7, #20]
 8007736:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	697a      	ldr	r2, [r7, #20]
 800773e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007742:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007746:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007748:	2300      	movs	r3, #0
}
 800774a:	4618      	mov	r0, r3
 800774c:	371c      	adds	r7, #28
 800774e:	46bd      	mov	sp, r7
 8007750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007754:	4770      	bx	lr
 8007756:	bf00      	nop
 8007758:	4f54300a 	.word	0x4f54300a

0800775c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800775c:	b480      	push	{r7}
 800775e:	b085      	sub	sp, #20
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007764:	2300      	movs	r3, #0
 8007766:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	3301      	adds	r3, #1
 800776c:	60fb      	str	r3, [r7, #12]
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	4a13      	ldr	r2, [pc, #76]	; (80077c0 <USB_CoreReset+0x64>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d901      	bls.n	800777a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007776:	2303      	movs	r3, #3
 8007778:	e01b      	b.n	80077b2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	691b      	ldr	r3, [r3, #16]
 800777e:	2b00      	cmp	r3, #0
 8007780:	daf2      	bge.n	8007768 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007782:	2300      	movs	r3, #0
 8007784:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	691b      	ldr	r3, [r3, #16]
 800778a:	f043 0201 	orr.w	r2, r3, #1
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	3301      	adds	r3, #1
 8007796:	60fb      	str	r3, [r7, #12]
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	4a09      	ldr	r2, [pc, #36]	; (80077c0 <USB_CoreReset+0x64>)
 800779c:	4293      	cmp	r3, r2
 800779e:	d901      	bls.n	80077a4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80077a0:	2303      	movs	r3, #3
 80077a2:	e006      	b.n	80077b2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	691b      	ldr	r3, [r3, #16]
 80077a8:	f003 0301 	and.w	r3, r3, #1
 80077ac:	2b01      	cmp	r3, #1
 80077ae:	d0f0      	beq.n	8007792 <USB_CoreReset+0x36>

  return HAL_OK;
 80077b0:	2300      	movs	r3, #0
}
 80077b2:	4618      	mov	r0, r3
 80077b4:	3714      	adds	r7, #20
 80077b6:	46bd      	mov	sp, r7
 80077b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077bc:	4770      	bx	lr
 80077be:	bf00      	nop
 80077c0:	00030d40 	.word	0x00030d40

080077c4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b084      	sub	sp, #16
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
 80077cc:	460b      	mov	r3, r1
 80077ce:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80077d0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80077d4:	f002 fb86 	bl	8009ee4 <malloc>
 80077d8:	4603      	mov	r3, r0
 80077da:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d105      	bne.n	80077ee <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2200      	movs	r2, #0
 80077e6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80077ea:	2302      	movs	r3, #2
 80077ec:	e066      	b.n	80078bc <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	68fa      	ldr	r2, [r7, #12]
 80077f2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	7c1b      	ldrb	r3, [r3, #16]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d119      	bne.n	8007832 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80077fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007802:	2202      	movs	r2, #2
 8007804:	2181      	movs	r1, #129	; 0x81
 8007806:	6878      	ldr	r0, [r7, #4]
 8007808:	f002 f9f3 	bl	8009bf2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2201      	movs	r2, #1
 8007810:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007812:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007816:	2202      	movs	r2, #2
 8007818:	2101      	movs	r1, #1
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f002 f9e9 	bl	8009bf2 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2201      	movs	r2, #1
 8007824:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2210      	movs	r2, #16
 800782c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8007830:	e016      	b.n	8007860 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007832:	2340      	movs	r3, #64	; 0x40
 8007834:	2202      	movs	r2, #2
 8007836:	2181      	movs	r1, #129	; 0x81
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f002 f9da 	bl	8009bf2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2201      	movs	r2, #1
 8007842:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007844:	2340      	movs	r3, #64	; 0x40
 8007846:	2202      	movs	r2, #2
 8007848:	2101      	movs	r1, #1
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	f002 f9d1 	bl	8009bf2 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2201      	movs	r2, #1
 8007854:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2210      	movs	r2, #16
 800785c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007860:	2308      	movs	r3, #8
 8007862:	2203      	movs	r2, #3
 8007864:	2182      	movs	r1, #130	; 0x82
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f002 f9c3 	bl	8009bf2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2201      	movs	r2, #1
 8007870:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	2200      	movs	r2, #0
 8007882:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	2200      	movs	r2, #0
 800788a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	7c1b      	ldrb	r3, [r3, #16]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d109      	bne.n	80078aa <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800789c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80078a0:	2101      	movs	r1, #1
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f002 fa94 	bl	8009dd0 <USBD_LL_PrepareReceive>
 80078a8:	e007      	b.n	80078ba <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80078b0:	2340      	movs	r3, #64	; 0x40
 80078b2:	2101      	movs	r1, #1
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	f002 fa8b 	bl	8009dd0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80078ba:	2300      	movs	r3, #0
}
 80078bc:	4618      	mov	r0, r3
 80078be:	3710      	adds	r7, #16
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd80      	pop	{r7, pc}

080078c4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b084      	sub	sp, #16
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
 80078cc:	460b      	mov	r3, r1
 80078ce:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 80078d0:	2300      	movs	r3, #0
 80078d2:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80078d4:	2181      	movs	r1, #129	; 0x81
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	f002 f9b1 	bl	8009c3e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2200      	movs	r2, #0
 80078e0:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80078e2:	2101      	movs	r1, #1
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f002 f9aa 	bl	8009c3e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2200      	movs	r2, #0
 80078ee:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80078f2:	2182      	movs	r1, #130	; 0x82
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f002 f9a2 	bl	8009c3e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2200      	movs	r2, #0
 80078fe:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2200      	movs	r2, #0
 8007906:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007910:	2b00      	cmp	r3, #0
 8007912:	d00e      	beq.n	8007932 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800791a:	685b      	ldr	r3, [r3, #4]
 800791c:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007924:	4618      	mov	r0, r3
 8007926:	f002 fae5 	bl	8009ef4 <free>
    pdev->pClassData = NULL;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2200      	movs	r2, #0
 800792e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8007932:	7bfb      	ldrb	r3, [r7, #15]
}
 8007934:	4618      	mov	r0, r3
 8007936:	3710      	adds	r7, #16
 8007938:	46bd      	mov	sp, r7
 800793a:	bd80      	pop	{r7, pc}

0800793c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b086      	sub	sp, #24
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
 8007944:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800794c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800794e:	2300      	movs	r3, #0
 8007950:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007952:	2300      	movs	r3, #0
 8007954:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8007956:	2300      	movs	r3, #0
 8007958:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	781b      	ldrb	r3, [r3, #0]
 800795e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007962:	2b00      	cmp	r3, #0
 8007964:	d03a      	beq.n	80079dc <USBD_CDC_Setup+0xa0>
 8007966:	2b20      	cmp	r3, #32
 8007968:	f040 8097 	bne.w	8007a9a <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	88db      	ldrh	r3, [r3, #6]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d029      	beq.n	80079c8 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	781b      	ldrb	r3, [r3, #0]
 8007978:	b25b      	sxtb	r3, r3
 800797a:	2b00      	cmp	r3, #0
 800797c:	da11      	bge.n	80079a2 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007984:	689b      	ldr	r3, [r3, #8]
 8007986:	683a      	ldr	r2, [r7, #0]
 8007988:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 800798a:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800798c:	683a      	ldr	r2, [r7, #0]
 800798e:	88d2      	ldrh	r2, [r2, #6]
 8007990:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007992:	6939      	ldr	r1, [r7, #16]
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	88db      	ldrh	r3, [r3, #6]
 8007998:	461a      	mov	r2, r3
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f001 fc63 	bl	8009266 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 80079a0:	e082      	b.n	8007aa8 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	785a      	ldrb	r2, [r3, #1]
 80079a6:	693b      	ldr	r3, [r7, #16]
 80079a8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	88db      	ldrh	r3, [r3, #6]
 80079b0:	b2da      	uxtb	r2, r3
 80079b2:	693b      	ldr	r3, [r7, #16]
 80079b4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80079b8:	6939      	ldr	r1, [r7, #16]
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	88db      	ldrh	r3, [r3, #6]
 80079be:	461a      	mov	r2, r3
 80079c0:	6878      	ldr	r0, [r7, #4]
 80079c2:	f001 fc7c 	bl	80092be <USBD_CtlPrepareRx>
    break;
 80079c6:	e06f      	b.n	8007aa8 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80079ce:	689b      	ldr	r3, [r3, #8]
 80079d0:	683a      	ldr	r2, [r7, #0]
 80079d2:	7850      	ldrb	r0, [r2, #1]
 80079d4:	2200      	movs	r2, #0
 80079d6:	6839      	ldr	r1, [r7, #0]
 80079d8:	4798      	blx	r3
    break;
 80079da:	e065      	b.n	8007aa8 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	785b      	ldrb	r3, [r3, #1]
 80079e0:	2b0b      	cmp	r3, #11
 80079e2:	d84f      	bhi.n	8007a84 <USBD_CDC_Setup+0x148>
 80079e4:	a201      	add	r2, pc, #4	; (adr r2, 80079ec <USBD_CDC_Setup+0xb0>)
 80079e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079ea:	bf00      	nop
 80079ec:	08007a1d 	.word	0x08007a1d
 80079f0:	08007a93 	.word	0x08007a93
 80079f4:	08007a85 	.word	0x08007a85
 80079f8:	08007a85 	.word	0x08007a85
 80079fc:	08007a85 	.word	0x08007a85
 8007a00:	08007a85 	.word	0x08007a85
 8007a04:	08007a85 	.word	0x08007a85
 8007a08:	08007a85 	.word	0x08007a85
 8007a0c:	08007a85 	.word	0x08007a85
 8007a10:	08007a85 	.word	0x08007a85
 8007a14:	08007a45 	.word	0x08007a45
 8007a18:	08007a6d 	.word	0x08007a6d
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a22:	2b03      	cmp	r3, #3
 8007a24:	d107      	bne.n	8007a36 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007a26:	f107 030c 	add.w	r3, r7, #12
 8007a2a:	2202      	movs	r2, #2
 8007a2c:	4619      	mov	r1, r3
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f001 fc19 	bl	8009266 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8007a34:	e030      	b.n	8007a98 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8007a36:	6839      	ldr	r1, [r7, #0]
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	f001 fba3 	bl	8009184 <USBD_CtlError>
        ret = USBD_FAIL;
 8007a3e:	2303      	movs	r3, #3
 8007a40:	75fb      	strb	r3, [r7, #23]
      break;
 8007a42:	e029      	b.n	8007a98 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a4a:	2b03      	cmp	r3, #3
 8007a4c:	d107      	bne.n	8007a5e <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007a4e:	f107 030f 	add.w	r3, r7, #15
 8007a52:	2201      	movs	r2, #1
 8007a54:	4619      	mov	r1, r3
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f001 fc05 	bl	8009266 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8007a5c:	e01c      	b.n	8007a98 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8007a5e:	6839      	ldr	r1, [r7, #0]
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f001 fb8f 	bl	8009184 <USBD_CtlError>
        ret = USBD_FAIL;
 8007a66:	2303      	movs	r3, #3
 8007a68:	75fb      	strb	r3, [r7, #23]
      break;
 8007a6a:	e015      	b.n	8007a98 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a72:	2b03      	cmp	r3, #3
 8007a74:	d00f      	beq.n	8007a96 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8007a76:	6839      	ldr	r1, [r7, #0]
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	f001 fb83 	bl	8009184 <USBD_CtlError>
        ret = USBD_FAIL;
 8007a7e:	2303      	movs	r3, #3
 8007a80:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8007a82:	e008      	b.n	8007a96 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8007a84:	6839      	ldr	r1, [r7, #0]
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f001 fb7c 	bl	8009184 <USBD_CtlError>
      ret = USBD_FAIL;
 8007a8c:	2303      	movs	r3, #3
 8007a8e:	75fb      	strb	r3, [r7, #23]
      break;
 8007a90:	e002      	b.n	8007a98 <USBD_CDC_Setup+0x15c>
      break;
 8007a92:	bf00      	nop
 8007a94:	e008      	b.n	8007aa8 <USBD_CDC_Setup+0x16c>
      break;
 8007a96:	bf00      	nop
    }
    break;
 8007a98:	e006      	b.n	8007aa8 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8007a9a:	6839      	ldr	r1, [r7, #0]
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f001 fb71 	bl	8009184 <USBD_CtlError>
    ret = USBD_FAIL;
 8007aa2:	2303      	movs	r3, #3
 8007aa4:	75fb      	strb	r3, [r7, #23]
    break;
 8007aa6:	bf00      	nop
  }

  return (uint8_t)ret;
 8007aa8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007aaa:	4618      	mov	r0, r3
 8007aac:	3718      	adds	r7, #24
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	bd80      	pop	{r7, pc}
 8007ab2:	bf00      	nop

08007ab4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b084      	sub	sp, #16
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
 8007abc:	460b      	mov	r3, r1
 8007abe:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007ac6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d101      	bne.n	8007ad6 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007ad2:	2303      	movs	r3, #3
 8007ad4:	e049      	b.n	8007b6a <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007adc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007ade:	78fa      	ldrb	r2, [r7, #3]
 8007ae0:	6879      	ldr	r1, [r7, #4]
 8007ae2:	4613      	mov	r3, r2
 8007ae4:	009b      	lsls	r3, r3, #2
 8007ae6:	4413      	add	r3, r2
 8007ae8:	009b      	lsls	r3, r3, #2
 8007aea:	440b      	add	r3, r1
 8007aec:	3318      	adds	r3, #24
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d029      	beq.n	8007b48 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007af4:	78fa      	ldrb	r2, [r7, #3]
 8007af6:	6879      	ldr	r1, [r7, #4]
 8007af8:	4613      	mov	r3, r2
 8007afa:	009b      	lsls	r3, r3, #2
 8007afc:	4413      	add	r3, r2
 8007afe:	009b      	lsls	r3, r3, #2
 8007b00:	440b      	add	r3, r1
 8007b02:	3318      	adds	r3, #24
 8007b04:	681a      	ldr	r2, [r3, #0]
 8007b06:	78f9      	ldrb	r1, [r7, #3]
 8007b08:	68f8      	ldr	r0, [r7, #12]
 8007b0a:	460b      	mov	r3, r1
 8007b0c:	00db      	lsls	r3, r3, #3
 8007b0e:	1a5b      	subs	r3, r3, r1
 8007b10:	009b      	lsls	r3, r3, #2
 8007b12:	4403      	add	r3, r0
 8007b14:	3344      	adds	r3, #68	; 0x44
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	fbb2 f1f3 	udiv	r1, r2, r3
 8007b1c:	fb03 f301 	mul.w	r3, r3, r1
 8007b20:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d110      	bne.n	8007b48 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8007b26:	78fa      	ldrb	r2, [r7, #3]
 8007b28:	6879      	ldr	r1, [r7, #4]
 8007b2a:	4613      	mov	r3, r2
 8007b2c:	009b      	lsls	r3, r3, #2
 8007b2e:	4413      	add	r3, r2
 8007b30:	009b      	lsls	r3, r3, #2
 8007b32:	440b      	add	r3, r1
 8007b34:	3318      	adds	r3, #24
 8007b36:	2200      	movs	r2, #0
 8007b38:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007b3a:	78f9      	ldrb	r1, [r7, #3]
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	2200      	movs	r2, #0
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	f002 f924 	bl	8009d8e <USBD_LL_Transmit>
 8007b46:	e00f      	b.n	8007b68 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007b56:	691b      	ldr	r3, [r3, #16]
 8007b58:	68ba      	ldr	r2, [r7, #8]
 8007b5a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007b5e:	68ba      	ldr	r2, [r7, #8]
 8007b60:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007b64:	78fa      	ldrb	r2, [r7, #3]
 8007b66:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8007b68:	2300      	movs	r3, #0
}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	3710      	adds	r7, #16
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd80      	pop	{r7, pc}

08007b72 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007b72:	b580      	push	{r7, lr}
 8007b74:	b084      	sub	sp, #16
 8007b76:	af00      	add	r7, sp, #0
 8007b78:	6078      	str	r0, [r7, #4]
 8007b7a:	460b      	mov	r3, r1
 8007b7c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b84:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d101      	bne.n	8007b94 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007b90:	2303      	movs	r3, #3
 8007b92:	e015      	b.n	8007bc0 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007b94:	78fb      	ldrb	r3, [r7, #3]
 8007b96:	4619      	mov	r1, r3
 8007b98:	6878      	ldr	r0, [r7, #4]
 8007b9a:	f002 f93a 	bl	8009e12 <USBD_LL_GetRxDataSize>
 8007b9e:	4602      	mov	r2, r0
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007bac:	68db      	ldr	r3, [r3, #12]
 8007bae:	68fa      	ldr	r2, [r7, #12]
 8007bb0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007bb4:	68fa      	ldr	r2, [r7, #12]
 8007bb6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007bba:	4611      	mov	r1, r2
 8007bbc:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007bbe:	2300      	movs	r3, #0
}
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	3710      	adds	r7, #16
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd80      	pop	{r7, pc}

08007bc8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b084      	sub	sp, #16
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007bd6:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d015      	beq.n	8007c0e <USBD_CDC_EP0_RxReady+0x46>
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007be8:	2bff      	cmp	r3, #255	; 0xff
 8007bea:	d010      	beq.n	8007c0e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007bf2:	689b      	ldr	r3, [r3, #8]
 8007bf4:	68fa      	ldr	r2, [r7, #12]
 8007bf6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8007bfa:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007bfc:	68fa      	ldr	r2, [r7, #12]
 8007bfe:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007c02:	b292      	uxth	r2, r2
 8007c04:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	22ff      	movs	r2, #255	; 0xff
 8007c0a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8007c0e:	2300      	movs	r3, #0
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	3710      	adds	r7, #16
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bd80      	pop	{r7, pc}

08007c18 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007c18:	b480      	push	{r7}
 8007c1a:	b083      	sub	sp, #12
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2243      	movs	r2, #67	; 0x43
 8007c24:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8007c26:	4b03      	ldr	r3, [pc, #12]	; (8007c34 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007c28:	4618      	mov	r0, r3
 8007c2a:	370c      	adds	r7, #12
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c32:	4770      	bx	lr
 8007c34:	20000134 	.word	0x20000134

08007c38 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b083      	sub	sp, #12
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2243      	movs	r2, #67	; 0x43
 8007c44:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8007c46:	4b03      	ldr	r3, [pc, #12]	; (8007c54 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	370c      	adds	r7, #12
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c52:	4770      	bx	lr
 8007c54:	200000f0 	.word	0x200000f0

08007c58 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b083      	sub	sp, #12
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2243      	movs	r2, #67	; 0x43
 8007c64:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8007c66:	4b03      	ldr	r3, [pc, #12]	; (8007c74 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007c68:	4618      	mov	r0, r3
 8007c6a:	370c      	adds	r7, #12
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c72:	4770      	bx	lr
 8007c74:	20000178 	.word	0x20000178

08007c78 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007c78:	b480      	push	{r7}
 8007c7a:	b083      	sub	sp, #12
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	220a      	movs	r2, #10
 8007c84:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007c86:	4b03      	ldr	r3, [pc, #12]	; (8007c94 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	370c      	adds	r7, #12
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c92:	4770      	bx	lr
 8007c94:	200000ac 	.word	0x200000ac

08007c98 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007c98:	b480      	push	{r7}
 8007c9a:	b083      	sub	sp, #12
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
 8007ca0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d101      	bne.n	8007cac <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007ca8:	2303      	movs	r3, #3
 8007caa:	e004      	b.n	8007cb6 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	683a      	ldr	r2, [r7, #0]
 8007cb0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8007cb4:	2300      	movs	r3, #0
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	370c      	adds	r7, #12
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc0:	4770      	bx	lr

08007cc2 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007cc2:	b480      	push	{r7}
 8007cc4:	b087      	sub	sp, #28
 8007cc6:	af00      	add	r7, sp, #0
 8007cc8:	60f8      	str	r0, [r7, #12]
 8007cca:	60b9      	str	r1, [r7, #8]
 8007ccc:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007cd4:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007cd6:	697b      	ldr	r3, [r7, #20]
 8007cd8:	68ba      	ldr	r2, [r7, #8]
 8007cda:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007cde:	697b      	ldr	r3, [r7, #20]
 8007ce0:	687a      	ldr	r2, [r7, #4]
 8007ce2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007ce6:	2300      	movs	r3, #0
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	371c      	adds	r7, #28
 8007cec:	46bd      	mov	sp, r7
 8007cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf2:	4770      	bx	lr

08007cf4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	b085      	sub	sp, #20
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
 8007cfc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d04:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	683a      	ldr	r2, [r7, #0]
 8007d0a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007d0e:	2300      	movs	r3, #0
}
 8007d10:	4618      	mov	r0, r3
 8007d12:	3714      	adds	r7, #20
 8007d14:	46bd      	mov	sp, r7
 8007d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1a:	4770      	bx	lr

08007d1c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b084      	sub	sp, #16
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d2a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d101      	bne.n	8007d3e <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007d3a:	2303      	movs	r3, #3
 8007d3c:	e01a      	b.n	8007d74 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8007d3e:	68bb      	ldr	r3, [r7, #8]
 8007d40:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d114      	bne.n	8007d72 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	2201      	movs	r2, #1
 8007d4c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007d66:	2181      	movs	r1, #129	; 0x81
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	f002 f810 	bl	8009d8e <USBD_LL_Transmit>

    ret = USBD_OK;
 8007d6e:	2300      	movs	r3, #0
 8007d70:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007d72:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d74:	4618      	mov	r0, r3
 8007d76:	3710      	adds	r7, #16
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bd80      	pop	{r7, pc}

08007d7c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b084      	sub	sp, #16
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d8a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d101      	bne.n	8007d9a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007d96:	2303      	movs	r3, #3
 8007d98:	e016      	b.n	8007dc8 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	7c1b      	ldrb	r3, [r3, #16]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d109      	bne.n	8007db6 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007da8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007dac:	2101      	movs	r1, #1
 8007dae:	6878      	ldr	r0, [r7, #4]
 8007db0:	f002 f80e 	bl	8009dd0 <USBD_LL_PrepareReceive>
 8007db4:	e007      	b.n	8007dc6 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007dbc:	2340      	movs	r3, #64	; 0x40
 8007dbe:	2101      	movs	r1, #1
 8007dc0:	6878      	ldr	r0, [r7, #4]
 8007dc2:	f002 f805 	bl	8009dd0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007dc6:	2300      	movs	r3, #0
}
 8007dc8:	4618      	mov	r0, r3
 8007dca:	3710      	adds	r7, #16
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}

08007dd0 <USBD_HID_Init>:
 * @param  pdev: device instance
 * @param  cfgidx: Configuration index
 * @retval status
 */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b084      	sub	sp, #16
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
 8007dd8:	460b      	mov	r3, r1
 8007dda:	70fb      	strb	r3, [r7, #3]
	UNUSED(cfgidx);

	USBD_HID_HandleTypeDef *hhid;

	hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8007ddc:	2010      	movs	r0, #16
 8007dde:	f002 f881 	bl	8009ee4 <malloc>
 8007de2:	4603      	mov	r3, r0
 8007de4:	60fb      	str	r3, [r7, #12]

	if (hhid == NULL)
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d105      	bne.n	8007df8 <USBD_HID_Init+0x28>
	{
		pdev->pClassData = NULL;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2200      	movs	r2, #0
 8007df0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
		return (uint8_t)USBD_EMEM;
 8007df4:	2302      	movs	r3, #2
 8007df6:	e01b      	b.n	8007e30 <USBD_HID_Init+0x60>
	}

	pdev->pClassData = (void *)hhid;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	68fa      	ldr	r2, [r7, #12]
 8007dfc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

	if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	7c1b      	ldrb	r3, [r3, #16]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d103      	bne.n	8007e10 <USBD_HID_Init+0x40>
	{
		pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2207      	movs	r2, #7
 8007e0c:	875a      	strh	r2, [r3, #58]	; 0x3a
 8007e0e:	e002      	b.n	8007e16 <USBD_HID_Init+0x46>
	}
	else   /* LOW and FULL-speed endpoints */
	{
		pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	220a      	movs	r2, #10
 8007e14:	875a      	strh	r2, [r3, #58]	; 0x3a
	}

	/* Open EP IN */
	(void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8007e16:	2304      	movs	r3, #4
 8007e18:	2203      	movs	r2, #3
 8007e1a:	2181      	movs	r1, #129	; 0x81
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f001 fee8 	bl	8009bf2 <USBD_LL_OpenEP>
	pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2201      	movs	r2, #1
 8007e26:	871a      	strh	r2, [r3, #56]	; 0x38

	hhid->state = HID_IDLE;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	731a      	strb	r2, [r3, #12]

	return (uint8_t)USBD_OK;
 8007e2e:	2300      	movs	r3, #0
}
 8007e30:	4618      	mov	r0, r3
 8007e32:	3710      	adds	r7, #16
 8007e34:	46bd      	mov	sp, r7
 8007e36:	bd80      	pop	{r7, pc}

08007e38 <USBD_HID_DeInit>:
 * @param  pdev: device instance
 * @param  cfgidx: Configuration index
 * @retval status
 */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b082      	sub	sp, #8
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
 8007e40:	460b      	mov	r3, r1
 8007e42:	70fb      	strb	r3, [r7, #3]
	UNUSED(cfgidx);

	/* Close HID EPs */
	(void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8007e44:	2181      	movs	r1, #129	; 0x81
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f001 fef9 	bl	8009c3e <USBD_LL_CloseEP>
	pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	871a      	strh	r2, [r3, #56]	; 0x38
	pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2200      	movs	r2, #0
 8007e56:	875a      	strh	r2, [r3, #58]	; 0x3a

	/* FRee allocated memory */
	if (pdev->pClassData != NULL)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d009      	beq.n	8007e76 <USBD_HID_DeInit+0x3e>
	{
		(void)USBD_free(pdev->pClassData);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e68:	4618      	mov	r0, r3
 8007e6a:	f002 f843 	bl	8009ef4 <free>
		pdev->pClassData = NULL;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2200      	movs	r2, #0
 8007e72:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
	}

	return (uint8_t)USBD_OK;
 8007e76:	2300      	movs	r3, #0
}
 8007e78:	4618      	mov	r0, r3
 8007e7a:	3708      	adds	r7, #8
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	bd80      	pop	{r7, pc}

08007e80 <USBD_HID_Setup>:
 * @param  pdev: instance
 * @param  req: usb requests
 * @retval status
 */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b086      	sub	sp, #24
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
 8007e88:	6039      	str	r1, [r7, #0]
	USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e90:	60fb      	str	r3, [r7, #12]
	USBD_StatusTypeDef ret = USBD_OK;
 8007e92:	2300      	movs	r3, #0
 8007e94:	75fb      	strb	r3, [r7, #23]
	uint16_t len;
	uint8_t *pbuf;
	uint16_t status_info = 0U;
 8007e96:	2300      	movs	r3, #0
 8007e98:	817b      	strh	r3, [r7, #10]

	switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	781b      	ldrb	r3, [r3, #0]
 8007e9e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d045      	beq.n	8007f32 <USBD_HID_Setup+0xb2>
 8007ea6:	2b20      	cmp	r3, #32
 8007ea8:	f040 80d4 	bne.w	8008054 <USBD_HID_Setup+0x1d4>
	{
	case USB_REQ_TYPE_CLASS :
		switch (req->bRequest)
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	785b      	ldrb	r3, [r3, #1]
 8007eb0:	3b02      	subs	r3, #2
 8007eb2:	2b09      	cmp	r3, #9
 8007eb4:	d835      	bhi.n	8007f22 <USBD_HID_Setup+0xa2>
 8007eb6:	a201      	add	r2, pc, #4	; (adr r2, 8007ebc <USBD_HID_Setup+0x3c>)
 8007eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ebc:	08007f13 	.word	0x08007f13
 8007ec0:	08007ef3 	.word	0x08007ef3
 8007ec4:	08007f23 	.word	0x08007f23
 8007ec8:	08007f23 	.word	0x08007f23
 8007ecc:	08007f23 	.word	0x08007f23
 8007ed0:	08007f23 	.word	0x08007f23
 8007ed4:	08007f23 	.word	0x08007f23
 8007ed8:	08007f23 	.word	0x08007f23
 8007edc:	08007f01 	.word	0x08007f01
 8007ee0:	08007ee5 	.word	0x08007ee5
		{
		case HID_REQ_SET_PROTOCOL:
			hhid->Protocol = (uint8_t)(req->wValue);
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	885b      	ldrh	r3, [r3, #2]
 8007ee8:	b2db      	uxtb	r3, r3
 8007eea:	461a      	mov	r2, r3
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	601a      	str	r2, [r3, #0]
			break;
 8007ef0:	e01e      	b.n	8007f30 <USBD_HID_Setup+0xb0>

		case HID_REQ_GET_PROTOCOL:
			(void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	2201      	movs	r2, #1
 8007ef6:	4619      	mov	r1, r3
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f001 f9b4 	bl	8009266 <USBD_CtlSendData>
			break;
 8007efe:	e017      	b.n	8007f30 <USBD_HID_Setup+0xb0>

		case HID_REQ_SET_IDLE:
			hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	885b      	ldrh	r3, [r3, #2]
 8007f04:	0a1b      	lsrs	r3, r3, #8
 8007f06:	b29b      	uxth	r3, r3
 8007f08:	b2db      	uxtb	r3, r3
 8007f0a:	461a      	mov	r2, r3
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	605a      	str	r2, [r3, #4]
			break;
 8007f10:	e00e      	b.n	8007f30 <USBD_HID_Setup+0xb0>

		case HID_REQ_GET_IDLE:
			(void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	3304      	adds	r3, #4
 8007f16:	2201      	movs	r2, #1
 8007f18:	4619      	mov	r1, r3
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f001 f9a3 	bl	8009266 <USBD_CtlSendData>
			break;
 8007f20:	e006      	b.n	8007f30 <USBD_HID_Setup+0xb0>

		default:
			USBD_CtlError(pdev, req);
 8007f22:	6839      	ldr	r1, [r7, #0]
 8007f24:	6878      	ldr	r0, [r7, #4]
 8007f26:	f001 f92d 	bl	8009184 <USBD_CtlError>
			ret = USBD_FAIL;
 8007f2a:	2303      	movs	r3, #3
 8007f2c:	75fb      	strb	r3, [r7, #23]
			break;
 8007f2e:	bf00      	nop
		}
		break;
 8007f30:	e097      	b.n	8008062 <USBD_HID_Setup+0x1e2>
		case USB_REQ_TYPE_STANDARD:
			switch (req->bRequest)
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	785b      	ldrb	r3, [r3, #1]
 8007f36:	2b0b      	cmp	r3, #11
 8007f38:	f200 8083 	bhi.w	8008042 <USBD_HID_Setup+0x1c2>
 8007f3c:	a201      	add	r2, pc, #4	; (adr r2, 8007f44 <USBD_HID_Setup+0xc4>)
 8007f3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f42:	bf00      	nop
 8007f44:	08007f75 	.word	0x08007f75
 8007f48:	08008051 	.word	0x08008051
 8007f4c:	08008043 	.word	0x08008043
 8007f50:	08008043 	.word	0x08008043
 8007f54:	08008043 	.word	0x08008043
 8007f58:	08008043 	.word	0x08008043
 8007f5c:	08007f9d 	.word	0x08007f9d
 8007f60:	08008043 	.word	0x08008043
 8007f64:	08008043 	.word	0x08008043
 8007f68:	08008043 	.word	0x08008043
 8007f6c:	08007ff5 	.word	0x08007ff5
 8007f70:	0800801d 	.word	0x0800801d
			{
			case USB_REQ_GET_STATUS:
				if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f7a:	2b03      	cmp	r3, #3
 8007f7c:	d107      	bne.n	8007f8e <USBD_HID_Setup+0x10e>
				{
					(void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007f7e:	f107 030a 	add.w	r3, r7, #10
 8007f82:	2202      	movs	r2, #2
 8007f84:	4619      	mov	r1, r3
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f001 f96d 	bl	8009266 <USBD_CtlSendData>
				else
				{
					USBD_CtlError(pdev, req);
					ret = USBD_FAIL;
				}
				break;
 8007f8c:	e061      	b.n	8008052 <USBD_HID_Setup+0x1d2>
					USBD_CtlError(pdev, req);
 8007f8e:	6839      	ldr	r1, [r7, #0]
 8007f90:	6878      	ldr	r0, [r7, #4]
 8007f92:	f001 f8f7 	bl	8009184 <USBD_CtlError>
					ret = USBD_FAIL;
 8007f96:	2303      	movs	r3, #3
 8007f98:	75fb      	strb	r3, [r7, #23]
				break;
 8007f9a:	e05a      	b.n	8008052 <USBD_HID_Setup+0x1d2>

			case USB_REQ_GET_DESCRIPTOR:
				if ((req->wValue >> 8) == HID_REPORT_DESC)
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	885b      	ldrh	r3, [r3, #2]
 8007fa0:	0a1b      	lsrs	r3, r3, #8
 8007fa2:	b29b      	uxth	r3, r3
 8007fa4:	2b22      	cmp	r3, #34	; 0x22
 8007fa6:	d108      	bne.n	8007fba <USBD_HID_Setup+0x13a>
				{
					len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	88db      	ldrh	r3, [r3, #6]
 8007fac:	2b3f      	cmp	r3, #63	; 0x3f
 8007fae:	bf28      	it	cs
 8007fb0:	233f      	movcs	r3, #63	; 0x3f
 8007fb2:	82bb      	strh	r3, [r7, #20]
					pbuf = HID_MOUSE_ReportDesc;
 8007fb4:	4b2d      	ldr	r3, [pc, #180]	; (800806c <USBD_HID_Setup+0x1ec>)
 8007fb6:	613b      	str	r3, [r7, #16]
 8007fb8:	e015      	b.n	8007fe6 <USBD_HID_Setup+0x166>
				}
				else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	885b      	ldrh	r3, [r3, #2]
 8007fbe:	0a1b      	lsrs	r3, r3, #8
 8007fc0:	b29b      	uxth	r3, r3
 8007fc2:	2b21      	cmp	r3, #33	; 0x21
 8007fc4:	d108      	bne.n	8007fd8 <USBD_HID_Setup+0x158>
				{
					pbuf = USBD_HID_Desc;
 8007fc6:	4b2a      	ldr	r3, [pc, #168]	; (8008070 <USBD_HID_Setup+0x1f0>)
 8007fc8:	613b      	str	r3, [r7, #16]
					len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	88db      	ldrh	r3, [r3, #6]
 8007fce:	2b09      	cmp	r3, #9
 8007fd0:	bf28      	it	cs
 8007fd2:	2309      	movcs	r3, #9
 8007fd4:	82bb      	strh	r3, [r7, #20]
 8007fd6:	e006      	b.n	8007fe6 <USBD_HID_Setup+0x166>
				}
				else
				{
					USBD_CtlError(pdev, req);
 8007fd8:	6839      	ldr	r1, [r7, #0]
 8007fda:	6878      	ldr	r0, [r7, #4]
 8007fdc:	f001 f8d2 	bl	8009184 <USBD_CtlError>
					ret = USBD_FAIL;
 8007fe0:	2303      	movs	r3, #3
 8007fe2:	75fb      	strb	r3, [r7, #23]
					break;
 8007fe4:	e035      	b.n	8008052 <USBD_HID_Setup+0x1d2>
				}
				(void)USBD_CtlSendData(pdev, pbuf, len);
 8007fe6:	8abb      	ldrh	r3, [r7, #20]
 8007fe8:	461a      	mov	r2, r3
 8007fea:	6939      	ldr	r1, [r7, #16]
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	f001 f93a 	bl	8009266 <USBD_CtlSendData>
				break;
 8007ff2:	e02e      	b.n	8008052 <USBD_HID_Setup+0x1d2>

			case USB_REQ_GET_INTERFACE :
				if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ffa:	2b03      	cmp	r3, #3
 8007ffc:	d107      	bne.n	800800e <USBD_HID_Setup+0x18e>
				{
					(void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	3308      	adds	r3, #8
 8008002:	2201      	movs	r2, #1
 8008004:	4619      	mov	r1, r3
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	f001 f92d 	bl	8009266 <USBD_CtlSendData>
				else
				{
					USBD_CtlError(pdev, req);
					ret = USBD_FAIL;
				}
				break;
 800800c:	e021      	b.n	8008052 <USBD_HID_Setup+0x1d2>
					USBD_CtlError(pdev, req);
 800800e:	6839      	ldr	r1, [r7, #0]
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	f001 f8b7 	bl	8009184 <USBD_CtlError>
					ret = USBD_FAIL;
 8008016:	2303      	movs	r3, #3
 8008018:	75fb      	strb	r3, [r7, #23]
				break;
 800801a:	e01a      	b.n	8008052 <USBD_HID_Setup+0x1d2>

			case USB_REQ_SET_INTERFACE:
				if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008022:	2b03      	cmp	r3, #3
 8008024:	d106      	bne.n	8008034 <USBD_HID_Setup+0x1b4>
				{
					hhid->AltSetting = (uint8_t)(req->wValue);
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	885b      	ldrh	r3, [r3, #2]
 800802a:	b2db      	uxtb	r3, r3
 800802c:	461a      	mov	r2, r3
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	609a      	str	r2, [r3, #8]
				else
				{
					USBD_CtlError(pdev, req);
					ret = USBD_FAIL;
				}
				break;
 8008032:	e00e      	b.n	8008052 <USBD_HID_Setup+0x1d2>
					USBD_CtlError(pdev, req);
 8008034:	6839      	ldr	r1, [r7, #0]
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f001 f8a4 	bl	8009184 <USBD_CtlError>
					ret = USBD_FAIL;
 800803c:	2303      	movs	r3, #3
 800803e:	75fb      	strb	r3, [r7, #23]
				break;
 8008040:	e007      	b.n	8008052 <USBD_HID_Setup+0x1d2>

			case USB_REQ_CLEAR_FEATURE:
				break;

			default:
				USBD_CtlError(pdev, req);
 8008042:	6839      	ldr	r1, [r7, #0]
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f001 f89d 	bl	8009184 <USBD_CtlError>
				ret = USBD_FAIL;
 800804a:	2303      	movs	r3, #3
 800804c:	75fb      	strb	r3, [r7, #23]
				break;
 800804e:	e000      	b.n	8008052 <USBD_HID_Setup+0x1d2>
				break;
 8008050:	bf00      	nop
			}
			break;
 8008052:	e006      	b.n	8008062 <USBD_HID_Setup+0x1e2>

			default:
				USBD_CtlError(pdev, req);
 8008054:	6839      	ldr	r1, [r7, #0]
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f001 f894 	bl	8009184 <USBD_CtlError>
				ret = USBD_FAIL;
 800805c:	2303      	movs	r3, #3
 800805e:	75fb      	strb	r3, [r7, #23]
				break;
 8008060:	bf00      	nop
	}

	return (uint8_t)ret;
 8008062:	7dfb      	ldrb	r3, [r7, #23]
}
 8008064:	4618      	mov	r0, r3
 8008066:	3718      	adds	r7, #24
 8008068:	46bd      	mov	sp, r7
 800806a:	bd80      	pop	{r7, pc}
 800806c:	20000278 	.word	0x20000278
 8008070:	20000260 	.word	0x20000260

08008074 <USBD_HID_SendReport>:
 * @param  pdev: device instance
 * @param  buff: pointer to report
 * @retval status
 */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b086      	sub	sp, #24
 8008078:	af00      	add	r7, sp, #0
 800807a:	60f8      	str	r0, [r7, #12]
 800807c:	60b9      	str	r1, [r7, #8]
 800807e:	4613      	mov	r3, r2
 8008080:	80fb      	strh	r3, [r7, #6]
	USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008088:	617b      	str	r3, [r7, #20]

	if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008090:	2b03      	cmp	r3, #3
 8008092:	d10c      	bne.n	80080ae <USBD_HID_SendReport+0x3a>
	{
		if (hhid->state == HID_IDLE)
 8008094:	697b      	ldr	r3, [r7, #20]
 8008096:	7b1b      	ldrb	r3, [r3, #12]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d108      	bne.n	80080ae <USBD_HID_SendReport+0x3a>
		{
			hhid->state = HID_BUSY;
 800809c:	697b      	ldr	r3, [r7, #20]
 800809e:	2201      	movs	r2, #1
 80080a0:	731a      	strb	r2, [r3, #12]
			(void)USBD_LL_Transmit(pdev, HID_EPIN_ADDR, report, len);
 80080a2:	88fb      	ldrh	r3, [r7, #6]
 80080a4:	68ba      	ldr	r2, [r7, #8]
 80080a6:	2181      	movs	r1, #129	; 0x81
 80080a8:	68f8      	ldr	r0, [r7, #12]
 80080aa:	f001 fe70 	bl	8009d8e <USBD_LL_Transmit>
		}
	}

	return (uint8_t)USBD_OK;
 80080ae:	2300      	movs	r3, #0
}
 80080b0:	4618      	mov	r0, r3
 80080b2:	3718      	adds	r7, #24
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bd80      	pop	{r7, pc}

080080b8 <USBD_HID_GetFSCfgDesc>:
 * @param  speed : current device speed
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 80080b8:	b480      	push	{r7}
 80080ba:	b083      	sub	sp, #12
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
	*length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2222      	movs	r2, #34	; 0x22
 80080c4:	801a      	strh	r2, [r3, #0]

	return USBD_HID_CfgFSDesc;
 80080c6:	4b03      	ldr	r3, [pc, #12]	; (80080d4 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	370c      	adds	r7, #12
 80080cc:	46bd      	mov	sp, r7
 80080ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d2:	4770      	bx	lr
 80080d4:	200001f4 	.word	0x200001f4

080080d8 <USBD_HID_GetHSCfgDesc>:
 * @param  speed : current device speed
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 80080d8:	b480      	push	{r7}
 80080da:	b083      	sub	sp, #12
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
	*length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2222      	movs	r2, #34	; 0x22
 80080e4:	801a      	strh	r2, [r3, #0]

	return USBD_HID_CfgHSDesc;
 80080e6:	4b03      	ldr	r3, [pc, #12]	; (80080f4 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 80080e8:	4618      	mov	r0, r3
 80080ea:	370c      	adds	r7, #12
 80080ec:	46bd      	mov	sp, r7
 80080ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f2:	4770      	bx	lr
 80080f4:	20000218 	.word	0x20000218

080080f8 <USBD_HID_GetOtherSpeedCfgDesc>:
 * @param  speed : current device speed
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80080f8:	b480      	push	{r7}
 80080fa:	b083      	sub	sp, #12
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
	*length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2222      	movs	r2, #34	; 0x22
 8008104:	801a      	strh	r2, [r3, #0]

	return USBD_HID_OtherSpeedCfgDesc;
 8008106:	4b03      	ldr	r3, [pc, #12]	; (8008114 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8008108:	4618      	mov	r0, r3
 800810a:	370c      	adds	r7, #12
 800810c:	46bd      	mov	sp, r7
 800810e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008112:	4770      	bx	lr
 8008114:	2000023c 	.word	0x2000023c

08008118 <USBD_HID_DataIn>:
 * @param  pdev: device instance
 * @param  epnum: endpoint index
 * @retval status
 */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008118:	b480      	push	{r7}
 800811a:	b083      	sub	sp, #12
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
 8008120:	460b      	mov	r3, r1
 8008122:	70fb      	strb	r3, [r7, #3]
	UNUSED(epnum);
	/* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
	((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800812a:	2200      	movs	r2, #0
 800812c:	731a      	strb	r2, [r3, #12]

	return (uint8_t)USBD_OK;
 800812e:	2300      	movs	r3, #0
}
 8008130:	4618      	mov	r0, r3
 8008132:	370c      	adds	r7, #12
 8008134:	46bd      	mov	sp, r7
 8008136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813a:	4770      	bx	lr

0800813c <USBD_HID_GetDeviceQualifierDesc>:
 *         return Device Qualifier descriptor
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800813c:	b480      	push	{r7}
 800813e:	b083      	sub	sp, #12
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
	*length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	220a      	movs	r2, #10
 8008148:	801a      	strh	r2, [r3, #0]

	return USBD_HID_DeviceQualifierDesc;
 800814a:	4b03      	ldr	r3, [pc, #12]	; (8008158 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 800814c:	4618      	mov	r0, r3
 800814e:	370c      	adds	r7, #12
 8008150:	46bd      	mov	sp, r7
 8008152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008156:	4770      	bx	lr
 8008158:	2000026c 	.word	0x2000026c

0800815c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b086      	sub	sp, #24
 8008160:	af00      	add	r7, sp, #0
 8008162:	60f8      	str	r0, [r7, #12]
 8008164:	60b9      	str	r1, [r7, #8]
 8008166:	4613      	mov	r3, r2
 8008168:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d101      	bne.n	8008174 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008170:	2303      	movs	r3, #3
 8008172:	e025      	b.n	80081c0 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800817a:	2b00      	cmp	r3, #0
 800817c:	d003      	beq.n	8008186 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	2200      	movs	r2, #0
 8008182:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800818c:	2b00      	cmp	r3, #0
 800818e:	d003      	beq.n	8008198 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	2200      	movs	r2, #0
 8008194:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d003      	beq.n	80081a6 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	68ba      	ldr	r2, [r7, #8]
 80081a2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	2201      	movs	r2, #1
 80081aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	79fa      	ldrb	r2, [r7, #7]
 80081b2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80081b4:	68f8      	ldr	r0, [r7, #12]
 80081b6:	f001 fcb5 	bl	8009b24 <USBD_LL_Init>
 80081ba:	4603      	mov	r3, r0
 80081bc:	75fb      	strb	r3, [r7, #23]

  return ret;
 80081be:	7dfb      	ldrb	r3, [r7, #23]
}
 80081c0:	4618      	mov	r0, r3
 80081c2:	3718      	adds	r7, #24
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bd80      	pop	{r7, pc}

080081c8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b084      	sub	sp, #16
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
 80081d0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80081d2:	2300      	movs	r3, #0
 80081d4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d101      	bne.n	80081e0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80081dc:	2303      	movs	r3, #3
 80081de:	e010      	b.n	8008202 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	683a      	ldr	r2, [r7, #0]
 80081e4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081f0:	f107 020e 	add.w	r2, r7, #14
 80081f4:	4610      	mov	r0, r2
 80081f6:	4798      	blx	r3
 80081f8:	4602      	mov	r2, r0
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8008200:	2300      	movs	r3, #0
}
 8008202:	4618      	mov	r0, r3
 8008204:	3710      	adds	r7, #16
 8008206:	46bd      	mov	sp, r7
 8008208:	bd80      	pop	{r7, pc}

0800820a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800820a:	b580      	push	{r7, lr}
 800820c:	b082      	sub	sp, #8
 800820e:	af00      	add	r7, sp, #0
 8008210:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f001 fcd2 	bl	8009bbc <USBD_LL_Start>
 8008218:	4603      	mov	r3, r0
}
 800821a:	4618      	mov	r0, r3
 800821c:	3708      	adds	r7, #8
 800821e:	46bd      	mov	sp, r7
 8008220:	bd80      	pop	{r7, pc}

08008222 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008222:	b480      	push	{r7}
 8008224:	b083      	sub	sp, #12
 8008226:	af00      	add	r7, sp, #0
 8008228:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800822a:	2300      	movs	r3, #0
}
 800822c:	4618      	mov	r0, r3
 800822e:	370c      	adds	r7, #12
 8008230:	46bd      	mov	sp, r7
 8008232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008236:	4770      	bx	lr

08008238 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b084      	sub	sp, #16
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
 8008240:	460b      	mov	r3, r1
 8008242:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008244:	2303      	movs	r3, #3
 8008246:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800824e:	2b00      	cmp	r3, #0
 8008250:	d009      	beq.n	8008266 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	78fa      	ldrb	r2, [r7, #3]
 800825c:	4611      	mov	r1, r2
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	4798      	blx	r3
 8008262:	4603      	mov	r3, r0
 8008264:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008266:	7bfb      	ldrb	r3, [r7, #15]
}
 8008268:	4618      	mov	r0, r3
 800826a:	3710      	adds	r7, #16
 800826c:	46bd      	mov	sp, r7
 800826e:	bd80      	pop	{r7, pc}

08008270 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b082      	sub	sp, #8
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
 8008278:	460b      	mov	r3, r1
 800827a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008282:	2b00      	cmp	r3, #0
 8008284:	d007      	beq.n	8008296 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800828c:	685b      	ldr	r3, [r3, #4]
 800828e:	78fa      	ldrb	r2, [r7, #3]
 8008290:	4611      	mov	r1, r2
 8008292:	6878      	ldr	r0, [r7, #4]
 8008294:	4798      	blx	r3
  }

  return USBD_OK;
 8008296:	2300      	movs	r3, #0
}
 8008298:	4618      	mov	r0, r3
 800829a:	3708      	adds	r7, #8
 800829c:	46bd      	mov	sp, r7
 800829e:	bd80      	pop	{r7, pc}

080082a0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b084      	sub	sp, #16
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
 80082a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80082b0:	6839      	ldr	r1, [r7, #0]
 80082b2:	4618      	mov	r0, r3
 80082b4:	f000 ff2c 	bl	8009110 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2201      	movs	r2, #1
 80082bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80082c6:	461a      	mov	r2, r3
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80082d4:	f003 031f 	and.w	r3, r3, #31
 80082d8:	2b01      	cmp	r3, #1
 80082da:	d00e      	beq.n	80082fa <USBD_LL_SetupStage+0x5a>
 80082dc:	2b01      	cmp	r3, #1
 80082de:	d302      	bcc.n	80082e6 <USBD_LL_SetupStage+0x46>
 80082e0:	2b02      	cmp	r3, #2
 80082e2:	d014      	beq.n	800830e <USBD_LL_SetupStage+0x6e>
 80082e4:	e01d      	b.n	8008322 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80082ec:	4619      	mov	r1, r3
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f000 fa18 	bl	8008724 <USBD_StdDevReq>
 80082f4:	4603      	mov	r3, r0
 80082f6:	73fb      	strb	r3, [r7, #15]
      break;
 80082f8:	e020      	b.n	800833c <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008300:	4619      	mov	r1, r3
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	f000 fa7c 	bl	8008800 <USBD_StdItfReq>
 8008308:	4603      	mov	r3, r0
 800830a:	73fb      	strb	r3, [r7, #15]
      break;
 800830c:	e016      	b.n	800833c <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008314:	4619      	mov	r1, r3
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f000 fab8 	bl	800888c <USBD_StdEPReq>
 800831c:	4603      	mov	r3, r0
 800831e:	73fb      	strb	r3, [r7, #15]
      break;
 8008320:	e00c      	b.n	800833c <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008328:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800832c:	b2db      	uxtb	r3, r3
 800832e:	4619      	mov	r1, r3
 8008330:	6878      	ldr	r0, [r7, #4]
 8008332:	f001 fca3 	bl	8009c7c <USBD_LL_StallEP>
 8008336:	4603      	mov	r3, r0
 8008338:	73fb      	strb	r3, [r7, #15]
      break;
 800833a:	bf00      	nop
  }

  return ret;
 800833c:	7bfb      	ldrb	r3, [r7, #15]
}
 800833e:	4618      	mov	r0, r3
 8008340:	3710      	adds	r7, #16
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}

08008346 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008346:	b580      	push	{r7, lr}
 8008348:	b086      	sub	sp, #24
 800834a:	af00      	add	r7, sp, #0
 800834c:	60f8      	str	r0, [r7, #12]
 800834e:	460b      	mov	r3, r1
 8008350:	607a      	str	r2, [r7, #4]
 8008352:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008354:	7afb      	ldrb	r3, [r7, #11]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d137      	bne.n	80083ca <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008360:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008368:	2b03      	cmp	r3, #3
 800836a:	d14a      	bne.n	8008402 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800836c:	693b      	ldr	r3, [r7, #16]
 800836e:	689a      	ldr	r2, [r3, #8]
 8008370:	693b      	ldr	r3, [r7, #16]
 8008372:	68db      	ldr	r3, [r3, #12]
 8008374:	429a      	cmp	r2, r3
 8008376:	d913      	bls.n	80083a0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008378:	693b      	ldr	r3, [r7, #16]
 800837a:	689a      	ldr	r2, [r3, #8]
 800837c:	693b      	ldr	r3, [r7, #16]
 800837e:	68db      	ldr	r3, [r3, #12]
 8008380:	1ad2      	subs	r2, r2, r3
 8008382:	693b      	ldr	r3, [r7, #16]
 8008384:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008386:	693b      	ldr	r3, [r7, #16]
 8008388:	68da      	ldr	r2, [r3, #12]
 800838a:	693b      	ldr	r3, [r7, #16]
 800838c:	689b      	ldr	r3, [r3, #8]
 800838e:	4293      	cmp	r3, r2
 8008390:	bf28      	it	cs
 8008392:	4613      	movcs	r3, r2
 8008394:	461a      	mov	r2, r3
 8008396:	6879      	ldr	r1, [r7, #4]
 8008398:	68f8      	ldr	r0, [r7, #12]
 800839a:	f000 ffad 	bl	80092f8 <USBD_CtlContinueRx>
 800839e:	e030      	b.n	8008402 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083a6:	691b      	ldr	r3, [r3, #16]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d00a      	beq.n	80083c2 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80083b2:	2b03      	cmp	r3, #3
 80083b4:	d105      	bne.n	80083c2 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083bc:	691b      	ldr	r3, [r3, #16]
 80083be:	68f8      	ldr	r0, [r7, #12]
 80083c0:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 80083c2:	68f8      	ldr	r0, [r7, #12]
 80083c4:	f000 ffa9 	bl	800931a <USBD_CtlSendStatus>
 80083c8:	e01b      	b.n	8008402 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083d0:	699b      	ldr	r3, [r3, #24]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d013      	beq.n	80083fe <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80083dc:	2b03      	cmp	r3, #3
 80083de:	d10e      	bne.n	80083fe <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083e6:	699b      	ldr	r3, [r3, #24]
 80083e8:	7afa      	ldrb	r2, [r7, #11]
 80083ea:	4611      	mov	r1, r2
 80083ec:	68f8      	ldr	r0, [r7, #12]
 80083ee:	4798      	blx	r3
 80083f0:	4603      	mov	r3, r0
 80083f2:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80083f4:	7dfb      	ldrb	r3, [r7, #23]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d003      	beq.n	8008402 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 80083fa:	7dfb      	ldrb	r3, [r7, #23]
 80083fc:	e002      	b.n	8008404 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80083fe:	2303      	movs	r3, #3
 8008400:	e000      	b.n	8008404 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8008402:	2300      	movs	r3, #0
}
 8008404:	4618      	mov	r0, r3
 8008406:	3718      	adds	r7, #24
 8008408:	46bd      	mov	sp, r7
 800840a:	bd80      	pop	{r7, pc}

0800840c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b086      	sub	sp, #24
 8008410:	af00      	add	r7, sp, #0
 8008412:	60f8      	str	r0, [r7, #12]
 8008414:	460b      	mov	r3, r1
 8008416:	607a      	str	r2, [r7, #4]
 8008418:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800841a:	7afb      	ldrb	r3, [r7, #11]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d16a      	bne.n	80084f6 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	3314      	adds	r3, #20
 8008424:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800842c:	2b02      	cmp	r3, #2
 800842e:	d155      	bne.n	80084dc <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8008430:	693b      	ldr	r3, [r7, #16]
 8008432:	689a      	ldr	r2, [r3, #8]
 8008434:	693b      	ldr	r3, [r7, #16]
 8008436:	68db      	ldr	r3, [r3, #12]
 8008438:	429a      	cmp	r2, r3
 800843a:	d914      	bls.n	8008466 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800843c:	693b      	ldr	r3, [r7, #16]
 800843e:	689a      	ldr	r2, [r3, #8]
 8008440:	693b      	ldr	r3, [r7, #16]
 8008442:	68db      	ldr	r3, [r3, #12]
 8008444:	1ad2      	subs	r2, r2, r3
 8008446:	693b      	ldr	r3, [r7, #16]
 8008448:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800844a:	693b      	ldr	r3, [r7, #16]
 800844c:	689b      	ldr	r3, [r3, #8]
 800844e:	461a      	mov	r2, r3
 8008450:	6879      	ldr	r1, [r7, #4]
 8008452:	68f8      	ldr	r0, [r7, #12]
 8008454:	f000 ff22 	bl	800929c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008458:	2300      	movs	r3, #0
 800845a:	2200      	movs	r2, #0
 800845c:	2100      	movs	r1, #0
 800845e:	68f8      	ldr	r0, [r7, #12]
 8008460:	f001 fcb6 	bl	8009dd0 <USBD_LL_PrepareReceive>
 8008464:	e03a      	b.n	80084dc <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008466:	693b      	ldr	r3, [r7, #16]
 8008468:	68da      	ldr	r2, [r3, #12]
 800846a:	693b      	ldr	r3, [r7, #16]
 800846c:	689b      	ldr	r3, [r3, #8]
 800846e:	429a      	cmp	r2, r3
 8008470:	d11c      	bne.n	80084ac <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008472:	693b      	ldr	r3, [r7, #16]
 8008474:	685a      	ldr	r2, [r3, #4]
 8008476:	693b      	ldr	r3, [r7, #16]
 8008478:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800847a:	429a      	cmp	r2, r3
 800847c:	d316      	bcc.n	80084ac <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800847e:	693b      	ldr	r3, [r7, #16]
 8008480:	685a      	ldr	r2, [r3, #4]
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008488:	429a      	cmp	r2, r3
 800848a:	d20f      	bcs.n	80084ac <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800848c:	2200      	movs	r2, #0
 800848e:	2100      	movs	r1, #0
 8008490:	68f8      	ldr	r0, [r7, #12]
 8008492:	f000 ff03 	bl	800929c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	2200      	movs	r2, #0
 800849a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800849e:	2300      	movs	r3, #0
 80084a0:	2200      	movs	r2, #0
 80084a2:	2100      	movs	r1, #0
 80084a4:	68f8      	ldr	r0, [r7, #12]
 80084a6:	f001 fc93 	bl	8009dd0 <USBD_LL_PrepareReceive>
 80084aa:	e017      	b.n	80084dc <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084b2:	68db      	ldr	r3, [r3, #12]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d00a      	beq.n	80084ce <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80084be:	2b03      	cmp	r3, #3
 80084c0:	d105      	bne.n	80084ce <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084c8:	68db      	ldr	r3, [r3, #12]
 80084ca:	68f8      	ldr	r0, [r7, #12]
 80084cc:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80084ce:	2180      	movs	r1, #128	; 0x80
 80084d0:	68f8      	ldr	r0, [r7, #12]
 80084d2:	f001 fbd3 	bl	8009c7c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80084d6:	68f8      	ldr	r0, [r7, #12]
 80084d8:	f000 ff32 	bl	8009340 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80084e2:	2b01      	cmp	r3, #1
 80084e4:	d123      	bne.n	800852e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80084e6:	68f8      	ldr	r0, [r7, #12]
 80084e8:	f7ff fe9b 	bl	8008222 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	2200      	movs	r2, #0
 80084f0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80084f4:	e01b      	b.n	800852e <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084fc:	695b      	ldr	r3, [r3, #20]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d013      	beq.n	800852a <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008508:	2b03      	cmp	r3, #3
 800850a:	d10e      	bne.n	800852a <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008512:	695b      	ldr	r3, [r3, #20]
 8008514:	7afa      	ldrb	r2, [r7, #11]
 8008516:	4611      	mov	r1, r2
 8008518:	68f8      	ldr	r0, [r7, #12]
 800851a:	4798      	blx	r3
 800851c:	4603      	mov	r3, r0
 800851e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8008520:	7dfb      	ldrb	r3, [r7, #23]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d003      	beq.n	800852e <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8008526:	7dfb      	ldrb	r3, [r7, #23]
 8008528:	e002      	b.n	8008530 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800852a:	2303      	movs	r3, #3
 800852c:	e000      	b.n	8008530 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800852e:	2300      	movs	r3, #0
}
 8008530:	4618      	mov	r0, r3
 8008532:	3718      	adds	r7, #24
 8008534:	46bd      	mov	sp, r7
 8008536:	bd80      	pop	{r7, pc}

08008538 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b082      	sub	sp, #8
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2201      	movs	r2, #1
 8008544:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2200      	movs	r2, #0
 800854c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2200      	movs	r2, #0
 8008554:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2200      	movs	r2, #0
 800855a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008564:	2b00      	cmp	r3, #0
 8008566:	d009      	beq.n	800857c <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800856e:	685b      	ldr	r3, [r3, #4]
 8008570:	687a      	ldr	r2, [r7, #4]
 8008572:	6852      	ldr	r2, [r2, #4]
 8008574:	b2d2      	uxtb	r2, r2
 8008576:	4611      	mov	r1, r2
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800857c:	2340      	movs	r3, #64	; 0x40
 800857e:	2200      	movs	r2, #0
 8008580:	2100      	movs	r1, #0
 8008582:	6878      	ldr	r0, [r7, #4]
 8008584:	f001 fb35 	bl	8009bf2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2201      	movs	r2, #1
 800858c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2240      	movs	r2, #64	; 0x40
 8008594:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008598:	2340      	movs	r3, #64	; 0x40
 800859a:	2200      	movs	r2, #0
 800859c:	2180      	movs	r1, #128	; 0x80
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	f001 fb27 	bl	8009bf2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2201      	movs	r2, #1
 80085a8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2240      	movs	r2, #64	; 0x40
 80085ae:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80085b0:	2300      	movs	r3, #0
}
 80085b2:	4618      	mov	r0, r3
 80085b4:	3708      	adds	r7, #8
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bd80      	pop	{r7, pc}

080085ba <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80085ba:	b480      	push	{r7}
 80085bc:	b083      	sub	sp, #12
 80085be:	af00      	add	r7, sp, #0
 80085c0:	6078      	str	r0, [r7, #4]
 80085c2:	460b      	mov	r3, r1
 80085c4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	78fa      	ldrb	r2, [r7, #3]
 80085ca:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80085cc:	2300      	movs	r3, #0
}
 80085ce:	4618      	mov	r0, r3
 80085d0:	370c      	adds	r7, #12
 80085d2:	46bd      	mov	sp, r7
 80085d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d8:	4770      	bx	lr

080085da <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80085da:	b480      	push	{r7}
 80085dc:	b083      	sub	sp, #12
 80085de:	af00      	add	r7, sp, #0
 80085e0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2204      	movs	r2, #4
 80085f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80085f6:	2300      	movs	r3, #0
}
 80085f8:	4618      	mov	r0, r3
 80085fa:	370c      	adds	r7, #12
 80085fc:	46bd      	mov	sp, r7
 80085fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008602:	4770      	bx	lr

08008604 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008604:	b480      	push	{r7}
 8008606:	b083      	sub	sp, #12
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008612:	2b04      	cmp	r3, #4
 8008614:	d105      	bne.n	8008622 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008622:	2300      	movs	r3, #0
}
 8008624:	4618      	mov	r0, r3
 8008626:	370c      	adds	r7, #12
 8008628:	46bd      	mov	sp, r7
 800862a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862e:	4770      	bx	lr

08008630 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b082      	sub	sp, #8
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800863e:	2b03      	cmp	r3, #3
 8008640:	d10b      	bne.n	800865a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008648:	69db      	ldr	r3, [r3, #28]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d005      	beq.n	800865a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008654:	69db      	ldr	r3, [r3, #28]
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800865a:	2300      	movs	r3, #0
}
 800865c:	4618      	mov	r0, r3
 800865e:	3708      	adds	r7, #8
 8008660:	46bd      	mov	sp, r7
 8008662:	bd80      	pop	{r7, pc}

08008664 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008664:	b480      	push	{r7}
 8008666:	b083      	sub	sp, #12
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
 800866c:	460b      	mov	r3, r1
 800866e:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8008670:	2300      	movs	r3, #0
}
 8008672:	4618      	mov	r0, r3
 8008674:	370c      	adds	r7, #12
 8008676:	46bd      	mov	sp, r7
 8008678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867c:	4770      	bx	lr

0800867e <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800867e:	b480      	push	{r7}
 8008680:	b083      	sub	sp, #12
 8008682:	af00      	add	r7, sp, #0
 8008684:	6078      	str	r0, [r7, #4]
 8008686:	460b      	mov	r3, r1
 8008688:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800868a:	2300      	movs	r3, #0
}
 800868c:	4618      	mov	r0, r3
 800868e:	370c      	adds	r7, #12
 8008690:	46bd      	mov	sp, r7
 8008692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008696:	4770      	bx	lr

08008698 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008698:	b480      	push	{r7}
 800869a:	b083      	sub	sp, #12
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80086a0:	2300      	movs	r3, #0
}
 80086a2:	4618      	mov	r0, r3
 80086a4:	370c      	adds	r7, #12
 80086a6:	46bd      	mov	sp, r7
 80086a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ac:	4770      	bx	lr

080086ae <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80086ae:	b580      	push	{r7, lr}
 80086b0:	b082      	sub	sp, #8
 80086b2:	af00      	add	r7, sp, #0
 80086b4:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2201      	movs	r2, #1
 80086ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d009      	beq.n	80086dc <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086ce:	685b      	ldr	r3, [r3, #4]
 80086d0:	687a      	ldr	r2, [r7, #4]
 80086d2:	6852      	ldr	r2, [r2, #4]
 80086d4:	b2d2      	uxtb	r2, r2
 80086d6:	4611      	mov	r1, r2
 80086d8:	6878      	ldr	r0, [r7, #4]
 80086da:	4798      	blx	r3
  }

  return USBD_OK;
 80086dc:	2300      	movs	r3, #0
}
 80086de:	4618      	mov	r0, r3
 80086e0:	3708      	adds	r7, #8
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bd80      	pop	{r7, pc}

080086e6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80086e6:	b480      	push	{r7}
 80086e8:	b087      	sub	sp, #28
 80086ea:	af00      	add	r7, sp, #0
 80086ec:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80086f2:	697b      	ldr	r3, [r7, #20]
 80086f4:	781b      	ldrb	r3, [r3, #0]
 80086f6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80086f8:	697b      	ldr	r3, [r7, #20]
 80086fa:	3301      	adds	r3, #1
 80086fc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80086fe:	697b      	ldr	r3, [r7, #20]
 8008700:	781b      	ldrb	r3, [r3, #0]
 8008702:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008704:	8a3b      	ldrh	r3, [r7, #16]
 8008706:	021b      	lsls	r3, r3, #8
 8008708:	b21a      	sxth	r2, r3
 800870a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800870e:	4313      	orrs	r3, r2
 8008710:	b21b      	sxth	r3, r3
 8008712:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008714:	89fb      	ldrh	r3, [r7, #14]
}
 8008716:	4618      	mov	r0, r3
 8008718:	371c      	adds	r7, #28
 800871a:	46bd      	mov	sp, r7
 800871c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008720:	4770      	bx	lr
	...

08008724 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b084      	sub	sp, #16
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
 800872c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800872e:	2300      	movs	r3, #0
 8008730:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	781b      	ldrb	r3, [r3, #0]
 8008736:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800873a:	2b20      	cmp	r3, #32
 800873c:	d004      	beq.n	8008748 <USBD_StdDevReq+0x24>
 800873e:	2b40      	cmp	r3, #64	; 0x40
 8008740:	d002      	beq.n	8008748 <USBD_StdDevReq+0x24>
 8008742:	2b00      	cmp	r3, #0
 8008744:	d00a      	beq.n	800875c <USBD_StdDevReq+0x38>
 8008746:	e050      	b.n	80087ea <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800874e:	689b      	ldr	r3, [r3, #8]
 8008750:	6839      	ldr	r1, [r7, #0]
 8008752:	6878      	ldr	r0, [r7, #4]
 8008754:	4798      	blx	r3
 8008756:	4603      	mov	r3, r0
 8008758:	73fb      	strb	r3, [r7, #15]
    break;
 800875a:	e04b      	b.n	80087f4 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	785b      	ldrb	r3, [r3, #1]
 8008760:	2b09      	cmp	r3, #9
 8008762:	d83c      	bhi.n	80087de <USBD_StdDevReq+0xba>
 8008764:	a201      	add	r2, pc, #4	; (adr r2, 800876c <USBD_StdDevReq+0x48>)
 8008766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800876a:	bf00      	nop
 800876c:	080087c1 	.word	0x080087c1
 8008770:	080087d5 	.word	0x080087d5
 8008774:	080087df 	.word	0x080087df
 8008778:	080087cb 	.word	0x080087cb
 800877c:	080087df 	.word	0x080087df
 8008780:	0800879f 	.word	0x0800879f
 8008784:	08008795 	.word	0x08008795
 8008788:	080087df 	.word	0x080087df
 800878c:	080087b7 	.word	0x080087b7
 8008790:	080087a9 	.word	0x080087a9
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8008794:	6839      	ldr	r1, [r7, #0]
 8008796:	6878      	ldr	r0, [r7, #4]
 8008798:	f000 f9ce 	bl	8008b38 <USBD_GetDescriptor>
      break;
 800879c:	e024      	b.n	80087e8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800879e:	6839      	ldr	r1, [r7, #0]
 80087a0:	6878      	ldr	r0, [r7, #4]
 80087a2:	f000 fb33 	bl	8008e0c <USBD_SetAddress>
      break;
 80087a6:	e01f      	b.n	80087e8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 80087a8:	6839      	ldr	r1, [r7, #0]
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	f000 fb70 	bl	8008e90 <USBD_SetConfig>
 80087b0:	4603      	mov	r3, r0
 80087b2:	73fb      	strb	r3, [r7, #15]
      break;
 80087b4:	e018      	b.n	80087e8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 80087b6:	6839      	ldr	r1, [r7, #0]
 80087b8:	6878      	ldr	r0, [r7, #4]
 80087ba:	f000 fc0d 	bl	8008fd8 <USBD_GetConfig>
      break;
 80087be:	e013      	b.n	80087e8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 80087c0:	6839      	ldr	r1, [r7, #0]
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f000 fc3c 	bl	8009040 <USBD_GetStatus>
      break;
 80087c8:	e00e      	b.n	80087e8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 80087ca:	6839      	ldr	r1, [r7, #0]
 80087cc:	6878      	ldr	r0, [r7, #4]
 80087ce:	f000 fc6a 	bl	80090a6 <USBD_SetFeature>
      break;
 80087d2:	e009      	b.n	80087e8 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 80087d4:	6839      	ldr	r1, [r7, #0]
 80087d6:	6878      	ldr	r0, [r7, #4]
 80087d8:	f000 fc79 	bl	80090ce <USBD_ClrFeature>
      break;
 80087dc:	e004      	b.n	80087e8 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 80087de:	6839      	ldr	r1, [r7, #0]
 80087e0:	6878      	ldr	r0, [r7, #4]
 80087e2:	f000 fccf 	bl	8009184 <USBD_CtlError>
      break;
 80087e6:	bf00      	nop
    }
    break;
 80087e8:	e004      	b.n	80087f4 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 80087ea:	6839      	ldr	r1, [r7, #0]
 80087ec:	6878      	ldr	r0, [r7, #4]
 80087ee:	f000 fcc9 	bl	8009184 <USBD_CtlError>
    break;
 80087f2:	bf00      	nop
  }

  return ret;
 80087f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80087f6:	4618      	mov	r0, r3
 80087f8:	3710      	adds	r7, #16
 80087fa:	46bd      	mov	sp, r7
 80087fc:	bd80      	pop	{r7, pc}
 80087fe:	bf00      	nop

08008800 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b084      	sub	sp, #16
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
 8008808:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800880a:	2300      	movs	r3, #0
 800880c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	781b      	ldrb	r3, [r3, #0]
 8008812:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008816:	2b20      	cmp	r3, #32
 8008818:	d003      	beq.n	8008822 <USBD_StdItfReq+0x22>
 800881a:	2b40      	cmp	r3, #64	; 0x40
 800881c:	d001      	beq.n	8008822 <USBD_StdItfReq+0x22>
 800881e:	2b00      	cmp	r3, #0
 8008820:	d12a      	bne.n	8008878 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008828:	3b01      	subs	r3, #1
 800882a:	2b02      	cmp	r3, #2
 800882c:	d81d      	bhi.n	800886a <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	889b      	ldrh	r3, [r3, #4]
 8008832:	b2db      	uxtb	r3, r3
 8008834:	2b01      	cmp	r3, #1
 8008836:	d813      	bhi.n	8008860 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800883e:	689b      	ldr	r3, [r3, #8]
 8008840:	6839      	ldr	r1, [r7, #0]
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	4798      	blx	r3
 8008846:	4603      	mov	r3, r0
 8008848:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	88db      	ldrh	r3, [r3, #6]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d110      	bne.n	8008874 <USBD_StdItfReq+0x74>
 8008852:	7bfb      	ldrb	r3, [r7, #15]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d10d      	bne.n	8008874 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f000 fd5e 	bl	800931a <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800885e:	e009      	b.n	8008874 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8008860:	6839      	ldr	r1, [r7, #0]
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f000 fc8e 	bl	8009184 <USBD_CtlError>
      break;
 8008868:	e004      	b.n	8008874 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800886a:	6839      	ldr	r1, [r7, #0]
 800886c:	6878      	ldr	r0, [r7, #4]
 800886e:	f000 fc89 	bl	8009184 <USBD_CtlError>
      break;
 8008872:	e000      	b.n	8008876 <USBD_StdItfReq+0x76>
      break;
 8008874:	bf00      	nop
    }
    break;
 8008876:	e004      	b.n	8008882 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8008878:	6839      	ldr	r1, [r7, #0]
 800887a:	6878      	ldr	r0, [r7, #4]
 800887c:	f000 fc82 	bl	8009184 <USBD_CtlError>
    break;
 8008880:	bf00      	nop
  }

  return ret;
 8008882:	7bfb      	ldrb	r3, [r7, #15]
}
 8008884:	4618      	mov	r0, r3
 8008886:	3710      	adds	r7, #16
 8008888:	46bd      	mov	sp, r7
 800888a:	bd80      	pop	{r7, pc}

0800888c <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b084      	sub	sp, #16
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
 8008894:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008896:	2300      	movs	r3, #0
 8008898:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	889b      	ldrh	r3, [r3, #4]
 800889e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	781b      	ldrb	r3, [r3, #0]
 80088a4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80088a8:	2b20      	cmp	r3, #32
 80088aa:	d004      	beq.n	80088b6 <USBD_StdEPReq+0x2a>
 80088ac:	2b40      	cmp	r3, #64	; 0x40
 80088ae:	d002      	beq.n	80088b6 <USBD_StdEPReq+0x2a>
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d00a      	beq.n	80088ca <USBD_StdEPReq+0x3e>
 80088b4:	e135      	b.n	8008b22 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088bc:	689b      	ldr	r3, [r3, #8]
 80088be:	6839      	ldr	r1, [r7, #0]
 80088c0:	6878      	ldr	r0, [r7, #4]
 80088c2:	4798      	blx	r3
 80088c4:	4603      	mov	r3, r0
 80088c6:	73fb      	strb	r3, [r7, #15]
    break;
 80088c8:	e130      	b.n	8008b2c <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	785b      	ldrb	r3, [r3, #1]
 80088ce:	2b01      	cmp	r3, #1
 80088d0:	d03e      	beq.n	8008950 <USBD_StdEPReq+0xc4>
 80088d2:	2b03      	cmp	r3, #3
 80088d4:	d002      	beq.n	80088dc <USBD_StdEPReq+0x50>
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d077      	beq.n	80089ca <USBD_StdEPReq+0x13e>
 80088da:	e11c      	b.n	8008b16 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088e2:	2b02      	cmp	r3, #2
 80088e4:	d002      	beq.n	80088ec <USBD_StdEPReq+0x60>
 80088e6:	2b03      	cmp	r3, #3
 80088e8:	d015      	beq.n	8008916 <USBD_StdEPReq+0x8a>
 80088ea:	e02b      	b.n	8008944 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80088ec:	7bbb      	ldrb	r3, [r7, #14]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d00c      	beq.n	800890c <USBD_StdEPReq+0x80>
 80088f2:	7bbb      	ldrb	r3, [r7, #14]
 80088f4:	2b80      	cmp	r3, #128	; 0x80
 80088f6:	d009      	beq.n	800890c <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80088f8:	7bbb      	ldrb	r3, [r7, #14]
 80088fa:	4619      	mov	r1, r3
 80088fc:	6878      	ldr	r0, [r7, #4]
 80088fe:	f001 f9bd 	bl	8009c7c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008902:	2180      	movs	r1, #128	; 0x80
 8008904:	6878      	ldr	r0, [r7, #4]
 8008906:	f001 f9b9 	bl	8009c7c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800890a:	e020      	b.n	800894e <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800890c:	6839      	ldr	r1, [r7, #0]
 800890e:	6878      	ldr	r0, [r7, #4]
 8008910:	f000 fc38 	bl	8009184 <USBD_CtlError>
        break;
 8008914:	e01b      	b.n	800894e <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	885b      	ldrh	r3, [r3, #2]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d10e      	bne.n	800893c <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800891e:	7bbb      	ldrb	r3, [r7, #14]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d00b      	beq.n	800893c <USBD_StdEPReq+0xb0>
 8008924:	7bbb      	ldrb	r3, [r7, #14]
 8008926:	2b80      	cmp	r3, #128	; 0x80
 8008928:	d008      	beq.n	800893c <USBD_StdEPReq+0xb0>
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	88db      	ldrh	r3, [r3, #6]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d104      	bne.n	800893c <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8008932:	7bbb      	ldrb	r3, [r7, #14]
 8008934:	4619      	mov	r1, r3
 8008936:	6878      	ldr	r0, [r7, #4]
 8008938:	f001 f9a0 	bl	8009c7c <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800893c:	6878      	ldr	r0, [r7, #4]
 800893e:	f000 fcec 	bl	800931a <USBD_CtlSendStatus>

        break;
 8008942:	e004      	b.n	800894e <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8008944:	6839      	ldr	r1, [r7, #0]
 8008946:	6878      	ldr	r0, [r7, #4]
 8008948:	f000 fc1c 	bl	8009184 <USBD_CtlError>
        break;
 800894c:	bf00      	nop
      }
      break;
 800894e:	e0e7      	b.n	8008b20 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008956:	2b02      	cmp	r3, #2
 8008958:	d002      	beq.n	8008960 <USBD_StdEPReq+0xd4>
 800895a:	2b03      	cmp	r3, #3
 800895c:	d015      	beq.n	800898a <USBD_StdEPReq+0xfe>
 800895e:	e02d      	b.n	80089bc <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008960:	7bbb      	ldrb	r3, [r7, #14]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d00c      	beq.n	8008980 <USBD_StdEPReq+0xf4>
 8008966:	7bbb      	ldrb	r3, [r7, #14]
 8008968:	2b80      	cmp	r3, #128	; 0x80
 800896a:	d009      	beq.n	8008980 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800896c:	7bbb      	ldrb	r3, [r7, #14]
 800896e:	4619      	mov	r1, r3
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	f001 f983 	bl	8009c7c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008976:	2180      	movs	r1, #128	; 0x80
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	f001 f97f 	bl	8009c7c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800897e:	e023      	b.n	80089c8 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8008980:	6839      	ldr	r1, [r7, #0]
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	f000 fbfe 	bl	8009184 <USBD_CtlError>
        break;
 8008988:	e01e      	b.n	80089c8 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	885b      	ldrh	r3, [r3, #2]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d119      	bne.n	80089c6 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8008992:	7bbb      	ldrb	r3, [r7, #14]
 8008994:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008998:	2b00      	cmp	r3, #0
 800899a:	d004      	beq.n	80089a6 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800899c:	7bbb      	ldrb	r3, [r7, #14]
 800899e:	4619      	mov	r1, r3
 80089a0:	6878      	ldr	r0, [r7, #4]
 80089a2:	f001 f98a 	bl	8009cba <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f000 fcb7 	bl	800931a <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089b2:	689b      	ldr	r3, [r3, #8]
 80089b4:	6839      	ldr	r1, [r7, #0]
 80089b6:	6878      	ldr	r0, [r7, #4]
 80089b8:	4798      	blx	r3
        }
        break;
 80089ba:	e004      	b.n	80089c6 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 80089bc:	6839      	ldr	r1, [r7, #0]
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	f000 fbe0 	bl	8009184 <USBD_CtlError>
        break;
 80089c4:	e000      	b.n	80089c8 <USBD_StdEPReq+0x13c>
        break;
 80089c6:	bf00      	nop
      }
      break;
 80089c8:	e0aa      	b.n	8008b20 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089d0:	2b02      	cmp	r3, #2
 80089d2:	d002      	beq.n	80089da <USBD_StdEPReq+0x14e>
 80089d4:	2b03      	cmp	r3, #3
 80089d6:	d032      	beq.n	8008a3e <USBD_StdEPReq+0x1b2>
 80089d8:	e097      	b.n	8008b0a <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80089da:	7bbb      	ldrb	r3, [r7, #14]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d007      	beq.n	80089f0 <USBD_StdEPReq+0x164>
 80089e0:	7bbb      	ldrb	r3, [r7, #14]
 80089e2:	2b80      	cmp	r3, #128	; 0x80
 80089e4:	d004      	beq.n	80089f0 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 80089e6:	6839      	ldr	r1, [r7, #0]
 80089e8:	6878      	ldr	r0, [r7, #4]
 80089ea:	f000 fbcb 	bl	8009184 <USBD_CtlError>
          break;
 80089ee:	e091      	b.n	8008b14 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80089f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	da0b      	bge.n	8008a10 <USBD_StdEPReq+0x184>
 80089f8:	7bbb      	ldrb	r3, [r7, #14]
 80089fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80089fe:	4613      	mov	r3, r2
 8008a00:	009b      	lsls	r3, r3, #2
 8008a02:	4413      	add	r3, r2
 8008a04:	009b      	lsls	r3, r3, #2
 8008a06:	3310      	adds	r3, #16
 8008a08:	687a      	ldr	r2, [r7, #4]
 8008a0a:	4413      	add	r3, r2
 8008a0c:	3304      	adds	r3, #4
 8008a0e:	e00b      	b.n	8008a28 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8008a10:	7bbb      	ldrb	r3, [r7, #14]
 8008a12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a16:	4613      	mov	r3, r2
 8008a18:	009b      	lsls	r3, r3, #2
 8008a1a:	4413      	add	r3, r2
 8008a1c:	009b      	lsls	r3, r3, #2
 8008a1e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008a22:	687a      	ldr	r2, [r7, #4]
 8008a24:	4413      	add	r3, r2
 8008a26:	3304      	adds	r3, #4
 8008a28:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8008a2a:	68bb      	ldr	r3, [r7, #8]
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	2202      	movs	r2, #2
 8008a34:	4619      	mov	r1, r3
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	f000 fc15 	bl	8009266 <USBD_CtlSendData>
        break;
 8008a3c:	e06a      	b.n	8008b14 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8008a3e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	da11      	bge.n	8008a6a <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008a46:	7bbb      	ldrb	r3, [r7, #14]
 8008a48:	f003 020f 	and.w	r2, r3, #15
 8008a4c:	6879      	ldr	r1, [r7, #4]
 8008a4e:	4613      	mov	r3, r2
 8008a50:	009b      	lsls	r3, r3, #2
 8008a52:	4413      	add	r3, r2
 8008a54:	009b      	lsls	r3, r3, #2
 8008a56:	440b      	add	r3, r1
 8008a58:	3324      	adds	r3, #36	; 0x24
 8008a5a:	881b      	ldrh	r3, [r3, #0]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d117      	bne.n	8008a90 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8008a60:	6839      	ldr	r1, [r7, #0]
 8008a62:	6878      	ldr	r0, [r7, #4]
 8008a64:	f000 fb8e 	bl	8009184 <USBD_CtlError>
            break;
 8008a68:	e054      	b.n	8008b14 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008a6a:	7bbb      	ldrb	r3, [r7, #14]
 8008a6c:	f003 020f 	and.w	r2, r3, #15
 8008a70:	6879      	ldr	r1, [r7, #4]
 8008a72:	4613      	mov	r3, r2
 8008a74:	009b      	lsls	r3, r3, #2
 8008a76:	4413      	add	r3, r2
 8008a78:	009b      	lsls	r3, r3, #2
 8008a7a:	440b      	add	r3, r1
 8008a7c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008a80:	881b      	ldrh	r3, [r3, #0]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d104      	bne.n	8008a90 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8008a86:	6839      	ldr	r1, [r7, #0]
 8008a88:	6878      	ldr	r0, [r7, #4]
 8008a8a:	f000 fb7b 	bl	8009184 <USBD_CtlError>
            break;
 8008a8e:	e041      	b.n	8008b14 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a90:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	da0b      	bge.n	8008ab0 <USBD_StdEPReq+0x224>
 8008a98:	7bbb      	ldrb	r3, [r7, #14]
 8008a9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008a9e:	4613      	mov	r3, r2
 8008aa0:	009b      	lsls	r3, r3, #2
 8008aa2:	4413      	add	r3, r2
 8008aa4:	009b      	lsls	r3, r3, #2
 8008aa6:	3310      	adds	r3, #16
 8008aa8:	687a      	ldr	r2, [r7, #4]
 8008aaa:	4413      	add	r3, r2
 8008aac:	3304      	adds	r3, #4
 8008aae:	e00b      	b.n	8008ac8 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8008ab0:	7bbb      	ldrb	r3, [r7, #14]
 8008ab2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008ab6:	4613      	mov	r3, r2
 8008ab8:	009b      	lsls	r3, r3, #2
 8008aba:	4413      	add	r3, r2
 8008abc:	009b      	lsls	r3, r3, #2
 8008abe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008ac2:	687a      	ldr	r2, [r7, #4]
 8008ac4:	4413      	add	r3, r2
 8008ac6:	3304      	adds	r3, #4
 8008ac8:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008aca:	7bbb      	ldrb	r3, [r7, #14]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d002      	beq.n	8008ad6 <USBD_StdEPReq+0x24a>
 8008ad0:	7bbb      	ldrb	r3, [r7, #14]
 8008ad2:	2b80      	cmp	r3, #128	; 0x80
 8008ad4:	d103      	bne.n	8008ade <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8008ad6:	68bb      	ldr	r3, [r7, #8]
 8008ad8:	2200      	movs	r2, #0
 8008ada:	601a      	str	r2, [r3, #0]
 8008adc:	e00e      	b.n	8008afc <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008ade:	7bbb      	ldrb	r3, [r7, #14]
 8008ae0:	4619      	mov	r1, r3
 8008ae2:	6878      	ldr	r0, [r7, #4]
 8008ae4:	f001 f908 	bl	8009cf8 <USBD_LL_IsStallEP>
 8008ae8:	4603      	mov	r3, r0
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d003      	beq.n	8008af6 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8008aee:	68bb      	ldr	r3, [r7, #8]
 8008af0:	2201      	movs	r2, #1
 8008af2:	601a      	str	r2, [r3, #0]
 8008af4:	e002      	b.n	8008afc <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8008af6:	68bb      	ldr	r3, [r7, #8]
 8008af8:	2200      	movs	r2, #0
 8008afa:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008afc:	68bb      	ldr	r3, [r7, #8]
 8008afe:	2202      	movs	r2, #2
 8008b00:	4619      	mov	r1, r3
 8008b02:	6878      	ldr	r0, [r7, #4]
 8008b04:	f000 fbaf 	bl	8009266 <USBD_CtlSendData>
          break;
 8008b08:	e004      	b.n	8008b14 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8008b0a:	6839      	ldr	r1, [r7, #0]
 8008b0c:	6878      	ldr	r0, [r7, #4]
 8008b0e:	f000 fb39 	bl	8009184 <USBD_CtlError>
        break;
 8008b12:	bf00      	nop
      }
      break;
 8008b14:	e004      	b.n	8008b20 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8008b16:	6839      	ldr	r1, [r7, #0]
 8008b18:	6878      	ldr	r0, [r7, #4]
 8008b1a:	f000 fb33 	bl	8009184 <USBD_CtlError>
      break;
 8008b1e:	bf00      	nop
    }
    break;
 8008b20:	e004      	b.n	8008b2c <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8008b22:	6839      	ldr	r1, [r7, #0]
 8008b24:	6878      	ldr	r0, [r7, #4]
 8008b26:	f000 fb2d 	bl	8009184 <USBD_CtlError>
    break;
 8008b2a:	bf00      	nop
  }

  return ret;
 8008b2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b2e:	4618      	mov	r0, r3
 8008b30:	3710      	adds	r7, #16
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd80      	pop	{r7, pc}
	...

08008b38 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b084      	sub	sp, #16
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
 8008b40:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008b42:	2300      	movs	r3, #0
 8008b44:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008b46:	2300      	movs	r3, #0
 8008b48:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	885b      	ldrh	r3, [r3, #2]
 8008b52:	0a1b      	lsrs	r3, r3, #8
 8008b54:	b29b      	uxth	r3, r3
 8008b56:	3b01      	subs	r3, #1
 8008b58:	2b06      	cmp	r3, #6
 8008b5a:	f200 8128 	bhi.w	8008dae <USBD_GetDescriptor+0x276>
 8008b5e:	a201      	add	r2, pc, #4	; (adr r2, 8008b64 <USBD_GetDescriptor+0x2c>)
 8008b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b64:	08008b81 	.word	0x08008b81
 8008b68:	08008b99 	.word	0x08008b99
 8008b6c:	08008bd9 	.word	0x08008bd9
 8008b70:	08008daf 	.word	0x08008daf
 8008b74:	08008daf 	.word	0x08008daf
 8008b78:	08008d4f 	.word	0x08008d4f
 8008b7c:	08008d7b 	.word	0x08008d7b
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	687a      	ldr	r2, [r7, #4]
 8008b8a:	7c12      	ldrb	r2, [r2, #16]
 8008b8c:	f107 0108 	add.w	r1, r7, #8
 8008b90:	4610      	mov	r0, r2
 8008b92:	4798      	blx	r3
 8008b94:	60f8      	str	r0, [r7, #12]
    break;
 8008b96:	e112      	b.n	8008dbe <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	7c1b      	ldrb	r3, [r3, #16]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d10d      	bne.n	8008bbc <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ba8:	f107 0208 	add.w	r2, r7, #8
 8008bac:	4610      	mov	r0, r2
 8008bae:	4798      	blx	r3
 8008bb0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	3301      	adds	r3, #1
 8008bb6:	2202      	movs	r2, #2
 8008bb8:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8008bba:	e100      	b.n	8008dbe <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bc4:	f107 0208 	add.w	r2, r7, #8
 8008bc8:	4610      	mov	r0, r2
 8008bca:	4798      	blx	r3
 8008bcc:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	3301      	adds	r3, #1
 8008bd2:	2202      	movs	r2, #2
 8008bd4:	701a      	strb	r2, [r3, #0]
    break;
 8008bd6:	e0f2      	b.n	8008dbe <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	885b      	ldrh	r3, [r3, #2]
 8008bdc:	b2db      	uxtb	r3, r3
 8008bde:	2b05      	cmp	r3, #5
 8008be0:	f200 80ac 	bhi.w	8008d3c <USBD_GetDescriptor+0x204>
 8008be4:	a201      	add	r2, pc, #4	; (adr r2, 8008bec <USBD_GetDescriptor+0xb4>)
 8008be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bea:	bf00      	nop
 8008bec:	08008c05 	.word	0x08008c05
 8008bf0:	08008c39 	.word	0x08008c39
 8008bf4:	08008c6d 	.word	0x08008c6d
 8008bf8:	08008ca1 	.word	0x08008ca1
 8008bfc:	08008cd5 	.word	0x08008cd5
 8008c00:	08008d09 	.word	0x08008d09
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c0a:	685b      	ldr	r3, [r3, #4]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d00b      	beq.n	8008c28 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c16:	685b      	ldr	r3, [r3, #4]
 8008c18:	687a      	ldr	r2, [r7, #4]
 8008c1a:	7c12      	ldrb	r2, [r2, #16]
 8008c1c:	f107 0108 	add.w	r1, r7, #8
 8008c20:	4610      	mov	r0, r2
 8008c22:	4798      	blx	r3
 8008c24:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008c26:	e091      	b.n	8008d4c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008c28:	6839      	ldr	r1, [r7, #0]
 8008c2a:	6878      	ldr	r0, [r7, #4]
 8008c2c:	f000 faaa 	bl	8009184 <USBD_CtlError>
        err++;
 8008c30:	7afb      	ldrb	r3, [r7, #11]
 8008c32:	3301      	adds	r3, #1
 8008c34:	72fb      	strb	r3, [r7, #11]
      break;
 8008c36:	e089      	b.n	8008d4c <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c3e:	689b      	ldr	r3, [r3, #8]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d00b      	beq.n	8008c5c <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c4a:	689b      	ldr	r3, [r3, #8]
 8008c4c:	687a      	ldr	r2, [r7, #4]
 8008c4e:	7c12      	ldrb	r2, [r2, #16]
 8008c50:	f107 0108 	add.w	r1, r7, #8
 8008c54:	4610      	mov	r0, r2
 8008c56:	4798      	blx	r3
 8008c58:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008c5a:	e077      	b.n	8008d4c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008c5c:	6839      	ldr	r1, [r7, #0]
 8008c5e:	6878      	ldr	r0, [r7, #4]
 8008c60:	f000 fa90 	bl	8009184 <USBD_CtlError>
        err++;
 8008c64:	7afb      	ldrb	r3, [r7, #11]
 8008c66:	3301      	adds	r3, #1
 8008c68:	72fb      	strb	r3, [r7, #11]
      break;
 8008c6a:	e06f      	b.n	8008d4c <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c72:	68db      	ldr	r3, [r3, #12]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d00b      	beq.n	8008c90 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c7e:	68db      	ldr	r3, [r3, #12]
 8008c80:	687a      	ldr	r2, [r7, #4]
 8008c82:	7c12      	ldrb	r2, [r2, #16]
 8008c84:	f107 0108 	add.w	r1, r7, #8
 8008c88:	4610      	mov	r0, r2
 8008c8a:	4798      	blx	r3
 8008c8c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008c8e:	e05d      	b.n	8008d4c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008c90:	6839      	ldr	r1, [r7, #0]
 8008c92:	6878      	ldr	r0, [r7, #4]
 8008c94:	f000 fa76 	bl	8009184 <USBD_CtlError>
        err++;
 8008c98:	7afb      	ldrb	r3, [r7, #11]
 8008c9a:	3301      	adds	r3, #1
 8008c9c:	72fb      	strb	r3, [r7, #11]
      break;
 8008c9e:	e055      	b.n	8008d4c <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ca6:	691b      	ldr	r3, [r3, #16]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d00b      	beq.n	8008cc4 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cb2:	691b      	ldr	r3, [r3, #16]
 8008cb4:	687a      	ldr	r2, [r7, #4]
 8008cb6:	7c12      	ldrb	r2, [r2, #16]
 8008cb8:	f107 0108 	add.w	r1, r7, #8
 8008cbc:	4610      	mov	r0, r2
 8008cbe:	4798      	blx	r3
 8008cc0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008cc2:	e043      	b.n	8008d4c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008cc4:	6839      	ldr	r1, [r7, #0]
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	f000 fa5c 	bl	8009184 <USBD_CtlError>
        err++;
 8008ccc:	7afb      	ldrb	r3, [r7, #11]
 8008cce:	3301      	adds	r3, #1
 8008cd0:	72fb      	strb	r3, [r7, #11]
      break;
 8008cd2:	e03b      	b.n	8008d4c <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cda:	695b      	ldr	r3, [r3, #20]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d00b      	beq.n	8008cf8 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ce6:	695b      	ldr	r3, [r3, #20]
 8008ce8:	687a      	ldr	r2, [r7, #4]
 8008cea:	7c12      	ldrb	r2, [r2, #16]
 8008cec:	f107 0108 	add.w	r1, r7, #8
 8008cf0:	4610      	mov	r0, r2
 8008cf2:	4798      	blx	r3
 8008cf4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008cf6:	e029      	b.n	8008d4c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008cf8:	6839      	ldr	r1, [r7, #0]
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f000 fa42 	bl	8009184 <USBD_CtlError>
        err++;
 8008d00:	7afb      	ldrb	r3, [r7, #11]
 8008d02:	3301      	adds	r3, #1
 8008d04:	72fb      	strb	r3, [r7, #11]
      break;
 8008d06:	e021      	b.n	8008d4c <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d0e:	699b      	ldr	r3, [r3, #24]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d00b      	beq.n	8008d2c <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d1a:	699b      	ldr	r3, [r3, #24]
 8008d1c:	687a      	ldr	r2, [r7, #4]
 8008d1e:	7c12      	ldrb	r2, [r2, #16]
 8008d20:	f107 0108 	add.w	r1, r7, #8
 8008d24:	4610      	mov	r0, r2
 8008d26:	4798      	blx	r3
 8008d28:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008d2a:	e00f      	b.n	8008d4c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008d2c:	6839      	ldr	r1, [r7, #0]
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	f000 fa28 	bl	8009184 <USBD_CtlError>
        err++;
 8008d34:	7afb      	ldrb	r3, [r7, #11]
 8008d36:	3301      	adds	r3, #1
 8008d38:	72fb      	strb	r3, [r7, #11]
      break;
 8008d3a:	e007      	b.n	8008d4c <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8008d3c:	6839      	ldr	r1, [r7, #0]
 8008d3e:	6878      	ldr	r0, [r7, #4]
 8008d40:	f000 fa20 	bl	8009184 <USBD_CtlError>
      err++;
 8008d44:	7afb      	ldrb	r3, [r7, #11]
 8008d46:	3301      	adds	r3, #1
 8008d48:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8008d4a:	bf00      	nop
    }
    break;
 8008d4c:	e037      	b.n	8008dbe <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	7c1b      	ldrb	r3, [r3, #16]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d109      	bne.n	8008d6a <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d5e:	f107 0208 	add.w	r2, r7, #8
 8008d62:	4610      	mov	r0, r2
 8008d64:	4798      	blx	r3
 8008d66:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008d68:	e029      	b.n	8008dbe <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8008d6a:	6839      	ldr	r1, [r7, #0]
 8008d6c:	6878      	ldr	r0, [r7, #4]
 8008d6e:	f000 fa09 	bl	8009184 <USBD_CtlError>
      err++;
 8008d72:	7afb      	ldrb	r3, [r7, #11]
 8008d74:	3301      	adds	r3, #1
 8008d76:	72fb      	strb	r3, [r7, #11]
    break;
 8008d78:	e021      	b.n	8008dbe <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	7c1b      	ldrb	r3, [r3, #16]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d10d      	bne.n	8008d9e <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d8a:	f107 0208 	add.w	r2, r7, #8
 8008d8e:	4610      	mov	r0, r2
 8008d90:	4798      	blx	r3
 8008d92:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	3301      	adds	r3, #1
 8008d98:	2207      	movs	r2, #7
 8008d9a:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008d9c:	e00f      	b.n	8008dbe <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8008d9e:	6839      	ldr	r1, [r7, #0]
 8008da0:	6878      	ldr	r0, [r7, #4]
 8008da2:	f000 f9ef 	bl	8009184 <USBD_CtlError>
      err++;
 8008da6:	7afb      	ldrb	r3, [r7, #11]
 8008da8:	3301      	adds	r3, #1
 8008daa:	72fb      	strb	r3, [r7, #11]
    break;
 8008dac:	e007      	b.n	8008dbe <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8008dae:	6839      	ldr	r1, [r7, #0]
 8008db0:	6878      	ldr	r0, [r7, #4]
 8008db2:	f000 f9e7 	bl	8009184 <USBD_CtlError>
    err++;
 8008db6:	7afb      	ldrb	r3, [r7, #11]
 8008db8:	3301      	adds	r3, #1
 8008dba:	72fb      	strb	r3, [r7, #11]
    break;
 8008dbc:	bf00      	nop
  }

  if (err != 0U)
 8008dbe:	7afb      	ldrb	r3, [r7, #11]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d11e      	bne.n	8008e02 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	88db      	ldrh	r3, [r3, #6]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d016      	beq.n	8008dfa <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8008dcc:	893b      	ldrh	r3, [r7, #8]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d00e      	beq.n	8008df0 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	88da      	ldrh	r2, [r3, #6]
 8008dd6:	893b      	ldrh	r3, [r7, #8]
 8008dd8:	4293      	cmp	r3, r2
 8008dda:	bf28      	it	cs
 8008ddc:	4613      	movcs	r3, r2
 8008dde:	b29b      	uxth	r3, r3
 8008de0:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8008de2:	893b      	ldrh	r3, [r7, #8]
 8008de4:	461a      	mov	r2, r3
 8008de6:	68f9      	ldr	r1, [r7, #12]
 8008de8:	6878      	ldr	r0, [r7, #4]
 8008dea:	f000 fa3c 	bl	8009266 <USBD_CtlSendData>
 8008dee:	e009      	b.n	8008e04 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8008df0:	6839      	ldr	r1, [r7, #0]
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	f000 f9c6 	bl	8009184 <USBD_CtlError>
 8008df8:	e004      	b.n	8008e04 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8008dfa:	6878      	ldr	r0, [r7, #4]
 8008dfc:	f000 fa8d 	bl	800931a <USBD_CtlSendStatus>
 8008e00:	e000      	b.n	8008e04 <USBD_GetDescriptor+0x2cc>
    return;
 8008e02:	bf00      	nop
    }
  }
}
 8008e04:	3710      	adds	r7, #16
 8008e06:	46bd      	mov	sp, r7
 8008e08:	bd80      	pop	{r7, pc}
 8008e0a:	bf00      	nop

08008e0c <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b084      	sub	sp, #16
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
 8008e14:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	889b      	ldrh	r3, [r3, #4]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d130      	bne.n	8008e80 <USBD_SetAddress+0x74>
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	88db      	ldrh	r3, [r3, #6]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d12c      	bne.n	8008e80 <USBD_SetAddress+0x74>
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	885b      	ldrh	r3, [r3, #2]
 8008e2a:	2b7f      	cmp	r3, #127	; 0x7f
 8008e2c:	d828      	bhi.n	8008e80 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	885b      	ldrh	r3, [r3, #2]
 8008e32:	b2db      	uxtb	r3, r3
 8008e34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e38:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e40:	2b03      	cmp	r3, #3
 8008e42:	d104      	bne.n	8008e4e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008e44:	6839      	ldr	r1, [r7, #0]
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	f000 f99c 	bl	8009184 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e4c:	e01c      	b.n	8008e88 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	7bfa      	ldrb	r2, [r7, #15]
 8008e52:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008e56:	7bfb      	ldrb	r3, [r7, #15]
 8008e58:	4619      	mov	r1, r3
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f000 ff78 	bl	8009d50 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008e60:	6878      	ldr	r0, [r7, #4]
 8008e62:	f000 fa5a 	bl	800931a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008e66:	7bfb      	ldrb	r3, [r7, #15]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d004      	beq.n	8008e76 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2202      	movs	r2, #2
 8008e70:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e74:	e008      	b.n	8008e88 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	2201      	movs	r2, #1
 8008e7a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e7e:	e003      	b.n	8008e88 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008e80:	6839      	ldr	r1, [r7, #0]
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	f000 f97e 	bl	8009184 <USBD_CtlError>
  }
}
 8008e88:	bf00      	nop
 8008e8a:	3710      	adds	r7, #16
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	bd80      	pop	{r7, pc}

08008e90 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b084      	sub	sp, #16
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
 8008e98:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	885b      	ldrh	r3, [r3, #2]
 8008ea2:	b2da      	uxtb	r2, r3
 8008ea4:	4b4b      	ldr	r3, [pc, #300]	; (8008fd4 <USBD_SetConfig+0x144>)
 8008ea6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008ea8:	4b4a      	ldr	r3, [pc, #296]	; (8008fd4 <USBD_SetConfig+0x144>)
 8008eaa:	781b      	ldrb	r3, [r3, #0]
 8008eac:	2b01      	cmp	r3, #1
 8008eae:	d905      	bls.n	8008ebc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008eb0:	6839      	ldr	r1, [r7, #0]
 8008eb2:	6878      	ldr	r0, [r7, #4]
 8008eb4:	f000 f966 	bl	8009184 <USBD_CtlError>
    return USBD_FAIL;
 8008eb8:	2303      	movs	r3, #3
 8008eba:	e087      	b.n	8008fcc <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ec2:	2b02      	cmp	r3, #2
 8008ec4:	d002      	beq.n	8008ecc <USBD_SetConfig+0x3c>
 8008ec6:	2b03      	cmp	r3, #3
 8008ec8:	d025      	beq.n	8008f16 <USBD_SetConfig+0x86>
 8008eca:	e071      	b.n	8008fb0 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8008ecc:	4b41      	ldr	r3, [pc, #260]	; (8008fd4 <USBD_SetConfig+0x144>)
 8008ece:	781b      	ldrb	r3, [r3, #0]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d01c      	beq.n	8008f0e <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8008ed4:	4b3f      	ldr	r3, [pc, #252]	; (8008fd4 <USBD_SetConfig+0x144>)
 8008ed6:	781b      	ldrb	r3, [r3, #0]
 8008ed8:	461a      	mov	r2, r3
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008ede:	4b3d      	ldr	r3, [pc, #244]	; (8008fd4 <USBD_SetConfig+0x144>)
 8008ee0:	781b      	ldrb	r3, [r3, #0]
 8008ee2:	4619      	mov	r1, r3
 8008ee4:	6878      	ldr	r0, [r7, #4]
 8008ee6:	f7ff f9a7 	bl	8008238 <USBD_SetClassConfig>
 8008eea:	4603      	mov	r3, r0
 8008eec:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8008eee:	7bfb      	ldrb	r3, [r7, #15]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d004      	beq.n	8008efe <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8008ef4:	6839      	ldr	r1, [r7, #0]
 8008ef6:	6878      	ldr	r0, [r7, #4]
 8008ef8:	f000 f944 	bl	8009184 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008efc:	e065      	b.n	8008fca <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008efe:	6878      	ldr	r0, [r7, #4]
 8008f00:	f000 fa0b 	bl	800931a <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2203      	movs	r2, #3
 8008f08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8008f0c:	e05d      	b.n	8008fca <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8008f0e:	6878      	ldr	r0, [r7, #4]
 8008f10:	f000 fa03 	bl	800931a <USBD_CtlSendStatus>
    break;
 8008f14:	e059      	b.n	8008fca <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8008f16:	4b2f      	ldr	r3, [pc, #188]	; (8008fd4 <USBD_SetConfig+0x144>)
 8008f18:	781b      	ldrb	r3, [r3, #0]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d112      	bne.n	8008f44 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	2202      	movs	r2, #2
 8008f22:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8008f26:	4b2b      	ldr	r3, [pc, #172]	; (8008fd4 <USBD_SetConfig+0x144>)
 8008f28:	781b      	ldrb	r3, [r3, #0]
 8008f2a:	461a      	mov	r2, r3
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008f30:	4b28      	ldr	r3, [pc, #160]	; (8008fd4 <USBD_SetConfig+0x144>)
 8008f32:	781b      	ldrb	r3, [r3, #0]
 8008f34:	4619      	mov	r1, r3
 8008f36:	6878      	ldr	r0, [r7, #4]
 8008f38:	f7ff f99a 	bl	8008270 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8008f3c:	6878      	ldr	r0, [r7, #4]
 8008f3e:	f000 f9ec 	bl	800931a <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008f42:	e042      	b.n	8008fca <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8008f44:	4b23      	ldr	r3, [pc, #140]	; (8008fd4 <USBD_SetConfig+0x144>)
 8008f46:	781b      	ldrb	r3, [r3, #0]
 8008f48:	461a      	mov	r2, r3
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	685b      	ldr	r3, [r3, #4]
 8008f4e:	429a      	cmp	r2, r3
 8008f50:	d02a      	beq.n	8008fa8 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	685b      	ldr	r3, [r3, #4]
 8008f56:	b2db      	uxtb	r3, r3
 8008f58:	4619      	mov	r1, r3
 8008f5a:	6878      	ldr	r0, [r7, #4]
 8008f5c:	f7ff f988 	bl	8008270 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8008f60:	4b1c      	ldr	r3, [pc, #112]	; (8008fd4 <USBD_SetConfig+0x144>)
 8008f62:	781b      	ldrb	r3, [r3, #0]
 8008f64:	461a      	mov	r2, r3
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008f6a:	4b1a      	ldr	r3, [pc, #104]	; (8008fd4 <USBD_SetConfig+0x144>)
 8008f6c:	781b      	ldrb	r3, [r3, #0]
 8008f6e:	4619      	mov	r1, r3
 8008f70:	6878      	ldr	r0, [r7, #4]
 8008f72:	f7ff f961 	bl	8008238 <USBD_SetClassConfig>
 8008f76:	4603      	mov	r3, r0
 8008f78:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8008f7a:	7bfb      	ldrb	r3, [r7, #15]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d00f      	beq.n	8008fa0 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8008f80:	6839      	ldr	r1, [r7, #0]
 8008f82:	6878      	ldr	r0, [r7, #4]
 8008f84:	f000 f8fe 	bl	8009184 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	685b      	ldr	r3, [r3, #4]
 8008f8c:	b2db      	uxtb	r3, r3
 8008f8e:	4619      	mov	r1, r3
 8008f90:	6878      	ldr	r0, [r7, #4]
 8008f92:	f7ff f96d 	bl	8008270 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2202      	movs	r2, #2
 8008f9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8008f9e:	e014      	b.n	8008fca <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	f000 f9ba 	bl	800931a <USBD_CtlSendStatus>
    break;
 8008fa6:	e010      	b.n	8008fca <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8008fa8:	6878      	ldr	r0, [r7, #4]
 8008faa:	f000 f9b6 	bl	800931a <USBD_CtlSendStatus>
    break;
 8008fae:	e00c      	b.n	8008fca <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8008fb0:	6839      	ldr	r1, [r7, #0]
 8008fb2:	6878      	ldr	r0, [r7, #4]
 8008fb4:	f000 f8e6 	bl	8009184 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008fb8:	4b06      	ldr	r3, [pc, #24]	; (8008fd4 <USBD_SetConfig+0x144>)
 8008fba:	781b      	ldrb	r3, [r3, #0]
 8008fbc:	4619      	mov	r1, r3
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	f7ff f956 	bl	8008270 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8008fc4:	2303      	movs	r3, #3
 8008fc6:	73fb      	strb	r3, [r7, #15]
    break;
 8008fc8:	bf00      	nop
  }

  return ret;
 8008fca:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fcc:	4618      	mov	r0, r3
 8008fce:	3710      	adds	r7, #16
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	bd80      	pop	{r7, pc}
 8008fd4:	2000098c 	.word	0x2000098c

08008fd8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b082      	sub	sp, #8
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
 8008fe0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008fe2:	683b      	ldr	r3, [r7, #0]
 8008fe4:	88db      	ldrh	r3, [r3, #6]
 8008fe6:	2b01      	cmp	r3, #1
 8008fe8:	d004      	beq.n	8008ff4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008fea:	6839      	ldr	r1, [r7, #0]
 8008fec:	6878      	ldr	r0, [r7, #4]
 8008fee:	f000 f8c9 	bl	8009184 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8008ff2:	e021      	b.n	8009038 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ffa:	2b01      	cmp	r3, #1
 8008ffc:	db17      	blt.n	800902e <USBD_GetConfig+0x56>
 8008ffe:	2b02      	cmp	r3, #2
 8009000:	dd02      	ble.n	8009008 <USBD_GetConfig+0x30>
 8009002:	2b03      	cmp	r3, #3
 8009004:	d00b      	beq.n	800901e <USBD_GetConfig+0x46>
 8009006:	e012      	b.n	800902e <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2200      	movs	r2, #0
 800900c:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	3308      	adds	r3, #8
 8009012:	2201      	movs	r2, #1
 8009014:	4619      	mov	r1, r3
 8009016:	6878      	ldr	r0, [r7, #4]
 8009018:	f000 f925 	bl	8009266 <USBD_CtlSendData>
      break;
 800901c:	e00c      	b.n	8009038 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	3304      	adds	r3, #4
 8009022:	2201      	movs	r2, #1
 8009024:	4619      	mov	r1, r3
 8009026:	6878      	ldr	r0, [r7, #4]
 8009028:	f000 f91d 	bl	8009266 <USBD_CtlSendData>
      break;
 800902c:	e004      	b.n	8009038 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800902e:	6839      	ldr	r1, [r7, #0]
 8009030:	6878      	ldr	r0, [r7, #4]
 8009032:	f000 f8a7 	bl	8009184 <USBD_CtlError>
      break;
 8009036:	bf00      	nop
}
 8009038:	bf00      	nop
 800903a:	3708      	adds	r7, #8
 800903c:	46bd      	mov	sp, r7
 800903e:	bd80      	pop	{r7, pc}

08009040 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b082      	sub	sp, #8
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
 8009048:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009050:	3b01      	subs	r3, #1
 8009052:	2b02      	cmp	r3, #2
 8009054:	d81e      	bhi.n	8009094 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	88db      	ldrh	r3, [r3, #6]
 800905a:	2b02      	cmp	r3, #2
 800905c:	d004      	beq.n	8009068 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800905e:	6839      	ldr	r1, [r7, #0]
 8009060:	6878      	ldr	r0, [r7, #4]
 8009062:	f000 f88f 	bl	8009184 <USBD_CtlError>
      break;
 8009066:	e01a      	b.n	800909e <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2201      	movs	r2, #1
 800906c:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009074:	2b00      	cmp	r3, #0
 8009076:	d005      	beq.n	8009084 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	68db      	ldr	r3, [r3, #12]
 800907c:	f043 0202 	orr.w	r2, r3, #2
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	330c      	adds	r3, #12
 8009088:	2202      	movs	r2, #2
 800908a:	4619      	mov	r1, r3
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	f000 f8ea 	bl	8009266 <USBD_CtlSendData>
    break;
 8009092:	e004      	b.n	800909e <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8009094:	6839      	ldr	r1, [r7, #0]
 8009096:	6878      	ldr	r0, [r7, #4]
 8009098:	f000 f874 	bl	8009184 <USBD_CtlError>
    break;
 800909c:	bf00      	nop
  }
}
 800909e:	bf00      	nop
 80090a0:	3708      	adds	r7, #8
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bd80      	pop	{r7, pc}

080090a6 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090a6:	b580      	push	{r7, lr}
 80090a8:	b082      	sub	sp, #8
 80090aa:	af00      	add	r7, sp, #0
 80090ac:	6078      	str	r0, [r7, #4]
 80090ae:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80090b0:	683b      	ldr	r3, [r7, #0]
 80090b2:	885b      	ldrh	r3, [r3, #2]
 80090b4:	2b01      	cmp	r3, #1
 80090b6:	d106      	bne.n	80090c6 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2201      	movs	r2, #1
 80090bc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80090c0:	6878      	ldr	r0, [r7, #4]
 80090c2:	f000 f92a 	bl	800931a <USBD_CtlSendStatus>
  }
}
 80090c6:	bf00      	nop
 80090c8:	3708      	adds	r7, #8
 80090ca:	46bd      	mov	sp, r7
 80090cc:	bd80      	pop	{r7, pc}

080090ce <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090ce:	b580      	push	{r7, lr}
 80090d0:	b082      	sub	sp, #8
 80090d2:	af00      	add	r7, sp, #0
 80090d4:	6078      	str	r0, [r7, #4]
 80090d6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090de:	3b01      	subs	r3, #1
 80090e0:	2b02      	cmp	r3, #2
 80090e2:	d80b      	bhi.n	80090fc <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	885b      	ldrh	r3, [r3, #2]
 80090e8:	2b01      	cmp	r3, #1
 80090ea:	d10c      	bne.n	8009106 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2200      	movs	r2, #0
 80090f0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80090f4:	6878      	ldr	r0, [r7, #4]
 80090f6:	f000 f910 	bl	800931a <USBD_CtlSendStatus>
      }
      break;
 80090fa:	e004      	b.n	8009106 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80090fc:	6839      	ldr	r1, [r7, #0]
 80090fe:	6878      	ldr	r0, [r7, #4]
 8009100:	f000 f840 	bl	8009184 <USBD_CtlError>
      break;
 8009104:	e000      	b.n	8009108 <USBD_ClrFeature+0x3a>
      break;
 8009106:	bf00      	nop
  }
}
 8009108:	bf00      	nop
 800910a:	3708      	adds	r7, #8
 800910c:	46bd      	mov	sp, r7
 800910e:	bd80      	pop	{r7, pc}

08009110 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b084      	sub	sp, #16
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
 8009118:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	781a      	ldrb	r2, [r3, #0]
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	3301      	adds	r3, #1
 800912a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	781a      	ldrb	r2, [r3, #0]
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	3301      	adds	r3, #1
 8009138:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800913a:	68f8      	ldr	r0, [r7, #12]
 800913c:	f7ff fad3 	bl	80086e6 <SWAPBYTE>
 8009140:	4603      	mov	r3, r0
 8009142:	461a      	mov	r2, r3
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	3301      	adds	r3, #1
 800914c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	3301      	adds	r3, #1
 8009152:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009154:	68f8      	ldr	r0, [r7, #12]
 8009156:	f7ff fac6 	bl	80086e6 <SWAPBYTE>
 800915a:	4603      	mov	r3, r0
 800915c:	461a      	mov	r2, r3
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	3301      	adds	r3, #1
 8009166:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	3301      	adds	r3, #1
 800916c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800916e:	68f8      	ldr	r0, [r7, #12]
 8009170:	f7ff fab9 	bl	80086e6 <SWAPBYTE>
 8009174:	4603      	mov	r3, r0
 8009176:	461a      	mov	r2, r3
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	80da      	strh	r2, [r3, #6]
}
 800917c:	bf00      	nop
 800917e:	3710      	adds	r7, #16
 8009180:	46bd      	mov	sp, r7
 8009182:	bd80      	pop	{r7, pc}

08009184 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b082      	sub	sp, #8
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
 800918c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800918e:	2180      	movs	r1, #128	; 0x80
 8009190:	6878      	ldr	r0, [r7, #4]
 8009192:	f000 fd73 	bl	8009c7c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009196:	2100      	movs	r1, #0
 8009198:	6878      	ldr	r0, [r7, #4]
 800919a:	f000 fd6f 	bl	8009c7c <USBD_LL_StallEP>
}
 800919e:	bf00      	nop
 80091a0:	3708      	adds	r7, #8
 80091a2:	46bd      	mov	sp, r7
 80091a4:	bd80      	pop	{r7, pc}

080091a6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80091a6:	b580      	push	{r7, lr}
 80091a8:	b086      	sub	sp, #24
 80091aa:	af00      	add	r7, sp, #0
 80091ac:	60f8      	str	r0, [r7, #12]
 80091ae:	60b9      	str	r1, [r7, #8]
 80091b0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80091b2:	2300      	movs	r3, #0
 80091b4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d036      	beq.n	800922a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80091c0:	6938      	ldr	r0, [r7, #16]
 80091c2:	f000 f836 	bl	8009232 <USBD_GetLen>
 80091c6:	4603      	mov	r3, r0
 80091c8:	3301      	adds	r3, #1
 80091ca:	b29b      	uxth	r3, r3
 80091cc:	005b      	lsls	r3, r3, #1
 80091ce:	b29a      	uxth	r2, r3
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80091d4:	7dfb      	ldrb	r3, [r7, #23]
 80091d6:	68ba      	ldr	r2, [r7, #8]
 80091d8:	4413      	add	r3, r2
 80091da:	687a      	ldr	r2, [r7, #4]
 80091dc:	7812      	ldrb	r2, [r2, #0]
 80091de:	701a      	strb	r2, [r3, #0]
  idx++;
 80091e0:	7dfb      	ldrb	r3, [r7, #23]
 80091e2:	3301      	adds	r3, #1
 80091e4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80091e6:	7dfb      	ldrb	r3, [r7, #23]
 80091e8:	68ba      	ldr	r2, [r7, #8]
 80091ea:	4413      	add	r3, r2
 80091ec:	2203      	movs	r2, #3
 80091ee:	701a      	strb	r2, [r3, #0]
  idx++;
 80091f0:	7dfb      	ldrb	r3, [r7, #23]
 80091f2:	3301      	adds	r3, #1
 80091f4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80091f6:	e013      	b.n	8009220 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80091f8:	7dfb      	ldrb	r3, [r7, #23]
 80091fa:	68ba      	ldr	r2, [r7, #8]
 80091fc:	4413      	add	r3, r2
 80091fe:	693a      	ldr	r2, [r7, #16]
 8009200:	7812      	ldrb	r2, [r2, #0]
 8009202:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009204:	693b      	ldr	r3, [r7, #16]
 8009206:	3301      	adds	r3, #1
 8009208:	613b      	str	r3, [r7, #16]
    idx++;
 800920a:	7dfb      	ldrb	r3, [r7, #23]
 800920c:	3301      	adds	r3, #1
 800920e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009210:	7dfb      	ldrb	r3, [r7, #23]
 8009212:	68ba      	ldr	r2, [r7, #8]
 8009214:	4413      	add	r3, r2
 8009216:	2200      	movs	r2, #0
 8009218:	701a      	strb	r2, [r3, #0]
    idx++;
 800921a:	7dfb      	ldrb	r3, [r7, #23]
 800921c:	3301      	adds	r3, #1
 800921e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009220:	693b      	ldr	r3, [r7, #16]
 8009222:	781b      	ldrb	r3, [r3, #0]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d1e7      	bne.n	80091f8 <USBD_GetString+0x52>
 8009228:	e000      	b.n	800922c <USBD_GetString+0x86>
    return;
 800922a:	bf00      	nop
  }
}
 800922c:	3718      	adds	r7, #24
 800922e:	46bd      	mov	sp, r7
 8009230:	bd80      	pop	{r7, pc}

08009232 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009232:	b480      	push	{r7}
 8009234:	b085      	sub	sp, #20
 8009236:	af00      	add	r7, sp, #0
 8009238:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800923a:	2300      	movs	r3, #0
 800923c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009242:	e005      	b.n	8009250 <USBD_GetLen+0x1e>
  {
    len++;
 8009244:	7bfb      	ldrb	r3, [r7, #15]
 8009246:	3301      	adds	r3, #1
 8009248:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800924a:	68bb      	ldr	r3, [r7, #8]
 800924c:	3301      	adds	r3, #1
 800924e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009250:	68bb      	ldr	r3, [r7, #8]
 8009252:	781b      	ldrb	r3, [r3, #0]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d1f5      	bne.n	8009244 <USBD_GetLen+0x12>
  }

  return len;
 8009258:	7bfb      	ldrb	r3, [r7, #15]
}
 800925a:	4618      	mov	r0, r3
 800925c:	3714      	adds	r7, #20
 800925e:	46bd      	mov	sp, r7
 8009260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009264:	4770      	bx	lr

08009266 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009266:	b580      	push	{r7, lr}
 8009268:	b084      	sub	sp, #16
 800926a:	af00      	add	r7, sp, #0
 800926c:	60f8      	str	r0, [r7, #12]
 800926e:	60b9      	str	r1, [r7, #8]
 8009270:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	2202      	movs	r2, #2
 8009276:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	687a      	ldr	r2, [r7, #4]
 800927e:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	687a      	ldr	r2, [r7, #4]
 8009284:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	68ba      	ldr	r2, [r7, #8]
 800928a:	2100      	movs	r1, #0
 800928c:	68f8      	ldr	r0, [r7, #12]
 800928e:	f000 fd7e 	bl	8009d8e <USBD_LL_Transmit>

  return USBD_OK;
 8009292:	2300      	movs	r3, #0
}
 8009294:	4618      	mov	r0, r3
 8009296:	3710      	adds	r7, #16
 8009298:	46bd      	mov	sp, r7
 800929a:	bd80      	pop	{r7, pc}

0800929c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b084      	sub	sp, #16
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	60f8      	str	r0, [r7, #12]
 80092a4:	60b9      	str	r1, [r7, #8]
 80092a6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	68ba      	ldr	r2, [r7, #8]
 80092ac:	2100      	movs	r1, #0
 80092ae:	68f8      	ldr	r0, [r7, #12]
 80092b0:	f000 fd6d 	bl	8009d8e <USBD_LL_Transmit>

  return USBD_OK;
 80092b4:	2300      	movs	r3, #0
}
 80092b6:	4618      	mov	r0, r3
 80092b8:	3710      	adds	r7, #16
 80092ba:	46bd      	mov	sp, r7
 80092bc:	bd80      	pop	{r7, pc}

080092be <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80092be:	b580      	push	{r7, lr}
 80092c0:	b084      	sub	sp, #16
 80092c2:	af00      	add	r7, sp, #0
 80092c4:	60f8      	str	r0, [r7, #12]
 80092c6:	60b9      	str	r1, [r7, #8]
 80092c8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	2203      	movs	r2, #3
 80092ce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	687a      	ldr	r2, [r7, #4]
 80092d6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	687a      	ldr	r2, [r7, #4]
 80092de:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	68ba      	ldr	r2, [r7, #8]
 80092e6:	2100      	movs	r1, #0
 80092e8:	68f8      	ldr	r0, [r7, #12]
 80092ea:	f000 fd71 	bl	8009dd0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80092ee:	2300      	movs	r3, #0
}
 80092f0:	4618      	mov	r0, r3
 80092f2:	3710      	adds	r7, #16
 80092f4:	46bd      	mov	sp, r7
 80092f6:	bd80      	pop	{r7, pc}

080092f8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b084      	sub	sp, #16
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	60f8      	str	r0, [r7, #12]
 8009300:	60b9      	str	r1, [r7, #8]
 8009302:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	68ba      	ldr	r2, [r7, #8]
 8009308:	2100      	movs	r1, #0
 800930a:	68f8      	ldr	r0, [r7, #12]
 800930c:	f000 fd60 	bl	8009dd0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009310:	2300      	movs	r3, #0
}
 8009312:	4618      	mov	r0, r3
 8009314:	3710      	adds	r7, #16
 8009316:	46bd      	mov	sp, r7
 8009318:	bd80      	pop	{r7, pc}

0800931a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800931a:	b580      	push	{r7, lr}
 800931c:	b082      	sub	sp, #8
 800931e:	af00      	add	r7, sp, #0
 8009320:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2204      	movs	r2, #4
 8009326:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800932a:	2300      	movs	r3, #0
 800932c:	2200      	movs	r2, #0
 800932e:	2100      	movs	r1, #0
 8009330:	6878      	ldr	r0, [r7, #4]
 8009332:	f000 fd2c 	bl	8009d8e <USBD_LL_Transmit>

  return USBD_OK;
 8009336:	2300      	movs	r3, #0
}
 8009338:	4618      	mov	r0, r3
 800933a:	3708      	adds	r7, #8
 800933c:	46bd      	mov	sp, r7
 800933e:	bd80      	pop	{r7, pc}

08009340 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b082      	sub	sp, #8
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2205      	movs	r2, #5
 800934c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009350:	2300      	movs	r3, #0
 8009352:	2200      	movs	r2, #0
 8009354:	2100      	movs	r1, #0
 8009356:	6878      	ldr	r0, [r7, #4]
 8009358:	f000 fd3a 	bl	8009dd0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800935c:	2300      	movs	r3, #0
}
 800935e:	4618      	mov	r0, r3
 8009360:	3708      	adds	r7, #8
 8009362:	46bd      	mov	sp, r7
 8009364:	bd80      	pop	{r7, pc}
	...

08009368 <MX_USB_DEVICE_Init>:
/**
 * Init USB device Library, add supported class and start the library
 * @retval None
 */
void MX_USB_DEVICE_Init(uint8_t flag)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b082      	sub	sp, #8
 800936c:	af00      	add	r7, sp, #0
 800936e:	4603      	mov	r3, r0
 8009370:	71fb      	strb	r3, [r7, #7]
	/* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
	if(flag){
 8009372:	79fb      	ldrb	r3, [r7, #7]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d024      	beq.n	80093c2 <MX_USB_DEVICE_Init+0x5a>
		if (USBD_Init(&hUsbDeviceFS, &FS_Desc_SETUP, DEVICE_FS) != USBD_OK)
 8009378:	2200      	movs	r2, #0
 800937a:	4922      	ldr	r1, [pc, #136]	; (8009404 <MX_USB_DEVICE_Init+0x9c>)
 800937c:	4822      	ldr	r0, [pc, #136]	; (8009408 <MX_USB_DEVICE_Init+0xa0>)
 800937e:	f7fe feed 	bl	800815c <USBD_Init>
 8009382:	4603      	mov	r3, r0
 8009384:	2b00      	cmp	r3, #0
 8009386:	d001      	beq.n	800938c <MX_USB_DEVICE_Init+0x24>
		{
			Error_Handler();
 8009388:	f7f7 fed0 	bl	800112c <Error_Handler>
		}
		if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800938c:	491f      	ldr	r1, [pc, #124]	; (800940c <MX_USB_DEVICE_Init+0xa4>)
 800938e:	481e      	ldr	r0, [pc, #120]	; (8009408 <MX_USB_DEVICE_Init+0xa0>)
 8009390:	f7fe ff1a 	bl	80081c8 <USBD_RegisterClass>
 8009394:	4603      	mov	r3, r0
 8009396:	2b00      	cmp	r3, #0
 8009398:	d001      	beq.n	800939e <MX_USB_DEVICE_Init+0x36>
		{
			Error_Handler();
 800939a:	f7f7 fec7 	bl	800112c <Error_Handler>
		}
		if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800939e:	491c      	ldr	r1, [pc, #112]	; (8009410 <MX_USB_DEVICE_Init+0xa8>)
 80093a0:	4819      	ldr	r0, [pc, #100]	; (8009408 <MX_USB_DEVICE_Init+0xa0>)
 80093a2:	f7fe fc79 	bl	8007c98 <USBD_CDC_RegisterInterface>
 80093a6:	4603      	mov	r3, r0
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d001      	beq.n	80093b0 <MX_USB_DEVICE_Init+0x48>
		{
			Error_Handler();
 80093ac:	f7f7 febe 	bl	800112c <Error_Handler>
		}
		if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80093b0:	4815      	ldr	r0, [pc, #84]	; (8009408 <MX_USB_DEVICE_Init+0xa0>)
 80093b2:	f7fe ff2a 	bl	800820a <USBD_Start>
 80093b6:	4603      	mov	r3, r0
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d01e      	beq.n	80093fa <MX_USB_DEVICE_Init+0x92>
		{
			Error_Handler();
 80093bc:	f7f7 feb6 	bl	800112c <Error_Handler>
		}
		return;
 80093c0:	e01b      	b.n	80093fa <MX_USB_DEVICE_Init+0x92>
	}

	/* USER CODE END USB_DEVICE_Init_PreTreatment */

	/* Init Device Library, add supported class and start the library. */
	if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80093c2:	2200      	movs	r2, #0
 80093c4:	4913      	ldr	r1, [pc, #76]	; (8009414 <MX_USB_DEVICE_Init+0xac>)
 80093c6:	4810      	ldr	r0, [pc, #64]	; (8009408 <MX_USB_DEVICE_Init+0xa0>)
 80093c8:	f7fe fec8 	bl	800815c <USBD_Init>
 80093cc:	4603      	mov	r3, r0
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d001      	beq.n	80093d6 <MX_USB_DEVICE_Init+0x6e>
	{
		Error_Handler();
 80093d2:	f7f7 feab 	bl	800112c <Error_Handler>
	}
	if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 80093d6:	4910      	ldr	r1, [pc, #64]	; (8009418 <MX_USB_DEVICE_Init+0xb0>)
 80093d8:	480b      	ldr	r0, [pc, #44]	; (8009408 <MX_USB_DEVICE_Init+0xa0>)
 80093da:	f7fe fef5 	bl	80081c8 <USBD_RegisterClass>
 80093de:	4603      	mov	r3, r0
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d001      	beq.n	80093e8 <MX_USB_DEVICE_Init+0x80>
	{
		Error_Handler();
 80093e4:	f7f7 fea2 	bl	800112c <Error_Handler>
	}
	if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80093e8:	4807      	ldr	r0, [pc, #28]	; (8009408 <MX_USB_DEVICE_Init+0xa0>)
 80093ea:	f7fe ff0e 	bl	800820a <USBD_Start>
 80093ee:	4603      	mov	r3, r0
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d003      	beq.n	80093fc <MX_USB_DEVICE_Init+0x94>
	{
		Error_Handler();
 80093f4:	f7f7 fe9a 	bl	800112c <Error_Handler>
 80093f8:	e000      	b.n	80093fc <MX_USB_DEVICE_Init+0x94>
		return;
 80093fa:	bf00      	nop
	}

	/* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

	/* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80093fc:	3708      	adds	r7, #8
 80093fe:	46bd      	mov	sp, r7
 8009400:	bd80      	pop	{r7, pc}
 8009402:	bf00      	nop
 8009404:	200002e8 	.word	0x200002e8
 8009408:	20000ba4 	.word	0x20000ba4
 800940c:	200000b8 	.word	0x200000b8
 8009410:	200002b8 	.word	0x200002b8
 8009414:	200002cc 	.word	0x200002cc
 8009418:	200001bc 	.word	0x200001bc

0800941c <CDC_Init_FS>:
/**
 * @brief  Initializes the CDC media low layer over the FS USB IP
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Init_FS(void)
{
 800941c:	b580      	push	{r7, lr}
 800941e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 3 */
	/* Set Application Buffers */
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009420:	2200      	movs	r2, #0
 8009422:	4905      	ldr	r1, [pc, #20]	; (8009438 <CDC_Init_FS+0x1c>)
 8009424:	4805      	ldr	r0, [pc, #20]	; (800943c <CDC_Init_FS+0x20>)
 8009426:	f7fe fc4c 	bl	8007cc2 <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800942a:	4905      	ldr	r1, [pc, #20]	; (8009440 <CDC_Init_FS+0x24>)
 800942c:	4803      	ldr	r0, [pc, #12]	; (800943c <CDC_Init_FS+0x20>)
 800942e:	f7fe fc61 	bl	8007cf4 <USBD_CDC_SetRxBuffer>
	return (USBD_OK);
 8009432:	2300      	movs	r3, #0
	/* USER CODE END 3 */
}
 8009434:	4618      	mov	r0, r3
 8009436:	bd80      	pop	{r7, pc}
 8009438:	20000eb4 	.word	0x20000eb4
 800943c:	20000ba4 	.word	0x20000ba4
 8009440:	20000e74 	.word	0x20000e74

08009444 <CDC_DeInit_FS>:
/**
 * @brief  DeInitializes the CDC media low layer
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_DeInit_FS(void)
{
 8009444:	b480      	push	{r7}
 8009446:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 4 */
	return (USBD_OK);
 8009448:	2300      	movs	r3, #0
	/* USER CODE END 4 */
}
 800944a:	4618      	mov	r0, r3
 800944c:	46bd      	mov	sp, r7
 800944e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009452:	4770      	bx	lr

08009454 <CDC_Control_FS>:
 * @param  pbuf: Buffer containing command data (request parameters)
 * @param  length: Number of data to be sent (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009454:	b480      	push	{r7}
 8009456:	b083      	sub	sp, #12
 8009458:	af00      	add	r7, sp, #0
 800945a:	4603      	mov	r3, r0
 800945c:	6039      	str	r1, [r7, #0]
 800945e:	71fb      	strb	r3, [r7, #7]
 8009460:	4613      	mov	r3, r2
 8009462:	80bb      	strh	r3, [r7, #4]
	/* USER CODE BEGIN 5 */
	switch(cmd)
 8009464:	79fb      	ldrb	r3, [r7, #7]
 8009466:	2b23      	cmp	r3, #35	; 0x23
 8009468:	d84a      	bhi.n	8009500 <CDC_Control_FS+0xac>
 800946a:	a201      	add	r2, pc, #4	; (adr r2, 8009470 <CDC_Control_FS+0x1c>)
 800946c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009470:	08009501 	.word	0x08009501
 8009474:	08009501 	.word	0x08009501
 8009478:	08009501 	.word	0x08009501
 800947c:	08009501 	.word	0x08009501
 8009480:	08009501 	.word	0x08009501
 8009484:	08009501 	.word	0x08009501
 8009488:	08009501 	.word	0x08009501
 800948c:	08009501 	.word	0x08009501
 8009490:	08009501 	.word	0x08009501
 8009494:	08009501 	.word	0x08009501
 8009498:	08009501 	.word	0x08009501
 800949c:	08009501 	.word	0x08009501
 80094a0:	08009501 	.word	0x08009501
 80094a4:	08009501 	.word	0x08009501
 80094a8:	08009501 	.word	0x08009501
 80094ac:	08009501 	.word	0x08009501
 80094b0:	08009501 	.word	0x08009501
 80094b4:	08009501 	.word	0x08009501
 80094b8:	08009501 	.word	0x08009501
 80094bc:	08009501 	.word	0x08009501
 80094c0:	08009501 	.word	0x08009501
 80094c4:	08009501 	.word	0x08009501
 80094c8:	08009501 	.word	0x08009501
 80094cc:	08009501 	.word	0x08009501
 80094d0:	08009501 	.word	0x08009501
 80094d4:	08009501 	.word	0x08009501
 80094d8:	08009501 	.word	0x08009501
 80094dc:	08009501 	.word	0x08009501
 80094e0:	08009501 	.word	0x08009501
 80094e4:	08009501 	.word	0x08009501
 80094e8:	08009501 	.word	0x08009501
 80094ec:	08009501 	.word	0x08009501
 80094f0:	08009501 	.word	0x08009501
 80094f4:	08009501 	.word	0x08009501
 80094f8:	08009501 	.word	0x08009501
 80094fc:	08009501 	.word	0x08009501
	case CDC_SEND_BREAK:

		break;

	default:
		break;
 8009500:	bf00      	nop
	}

	return (USBD_OK);
 8009502:	2300      	movs	r3, #0
	/* USER CODE END 5 */
}
 8009504:	4618      	mov	r0, r3
 8009506:	370c      	adds	r7, #12
 8009508:	46bd      	mov	sp, r7
 800950a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950e:	4770      	bx	lr

08009510 <CDC_Receive_FS>:
 * @param  Buf: Buffer of data to be received
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b082      	sub	sp, #8
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
 8009518:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800951a:	6879      	ldr	r1, [r7, #4]
 800951c:	4830      	ldr	r0, [pc, #192]	; (80095e0 <CDC_Receive_FS+0xd0>)
 800951e:	f7fe fbe9 	bl	8007cf4 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009522:	482f      	ldr	r0, [pc, #188]	; (80095e0 <CDC_Receive_FS+0xd0>)
 8009524:	f7fe fc2a 	bl	8007d7c <USBD_CDC_ReceivePacket>

	if(ReceivedIter == 0){
 8009528:	4b2e      	ldr	r3, [pc, #184]	; (80095e4 <CDC_Receive_FS+0xd4>)
 800952a:	781b      	ldrb	r3, [r3, #0]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d10b      	bne.n	8009548 <CDC_Receive_FS+0x38>
		sscanf(&Buf[0], "%d", &ReceivedLength);
 8009530:	4a2d      	ldr	r2, [pc, #180]	; (80095e8 <CDC_Receive_FS+0xd8>)
 8009532:	492e      	ldr	r1, [pc, #184]	; (80095ec <CDC_Receive_FS+0xdc>)
 8009534:	6878      	ldr	r0, [r7, #4]
 8009536:	f000 fda5 	bl	800a084 <siscanf>
		ReceivedIter++;
 800953a:	4b2a      	ldr	r3, [pc, #168]	; (80095e4 <CDC_Receive_FS+0xd4>)
 800953c:	781b      	ldrb	r3, [r3, #0]
 800953e:	3301      	adds	r3, #1
 8009540:	b2da      	uxtb	r2, r3
 8009542:	4b28      	ldr	r3, [pc, #160]	; (80095e4 <CDC_Receive_FS+0xd4>)
 8009544:	701a      	strb	r2, [r3, #0]
 8009546:	e046      	b.n	80095d6 <CDC_Receive_FS+0xc6>
	}else if(ReceivedIter == 1){
 8009548:	4b26      	ldr	r3, [pc, #152]	; (80095e4 <CDC_Receive_FS+0xd4>)
 800954a:	781b      	ldrb	r3, [r3, #0]
 800954c:	2b01      	cmp	r3, #1
 800954e:	d106      	bne.n	800955e <CDC_Receive_FS+0x4e>
		ReceivedIter++;
 8009550:	4b24      	ldr	r3, [pc, #144]	; (80095e4 <CDC_Receive_FS+0xd4>)
 8009552:	781b      	ldrb	r3, [r3, #0]
 8009554:	3301      	adds	r3, #1
 8009556:	b2da      	uxtb	r2, r3
 8009558:	4b22      	ldr	r3, [pc, #136]	; (80095e4 <CDC_Receive_FS+0xd4>)
 800955a:	701a      	strb	r2, [r3, #0]
 800955c:	e03b      	b.n	80095d6 <CDC_Receive_FS+0xc6>
	}else if(ReceivedIter == 2){
 800955e:	4b21      	ldr	r3, [pc, #132]	; (80095e4 <CDC_Receive_FS+0xd4>)
 8009560:	781b      	ldrb	r3, [r3, #0]
 8009562:	2b02      	cmp	r3, #2
 8009564:	d10b      	bne.n	800957e <CDC_Receive_FS+0x6e>
		sscanf(&Buf[0], "%d", &ReceivedPassNr);
 8009566:	4a22      	ldr	r2, [pc, #136]	; (80095f0 <CDC_Receive_FS+0xe0>)
 8009568:	4920      	ldr	r1, [pc, #128]	; (80095ec <CDC_Receive_FS+0xdc>)
 800956a:	6878      	ldr	r0, [r7, #4]
 800956c:	f000 fd8a 	bl	800a084 <siscanf>
		ReceivedIter++;
 8009570:	4b1c      	ldr	r3, [pc, #112]	; (80095e4 <CDC_Receive_FS+0xd4>)
 8009572:	781b      	ldrb	r3, [r3, #0]
 8009574:	3301      	adds	r3, #1
 8009576:	b2da      	uxtb	r2, r3
 8009578:	4b1a      	ldr	r3, [pc, #104]	; (80095e4 <CDC_Receive_FS+0xd4>)
 800957a:	701a      	strb	r2, [r3, #0]
 800957c:	e02b      	b.n	80095d6 <CDC_Receive_FS+0xc6>
	}else if(ReceivedIter == 3){
 800957e:	4b19      	ldr	r3, [pc, #100]	; (80095e4 <CDC_Receive_FS+0xd4>)
 8009580:	781b      	ldrb	r3, [r3, #0]
 8009582:	2b03      	cmp	r3, #3
 8009584:	d106      	bne.n	8009594 <CDC_Receive_FS+0x84>
		ReceivedIter++;
 8009586:	4b17      	ldr	r3, [pc, #92]	; (80095e4 <CDC_Receive_FS+0xd4>)
 8009588:	781b      	ldrb	r3, [r3, #0]
 800958a:	3301      	adds	r3, #1
 800958c:	b2da      	uxtb	r2, r3
 800958e:	4b15      	ldr	r3, [pc, #84]	; (80095e4 <CDC_Receive_FS+0xd4>)
 8009590:	701a      	strb	r2, [r3, #0]
 8009592:	e020      	b.n	80095d6 <CDC_Receive_FS+0xc6>
	}else{
		ReceivedData[ReceivedIter-4] = Buf[0];
 8009594:	4b13      	ldr	r3, [pc, #76]	; (80095e4 <CDC_Receive_FS+0xd4>)
 8009596:	781b      	ldrb	r3, [r3, #0]
 8009598:	3b04      	subs	r3, #4
 800959a:	687a      	ldr	r2, [r7, #4]
 800959c:	7811      	ldrb	r1, [r2, #0]
 800959e:	4a15      	ldr	r2, [pc, #84]	; (80095f4 <CDC_Receive_FS+0xe4>)
 80095a0:	54d1      	strb	r1, [r2, r3]
		ReceivedIter++;
 80095a2:	4b10      	ldr	r3, [pc, #64]	; (80095e4 <CDC_Receive_FS+0xd4>)
 80095a4:	781b      	ldrb	r3, [r3, #0]
 80095a6:	3301      	adds	r3, #1
 80095a8:	b2da      	uxtb	r2, r3
 80095aa:	4b0e      	ldr	r3, [pc, #56]	; (80095e4 <CDC_Receive_FS+0xd4>)
 80095ac:	701a      	strb	r2, [r3, #0]
		if(ReceivedIter == ReceivedLength+4){
 80095ae:	4b0d      	ldr	r3, [pc, #52]	; (80095e4 <CDC_Receive_FS+0xd4>)
 80095b0:	781b      	ldrb	r3, [r3, #0]
 80095b2:	461a      	mov	r2, r3
 80095b4:	4b0c      	ldr	r3, [pc, #48]	; (80095e8 <CDC_Receive_FS+0xd8>)
 80095b6:	781b      	ldrb	r3, [r3, #0]
 80095b8:	3304      	adds	r3, #4
 80095ba:	429a      	cmp	r2, r3
 80095bc:	d10b      	bne.n	80095d6 <CDC_Receive_FS+0xc6>
			ReceivedData[ReceivedIter-4] = '\0';
 80095be:	4b09      	ldr	r3, [pc, #36]	; (80095e4 <CDC_Receive_FS+0xd4>)
 80095c0:	781b      	ldrb	r3, [r3, #0]
 80095c2:	3b04      	subs	r3, #4
 80095c4:	4a0b      	ldr	r2, [pc, #44]	; (80095f4 <CDC_Receive_FS+0xe4>)
 80095c6:	2100      	movs	r1, #0
 80095c8:	54d1      	strb	r1, [r2, r3]
			ReceivedDataFlag = 1;
 80095ca:	4b0b      	ldr	r3, [pc, #44]	; (80095f8 <CDC_Receive_FS+0xe8>)
 80095cc:	2201      	movs	r2, #1
 80095ce:	701a      	strb	r2, [r3, #0]
			ReceivedIter = 0;
 80095d0:	4b04      	ldr	r3, [pc, #16]	; (80095e4 <CDC_Receive_FS+0xd4>)
 80095d2:	2200      	movs	r2, #0
 80095d4:	701a      	strb	r2, [r3, #0]
		}

	}

	return (USBD_OK);
 80095d6:	2300      	movs	r3, #0
	/* USER CODE END 6 */
}
 80095d8:	4618      	mov	r0, r3
 80095da:	3708      	adds	r7, #8
 80095dc:	46bd      	mov	sp, r7
 80095de:	bd80      	pop	{r7, pc}
 80095e0:	20000ba4 	.word	0x20000ba4
 80095e4:	2000056c 	.word	0x2000056c
 80095e8:	200009ec 	.word	0x200009ec
 80095ec:	0800ab48 	.word	0x0800ab48
 80095f0:	20000adc 	.word	0x20000adc
 80095f4:	20000a9c 	.word	0x20000a9c
 80095f8:	2000056d 	.word	0x2000056d

080095fc <CDC_Transmit_FS>:
 * @param  Buf: Buffer of data to be sent
 * @param  Len: Number of data to be sent (in bytes)
 * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
 */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b084      	sub	sp, #16
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
 8009604:	460b      	mov	r3, r1
 8009606:	807b      	strh	r3, [r7, #2]
	uint8_t result = USBD_OK;
 8009608:	2300      	movs	r3, #0
 800960a:	73fb      	strb	r3, [r7, #15]
	/* USER CODE BEGIN 7 */
	USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800960c:	4b0d      	ldr	r3, [pc, #52]	; (8009644 <CDC_Transmit_FS+0x48>)
 800960e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009612:	60bb      	str	r3, [r7, #8]
	if (hcdc->TxState != 0){
 8009614:	68bb      	ldr	r3, [r7, #8]
 8009616:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800961a:	2b00      	cmp	r3, #0
 800961c:	d001      	beq.n	8009622 <CDC_Transmit_FS+0x26>
		return USBD_BUSY;
 800961e:	2301      	movs	r3, #1
 8009620:	e00b      	b.n	800963a <CDC_Transmit_FS+0x3e>
	}
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009622:	887b      	ldrh	r3, [r7, #2]
 8009624:	461a      	mov	r2, r3
 8009626:	6879      	ldr	r1, [r7, #4]
 8009628:	4806      	ldr	r0, [pc, #24]	; (8009644 <CDC_Transmit_FS+0x48>)
 800962a:	f7fe fb4a 	bl	8007cc2 <USBD_CDC_SetTxBuffer>
	result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800962e:	4805      	ldr	r0, [pc, #20]	; (8009644 <CDC_Transmit_FS+0x48>)
 8009630:	f7fe fb74 	bl	8007d1c <USBD_CDC_TransmitPacket>
 8009634:	4603      	mov	r3, r0
 8009636:	73fb      	strb	r3, [r7, #15]
	/* USER CODE END 7 */
	return result;
 8009638:	7bfb      	ldrb	r3, [r7, #15]
}
 800963a:	4618      	mov	r0, r3
 800963c:	3710      	adds	r7, #16
 800963e:	46bd      	mov	sp, r7
 8009640:	bd80      	pop	{r7, pc}
 8009642:	bf00      	nop
 8009644:	20000ba4 	.word	0x20000ba4

08009648 <CDC_TransmitCplt_FS>:
 * @param  Buf: Buffer of data to be received
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009648:	b480      	push	{r7}
 800964a:	b087      	sub	sp, #28
 800964c:	af00      	add	r7, sp, #0
 800964e:	60f8      	str	r0, [r7, #12]
 8009650:	60b9      	str	r1, [r7, #8]
 8009652:	4613      	mov	r3, r2
 8009654:	71fb      	strb	r3, [r7, #7]
	uint8_t result = USBD_OK;
 8009656:	2300      	movs	r3, #0
 8009658:	75fb      	strb	r3, [r7, #23]
	/* USER CODE BEGIN 13 */
	UNUSED(Buf);
	UNUSED(Len);
	UNUSED(epnum);
	/* USER CODE END 13 */
	return result;
 800965a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800965e:	4618      	mov	r0, r3
 8009660:	371c      	adds	r7, #28
 8009662:	46bd      	mov	sp, r7
 8009664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009668:	4770      	bx	lr
	...

0800966c <USBD_FS_DeviceDescriptor>:
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800966c:	b480      	push	{r7}
 800966e:	b083      	sub	sp, #12
 8009670:	af00      	add	r7, sp, #0
 8009672:	4603      	mov	r3, r0
 8009674:	6039      	str	r1, [r7, #0]
 8009676:	71fb      	strb	r3, [r7, #7]
	UNUSED(speed);
	*length = sizeof(USBD_FS_DeviceDesc);
 8009678:	683b      	ldr	r3, [r7, #0]
 800967a:	2212      	movs	r2, #18
 800967c:	801a      	strh	r2, [r3, #0]
	return USBD_FS_DeviceDesc;
 800967e:	4b03      	ldr	r3, [pc, #12]	; (800968c <USBD_FS_DeviceDescriptor+0x20>)
}
 8009680:	4618      	mov	r0, r3
 8009682:	370c      	adds	r7, #12
 8009684:	46bd      	mov	sp, r7
 8009686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968a:	4770      	bx	lr
 800968c:	20000304 	.word	0x20000304

08009690 <USBD_FS_DeviceDescriptor_SETUP>:
// wpisywanie hasel descriptor
uint8_t * USBD_FS_DeviceDescriptor_SETUP(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009690:	b480      	push	{r7}
 8009692:	b083      	sub	sp, #12
 8009694:	af00      	add	r7, sp, #0
 8009696:	4603      	mov	r3, r0
 8009698:	6039      	str	r1, [r7, #0]
 800969a:	71fb      	strb	r3, [r7, #7]
	UNUSED(speed);
	*length = sizeof(USBD_FS_DeviceDesc_SETUP);
 800969c:	683b      	ldr	r3, [r7, #0]
 800969e:	2212      	movs	r2, #18
 80096a0:	801a      	strh	r2, [r3, #0]
	return USBD_FS_DeviceDesc_SETUP;
 80096a2:	4b03      	ldr	r3, [pc, #12]	; (80096b0 <USBD_FS_DeviceDescriptor_SETUP+0x20>)
}
 80096a4:	4618      	mov	r0, r3
 80096a6:	370c      	adds	r7, #12
 80096a8:	46bd      	mov	sp, r7
 80096aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ae:	4770      	bx	lr
 80096b0:	20000318 	.word	0x20000318

080096b4 <USBD_FS_LangIDStrDescriptor>:
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80096b4:	b480      	push	{r7}
 80096b6:	b083      	sub	sp, #12
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	4603      	mov	r3, r0
 80096bc:	6039      	str	r1, [r7, #0]
 80096be:	71fb      	strb	r3, [r7, #7]
	UNUSED(speed);
	*length = sizeof(USBD_LangIDDesc);
 80096c0:	683b      	ldr	r3, [r7, #0]
 80096c2:	2204      	movs	r2, #4
 80096c4:	801a      	strh	r2, [r3, #0]
	return USBD_LangIDDesc;
 80096c6:	4b03      	ldr	r3, [pc, #12]	; (80096d4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80096c8:	4618      	mov	r0, r3
 80096ca:	370c      	adds	r7, #12
 80096cc:	46bd      	mov	sp, r7
 80096ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d2:	4770      	bx	lr
 80096d4:	2000032c 	.word	0x2000032c

080096d8 <USBD_FS_ProductStrDescriptor>:
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b082      	sub	sp, #8
 80096dc:	af00      	add	r7, sp, #0
 80096de:	4603      	mov	r3, r0
 80096e0:	6039      	str	r1, [r7, #0]
 80096e2:	71fb      	strb	r3, [r7, #7]
	if(speed == 0)
 80096e4:	79fb      	ldrb	r3, [r7, #7]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d105      	bne.n	80096f6 <USBD_FS_ProductStrDescriptor+0x1e>
	{
		USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80096ea:	683a      	ldr	r2, [r7, #0]
 80096ec:	4907      	ldr	r1, [pc, #28]	; (800970c <USBD_FS_ProductStrDescriptor+0x34>)
 80096ee:	4808      	ldr	r0, [pc, #32]	; (8009710 <USBD_FS_ProductStrDescriptor+0x38>)
 80096f0:	f7ff fd59 	bl	80091a6 <USBD_GetString>
 80096f4:	e004      	b.n	8009700 <USBD_FS_ProductStrDescriptor+0x28>
	}
	else
	{
		USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80096f6:	683a      	ldr	r2, [r7, #0]
 80096f8:	4904      	ldr	r1, [pc, #16]	; (800970c <USBD_FS_ProductStrDescriptor+0x34>)
 80096fa:	4805      	ldr	r0, [pc, #20]	; (8009710 <USBD_FS_ProductStrDescriptor+0x38>)
 80096fc:	f7ff fd53 	bl	80091a6 <USBD_GetString>
	}
	return USBD_StrDesc;
 8009700:	4b02      	ldr	r3, [pc, #8]	; (800970c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009702:	4618      	mov	r0, r3
 8009704:	3708      	adds	r7, #8
 8009706:	46bd      	mov	sp, r7
 8009708:	bd80      	pop	{r7, pc}
 800970a:	bf00      	nop
 800970c:	20000edc 	.word	0x20000edc
 8009710:	0800ab4c 	.word	0x0800ab4c

08009714 <USBD_FS_ManufacturerStrDescriptor>:
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b082      	sub	sp, #8
 8009718:	af00      	add	r7, sp, #0
 800971a:	4603      	mov	r3, r0
 800971c:	6039      	str	r1, [r7, #0]
 800971e:	71fb      	strb	r3, [r7, #7]
	UNUSED(speed);
	USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009720:	683a      	ldr	r2, [r7, #0]
 8009722:	4904      	ldr	r1, [pc, #16]	; (8009734 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009724:	4804      	ldr	r0, [pc, #16]	; (8009738 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009726:	f7ff fd3e 	bl	80091a6 <USBD_GetString>
	return USBD_StrDesc;
 800972a:	4b02      	ldr	r3, [pc, #8]	; (8009734 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800972c:	4618      	mov	r0, r3
 800972e:	3708      	adds	r7, #8
 8009730:	46bd      	mov	sp, r7
 8009732:	bd80      	pop	{r7, pc}
 8009734:	20000edc 	.word	0x20000edc
 8009738:	0800ab64 	.word	0x0800ab64

0800973c <USBD_FS_SerialStrDescriptor>:
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b082      	sub	sp, #8
 8009740:	af00      	add	r7, sp, #0
 8009742:	4603      	mov	r3, r0
 8009744:	6039      	str	r1, [r7, #0]
 8009746:	71fb      	strb	r3, [r7, #7]
	UNUSED(speed);
	*length = USB_SIZ_STRING_SERIAL;
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	221a      	movs	r2, #26
 800974c:	801a      	strh	r2, [r3, #0]

	/* Update the serial number string descriptor with the data from the unique
	 * ID */
	Get_SerialNum();
 800974e:	f000 f843 	bl	80097d8 <Get_SerialNum>
	/* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

	/* USER CODE END USBD_FS_SerialStrDescriptor */
	return (uint8_t *) USBD_StringSerial;
 8009752:	4b02      	ldr	r3, [pc, #8]	; (800975c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009754:	4618      	mov	r0, r3
 8009756:	3708      	adds	r7, #8
 8009758:	46bd      	mov	sp, r7
 800975a:	bd80      	pop	{r7, pc}
 800975c:	20000330 	.word	0x20000330

08009760 <USBD_FS_ConfigStrDescriptor>:
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009760:	b580      	push	{r7, lr}
 8009762:	b082      	sub	sp, #8
 8009764:	af00      	add	r7, sp, #0
 8009766:	4603      	mov	r3, r0
 8009768:	6039      	str	r1, [r7, #0]
 800976a:	71fb      	strb	r3, [r7, #7]
	if(speed == USBD_SPEED_HIGH)
 800976c:	79fb      	ldrb	r3, [r7, #7]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d105      	bne.n	800977e <USBD_FS_ConfigStrDescriptor+0x1e>
	{
		USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009772:	683a      	ldr	r2, [r7, #0]
 8009774:	4907      	ldr	r1, [pc, #28]	; (8009794 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009776:	4808      	ldr	r0, [pc, #32]	; (8009798 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009778:	f7ff fd15 	bl	80091a6 <USBD_GetString>
 800977c:	e004      	b.n	8009788 <USBD_FS_ConfigStrDescriptor+0x28>
	}
	else
	{
		USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800977e:	683a      	ldr	r2, [r7, #0]
 8009780:	4904      	ldr	r1, [pc, #16]	; (8009794 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009782:	4805      	ldr	r0, [pc, #20]	; (8009798 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009784:	f7ff fd0f 	bl	80091a6 <USBD_GetString>
	}
	return USBD_StrDesc;
 8009788:	4b02      	ldr	r3, [pc, #8]	; (8009794 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800978a:	4618      	mov	r0, r3
 800978c:	3708      	adds	r7, #8
 800978e:	46bd      	mov	sp, r7
 8009790:	bd80      	pop	{r7, pc}
 8009792:	bf00      	nop
 8009794:	20000edc 	.word	0x20000edc
 8009798:	0800ab78 	.word	0x0800ab78

0800979c <USBD_FS_InterfaceStrDescriptor>:
 * @param  speed : Current device speed
 * @param  length : Pointer to data length variable
 * @retval Pointer to descriptor buffer
 */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800979c:	b580      	push	{r7, lr}
 800979e:	b082      	sub	sp, #8
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	4603      	mov	r3, r0
 80097a4:	6039      	str	r1, [r7, #0]
 80097a6:	71fb      	strb	r3, [r7, #7]
	if(speed == 0)
 80097a8:	79fb      	ldrb	r3, [r7, #7]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d105      	bne.n	80097ba <USBD_FS_InterfaceStrDescriptor+0x1e>
	{
		USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80097ae:	683a      	ldr	r2, [r7, #0]
 80097b0:	4907      	ldr	r1, [pc, #28]	; (80097d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80097b2:	4808      	ldr	r0, [pc, #32]	; (80097d4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80097b4:	f7ff fcf7 	bl	80091a6 <USBD_GetString>
 80097b8:	e004      	b.n	80097c4 <USBD_FS_InterfaceStrDescriptor+0x28>
	}
	else
	{
		USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80097ba:	683a      	ldr	r2, [r7, #0]
 80097bc:	4904      	ldr	r1, [pc, #16]	; (80097d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80097be:	4805      	ldr	r0, [pc, #20]	; (80097d4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80097c0:	f7ff fcf1 	bl	80091a6 <USBD_GetString>
	}
	return USBD_StrDesc;
 80097c4:	4b02      	ldr	r3, [pc, #8]	; (80097d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80097c6:	4618      	mov	r0, r3
 80097c8:	3708      	adds	r7, #8
 80097ca:	46bd      	mov	sp, r7
 80097cc:	bd80      	pop	{r7, pc}
 80097ce:	bf00      	nop
 80097d0:	20000edc 	.word	0x20000edc
 80097d4:	0800ab84 	.word	0x0800ab84

080097d8 <Get_SerialNum>:
 * @brief  Create the serial number string descriptor
 * @param  None
 * @retval None
 */
static void Get_SerialNum(void)
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	b084      	sub	sp, #16
 80097dc:	af00      	add	r7, sp, #0
	uint32_t deviceserial0, deviceserial1, deviceserial2;

	deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80097de:	4b0f      	ldr	r3, [pc, #60]	; (800981c <Get_SerialNum+0x44>)
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	60fb      	str	r3, [r7, #12]
	deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80097e4:	4b0e      	ldr	r3, [pc, #56]	; (8009820 <Get_SerialNum+0x48>)
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	60bb      	str	r3, [r7, #8]
	deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80097ea:	4b0e      	ldr	r3, [pc, #56]	; (8009824 <Get_SerialNum+0x4c>)
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	607b      	str	r3, [r7, #4]

	deviceserial0 += deviceserial2;
 80097f0:	68fa      	ldr	r2, [r7, #12]
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	4413      	add	r3, r2
 80097f6:	60fb      	str	r3, [r7, #12]

	if (deviceserial0 != 0)
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d009      	beq.n	8009812 <Get_SerialNum+0x3a>
	{
		IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80097fe:	2208      	movs	r2, #8
 8009800:	4909      	ldr	r1, [pc, #36]	; (8009828 <Get_SerialNum+0x50>)
 8009802:	68f8      	ldr	r0, [r7, #12]
 8009804:	f000 f814 	bl	8009830 <IntToUnicode>
		IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009808:	2204      	movs	r2, #4
 800980a:	4908      	ldr	r1, [pc, #32]	; (800982c <Get_SerialNum+0x54>)
 800980c:	68b8      	ldr	r0, [r7, #8]
 800980e:	f000 f80f 	bl	8009830 <IntToUnicode>
	}
}
 8009812:	bf00      	nop
 8009814:	3710      	adds	r7, #16
 8009816:	46bd      	mov	sp, r7
 8009818:	bd80      	pop	{r7, pc}
 800981a:	bf00      	nop
 800981c:	1fff7a10 	.word	0x1fff7a10
 8009820:	1fff7a14 	.word	0x1fff7a14
 8009824:	1fff7a18 	.word	0x1fff7a18
 8009828:	20000332 	.word	0x20000332
 800982c:	20000342 	.word	0x20000342

08009830 <IntToUnicode>:
 * @param  pbuf: pointer to the buffer
 * @param  len: buffer length
 * @retval None
 */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009830:	b480      	push	{r7}
 8009832:	b087      	sub	sp, #28
 8009834:	af00      	add	r7, sp, #0
 8009836:	60f8      	str	r0, [r7, #12]
 8009838:	60b9      	str	r1, [r7, #8]
 800983a:	4613      	mov	r3, r2
 800983c:	71fb      	strb	r3, [r7, #7]
	uint8_t idx = 0;
 800983e:	2300      	movs	r3, #0
 8009840:	75fb      	strb	r3, [r7, #23]

	for (idx = 0; idx < len; idx++)
 8009842:	2300      	movs	r3, #0
 8009844:	75fb      	strb	r3, [r7, #23]
 8009846:	e027      	b.n	8009898 <IntToUnicode+0x68>
	{
		if (((value >> 28)) < 0xA)
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	0f1b      	lsrs	r3, r3, #28
 800984c:	2b09      	cmp	r3, #9
 800984e:	d80b      	bhi.n	8009868 <IntToUnicode+0x38>
		{
			pbuf[2 * idx] = (value >> 28) + '0';
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	0f1b      	lsrs	r3, r3, #28
 8009854:	b2da      	uxtb	r2, r3
 8009856:	7dfb      	ldrb	r3, [r7, #23]
 8009858:	005b      	lsls	r3, r3, #1
 800985a:	4619      	mov	r1, r3
 800985c:	68bb      	ldr	r3, [r7, #8]
 800985e:	440b      	add	r3, r1
 8009860:	3230      	adds	r2, #48	; 0x30
 8009862:	b2d2      	uxtb	r2, r2
 8009864:	701a      	strb	r2, [r3, #0]
 8009866:	e00a      	b.n	800987e <IntToUnicode+0x4e>
		}
		else
		{
			pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	0f1b      	lsrs	r3, r3, #28
 800986c:	b2da      	uxtb	r2, r3
 800986e:	7dfb      	ldrb	r3, [r7, #23]
 8009870:	005b      	lsls	r3, r3, #1
 8009872:	4619      	mov	r1, r3
 8009874:	68bb      	ldr	r3, [r7, #8]
 8009876:	440b      	add	r3, r1
 8009878:	3237      	adds	r2, #55	; 0x37
 800987a:	b2d2      	uxtb	r2, r2
 800987c:	701a      	strb	r2, [r3, #0]
		}

		value = value << 4;
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	011b      	lsls	r3, r3, #4
 8009882:	60fb      	str	r3, [r7, #12]

		pbuf[2 * idx + 1] = 0;
 8009884:	7dfb      	ldrb	r3, [r7, #23]
 8009886:	005b      	lsls	r3, r3, #1
 8009888:	3301      	adds	r3, #1
 800988a:	68ba      	ldr	r2, [r7, #8]
 800988c:	4413      	add	r3, r2
 800988e:	2200      	movs	r2, #0
 8009890:	701a      	strb	r2, [r3, #0]
	for (idx = 0; idx < len; idx++)
 8009892:	7dfb      	ldrb	r3, [r7, #23]
 8009894:	3301      	adds	r3, #1
 8009896:	75fb      	strb	r3, [r7, #23]
 8009898:	7dfa      	ldrb	r2, [r7, #23]
 800989a:	79fb      	ldrb	r3, [r7, #7]
 800989c:	429a      	cmp	r2, r3
 800989e:	d3d3      	bcc.n	8009848 <IntToUnicode+0x18>
	}
}
 80098a0:	bf00      	nop
 80098a2:	371c      	adds	r7, #28
 80098a4:	46bd      	mov	sp, r7
 80098a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098aa:	4770      	bx	lr

080098ac <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b08a      	sub	sp, #40	; 0x28
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80098b4:	f107 0314 	add.w	r3, r7, #20
 80098b8:	2200      	movs	r2, #0
 80098ba:	601a      	str	r2, [r3, #0]
 80098bc:	605a      	str	r2, [r3, #4]
 80098be:	609a      	str	r2, [r3, #8]
 80098c0:	60da      	str	r2, [r3, #12]
 80098c2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80098cc:	d13a      	bne.n	8009944 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80098ce:	2300      	movs	r3, #0
 80098d0:	613b      	str	r3, [r7, #16]
 80098d2:	4b1e      	ldr	r3, [pc, #120]	; (800994c <HAL_PCD_MspInit+0xa0>)
 80098d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098d6:	4a1d      	ldr	r2, [pc, #116]	; (800994c <HAL_PCD_MspInit+0xa0>)
 80098d8:	f043 0301 	orr.w	r3, r3, #1
 80098dc:	6313      	str	r3, [r2, #48]	; 0x30
 80098de:	4b1b      	ldr	r3, [pc, #108]	; (800994c <HAL_PCD_MspInit+0xa0>)
 80098e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098e2:	f003 0301 	and.w	r3, r3, #1
 80098e6:	613b      	str	r3, [r7, #16]
 80098e8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80098ea:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80098ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80098f0:	2302      	movs	r3, #2
 80098f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80098f4:	2300      	movs	r3, #0
 80098f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80098f8:	2303      	movs	r3, #3
 80098fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80098fc:	230a      	movs	r3, #10
 80098fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009900:	f107 0314 	add.w	r3, r7, #20
 8009904:	4619      	mov	r1, r3
 8009906:	4812      	ldr	r0, [pc, #72]	; (8009950 <HAL_PCD_MspInit+0xa4>)
 8009908:	f7f8 febc 	bl	8002684 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800990c:	4b0f      	ldr	r3, [pc, #60]	; (800994c <HAL_PCD_MspInit+0xa0>)
 800990e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009910:	4a0e      	ldr	r2, [pc, #56]	; (800994c <HAL_PCD_MspInit+0xa0>)
 8009912:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009916:	6353      	str	r3, [r2, #52]	; 0x34
 8009918:	2300      	movs	r3, #0
 800991a:	60fb      	str	r3, [r7, #12]
 800991c:	4b0b      	ldr	r3, [pc, #44]	; (800994c <HAL_PCD_MspInit+0xa0>)
 800991e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009920:	4a0a      	ldr	r2, [pc, #40]	; (800994c <HAL_PCD_MspInit+0xa0>)
 8009922:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009926:	6453      	str	r3, [r2, #68]	; 0x44
 8009928:	4b08      	ldr	r3, [pc, #32]	; (800994c <HAL_PCD_MspInit+0xa0>)
 800992a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800992c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009930:	60fb      	str	r3, [r7, #12]
 8009932:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009934:	2200      	movs	r2, #0
 8009936:	2100      	movs	r1, #0
 8009938:	2043      	movs	r0, #67	; 0x43
 800993a:	f7f8 fe6c 	bl	8002616 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800993e:	2043      	movs	r0, #67	; 0x43
 8009940:	f7f8 fe85 	bl	800264e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009944:	bf00      	nop
 8009946:	3728      	adds	r7, #40	; 0x28
 8009948:	46bd      	mov	sp, r7
 800994a:	bd80      	pop	{r7, pc}
 800994c:	40023800 	.word	0x40023800
 8009950:	40020000 	.word	0x40020000

08009954 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009954:	b580      	push	{r7, lr}
 8009956:	b082      	sub	sp, #8
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009968:	4619      	mov	r1, r3
 800996a:	4610      	mov	r0, r2
 800996c:	f7fe fc98 	bl	80082a0 <USBD_LL_SetupStage>
}
 8009970:	bf00      	nop
 8009972:	3708      	adds	r7, #8
 8009974:	46bd      	mov	sp, r7
 8009976:	bd80      	pop	{r7, pc}

08009978 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b082      	sub	sp, #8
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
 8009980:	460b      	mov	r3, r1
 8009982:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800998a:	78fa      	ldrb	r2, [r7, #3]
 800998c:	6879      	ldr	r1, [r7, #4]
 800998e:	4613      	mov	r3, r2
 8009990:	00db      	lsls	r3, r3, #3
 8009992:	1a9b      	subs	r3, r3, r2
 8009994:	009b      	lsls	r3, r3, #2
 8009996:	440b      	add	r3, r1
 8009998:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800999c:	681a      	ldr	r2, [r3, #0]
 800999e:	78fb      	ldrb	r3, [r7, #3]
 80099a0:	4619      	mov	r1, r3
 80099a2:	f7fe fcd0 	bl	8008346 <USBD_LL_DataOutStage>
}
 80099a6:	bf00      	nop
 80099a8:	3708      	adds	r7, #8
 80099aa:	46bd      	mov	sp, r7
 80099ac:	bd80      	pop	{r7, pc}

080099ae <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099ae:	b580      	push	{r7, lr}
 80099b0:	b082      	sub	sp, #8
 80099b2:	af00      	add	r7, sp, #0
 80099b4:	6078      	str	r0, [r7, #4]
 80099b6:	460b      	mov	r3, r1
 80099b8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80099c0:	78fa      	ldrb	r2, [r7, #3]
 80099c2:	6879      	ldr	r1, [r7, #4]
 80099c4:	4613      	mov	r3, r2
 80099c6:	00db      	lsls	r3, r3, #3
 80099c8:	1a9b      	subs	r3, r3, r2
 80099ca:	009b      	lsls	r3, r3, #2
 80099cc:	440b      	add	r3, r1
 80099ce:	3348      	adds	r3, #72	; 0x48
 80099d0:	681a      	ldr	r2, [r3, #0]
 80099d2:	78fb      	ldrb	r3, [r7, #3]
 80099d4:	4619      	mov	r1, r3
 80099d6:	f7fe fd19 	bl	800840c <USBD_LL_DataInStage>
}
 80099da:	bf00      	nop
 80099dc:	3708      	adds	r7, #8
 80099de:	46bd      	mov	sp, r7
 80099e0:	bd80      	pop	{r7, pc}

080099e2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099e2:	b580      	push	{r7, lr}
 80099e4:	b082      	sub	sp, #8
 80099e6:	af00      	add	r7, sp, #0
 80099e8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80099f0:	4618      	mov	r0, r3
 80099f2:	f7fe fe1d 	bl	8008630 <USBD_LL_SOF>
}
 80099f6:	bf00      	nop
 80099f8:	3708      	adds	r7, #8
 80099fa:	46bd      	mov	sp, r7
 80099fc:	bd80      	pop	{r7, pc}

080099fe <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099fe:	b580      	push	{r7, lr}
 8009a00:	b084      	sub	sp, #16
 8009a02:	af00      	add	r7, sp, #0
 8009a04:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009a06:	2301      	movs	r3, #1
 8009a08:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	68db      	ldr	r3, [r3, #12]
 8009a0e:	2b02      	cmp	r3, #2
 8009a10:	d001      	beq.n	8009a16 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009a12:	f7f7 fb8b 	bl	800112c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009a1c:	7bfa      	ldrb	r2, [r7, #15]
 8009a1e:	4611      	mov	r1, r2
 8009a20:	4618      	mov	r0, r3
 8009a22:	f7fe fdca 	bl	80085ba <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	f7fe fd83 	bl	8008538 <USBD_LL_Reset>
}
 8009a32:	bf00      	nop
 8009a34:	3710      	adds	r7, #16
 8009a36:	46bd      	mov	sp, r7
 8009a38:	bd80      	pop	{r7, pc}
	...

08009a3c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b082      	sub	sp, #8
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	f7fe fdc5 	bl	80085da <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	687a      	ldr	r2, [r7, #4]
 8009a5c:	6812      	ldr	r2, [r2, #0]
 8009a5e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009a62:	f043 0301 	orr.w	r3, r3, #1
 8009a66:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	6a1b      	ldr	r3, [r3, #32]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d005      	beq.n	8009a7c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009a70:	4b04      	ldr	r3, [pc, #16]	; (8009a84 <HAL_PCD_SuspendCallback+0x48>)
 8009a72:	691b      	ldr	r3, [r3, #16]
 8009a74:	4a03      	ldr	r2, [pc, #12]	; (8009a84 <HAL_PCD_SuspendCallback+0x48>)
 8009a76:	f043 0306 	orr.w	r3, r3, #6
 8009a7a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009a7c:	bf00      	nop
 8009a7e:	3708      	adds	r7, #8
 8009a80:	46bd      	mov	sp, r7
 8009a82:	bd80      	pop	{r7, pc}
 8009a84:	e000ed00 	.word	0xe000ed00

08009a88 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b082      	sub	sp, #8
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009a96:	4618      	mov	r0, r3
 8009a98:	f7fe fdb4 	bl	8008604 <USBD_LL_Resume>
}
 8009a9c:	bf00      	nop
 8009a9e:	3708      	adds	r7, #8
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	bd80      	pop	{r7, pc}

08009aa4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	b082      	sub	sp, #8
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
 8009aac:	460b      	mov	r3, r1
 8009aae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009ab6:	78fa      	ldrb	r2, [r7, #3]
 8009ab8:	4611      	mov	r1, r2
 8009aba:	4618      	mov	r0, r3
 8009abc:	f7fe fddf 	bl	800867e <USBD_LL_IsoOUTIncomplete>
}
 8009ac0:	bf00      	nop
 8009ac2:	3708      	adds	r7, #8
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	bd80      	pop	{r7, pc}

08009ac8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b082      	sub	sp, #8
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
 8009ad0:	460b      	mov	r3, r1
 8009ad2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009ada:	78fa      	ldrb	r2, [r7, #3]
 8009adc:	4611      	mov	r1, r2
 8009ade:	4618      	mov	r0, r3
 8009ae0:	f7fe fdc0 	bl	8008664 <USBD_LL_IsoINIncomplete>
}
 8009ae4:	bf00      	nop
 8009ae6:	3708      	adds	r7, #8
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	bd80      	pop	{r7, pc}

08009aec <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b082      	sub	sp, #8
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009afa:	4618      	mov	r0, r3
 8009afc:	f7fe fdcc 	bl	8008698 <USBD_LL_DevConnected>
}
 8009b00:	bf00      	nop
 8009b02:	3708      	adds	r7, #8
 8009b04:	46bd      	mov	sp, r7
 8009b06:	bd80      	pop	{r7, pc}

08009b08 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b082      	sub	sp, #8
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009b16:	4618      	mov	r0, r3
 8009b18:	f7fe fdc9 	bl	80086ae <USBD_LL_DevDisconnected>
}
 8009b1c:	bf00      	nop
 8009b1e:	3708      	adds	r7, #8
 8009b20:	46bd      	mov	sp, r7
 8009b22:	bd80      	pop	{r7, pc}

08009b24 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b082      	sub	sp, #8
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	781b      	ldrb	r3, [r3, #0]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d13c      	bne.n	8009bae <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009b34:	4a20      	ldr	r2, [pc, #128]	; (8009bb8 <USBD_LL_Init+0x94>)
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	4a1e      	ldr	r2, [pc, #120]	; (8009bb8 <USBD_LL_Init+0x94>)
 8009b40:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009b44:	4b1c      	ldr	r3, [pc, #112]	; (8009bb8 <USBD_LL_Init+0x94>)
 8009b46:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009b4a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009b4c:	4b1a      	ldr	r3, [pc, #104]	; (8009bb8 <USBD_LL_Init+0x94>)
 8009b4e:	2204      	movs	r2, #4
 8009b50:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009b52:	4b19      	ldr	r3, [pc, #100]	; (8009bb8 <USBD_LL_Init+0x94>)
 8009b54:	2202      	movs	r2, #2
 8009b56:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009b58:	4b17      	ldr	r3, [pc, #92]	; (8009bb8 <USBD_LL_Init+0x94>)
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009b5e:	4b16      	ldr	r3, [pc, #88]	; (8009bb8 <USBD_LL_Init+0x94>)
 8009b60:	2202      	movs	r2, #2
 8009b62:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009b64:	4b14      	ldr	r3, [pc, #80]	; (8009bb8 <USBD_LL_Init+0x94>)
 8009b66:	2200      	movs	r2, #0
 8009b68:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009b6a:	4b13      	ldr	r3, [pc, #76]	; (8009bb8 <USBD_LL_Init+0x94>)
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009b70:	4b11      	ldr	r3, [pc, #68]	; (8009bb8 <USBD_LL_Init+0x94>)
 8009b72:	2200      	movs	r2, #0
 8009b74:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009b76:	4b10      	ldr	r3, [pc, #64]	; (8009bb8 <USBD_LL_Init+0x94>)
 8009b78:	2200      	movs	r2, #0
 8009b7a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009b7c:	4b0e      	ldr	r3, [pc, #56]	; (8009bb8 <USBD_LL_Init+0x94>)
 8009b7e:	2200      	movs	r2, #0
 8009b80:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009b82:	480d      	ldr	r0, [pc, #52]	; (8009bb8 <USBD_LL_Init+0x94>)
 8009b84:	f7f9 fcb7 	bl	80034f6 <HAL_PCD_Init>
 8009b88:	4603      	mov	r3, r0
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d001      	beq.n	8009b92 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009b8e:	f7f7 facd 	bl	800112c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009b92:	2180      	movs	r1, #128	; 0x80
 8009b94:	4808      	ldr	r0, [pc, #32]	; (8009bb8 <USBD_LL_Init+0x94>)
 8009b96:	f7fa fe14 	bl	80047c2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009b9a:	2240      	movs	r2, #64	; 0x40
 8009b9c:	2100      	movs	r1, #0
 8009b9e:	4806      	ldr	r0, [pc, #24]	; (8009bb8 <USBD_LL_Init+0x94>)
 8009ba0:	f7fa fdc8 	bl	8004734 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009ba4:	2280      	movs	r2, #128	; 0x80
 8009ba6:	2101      	movs	r1, #1
 8009ba8:	4803      	ldr	r0, [pc, #12]	; (8009bb8 <USBD_LL_Init+0x94>)
 8009baa:	f7fa fdc3 	bl	8004734 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009bae:	2300      	movs	r3, #0
}
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	3708      	adds	r7, #8
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	bd80      	pop	{r7, pc}
 8009bb8:	200010dc 	.word	0x200010dc

08009bbc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b084      	sub	sp, #16
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009bc8:	2300      	movs	r3, #0
 8009bca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	f7f9 fdac 	bl	8003730 <HAL_PCD_Start>
 8009bd8:	4603      	mov	r3, r0
 8009bda:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009bdc:	7bfb      	ldrb	r3, [r7, #15]
 8009bde:	4618      	mov	r0, r3
 8009be0:	f000 f92a 	bl	8009e38 <USBD_Get_USB_Status>
 8009be4:	4603      	mov	r3, r0
 8009be6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009be8:	7bbb      	ldrb	r3, [r7, #14]
}
 8009bea:	4618      	mov	r0, r3
 8009bec:	3710      	adds	r7, #16
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	bd80      	pop	{r7, pc}

08009bf2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009bf2:	b580      	push	{r7, lr}
 8009bf4:	b084      	sub	sp, #16
 8009bf6:	af00      	add	r7, sp, #0
 8009bf8:	6078      	str	r0, [r7, #4]
 8009bfa:	4608      	mov	r0, r1
 8009bfc:	4611      	mov	r1, r2
 8009bfe:	461a      	mov	r2, r3
 8009c00:	4603      	mov	r3, r0
 8009c02:	70fb      	strb	r3, [r7, #3]
 8009c04:	460b      	mov	r3, r1
 8009c06:	70bb      	strb	r3, [r7, #2]
 8009c08:	4613      	mov	r3, r2
 8009c0a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c10:	2300      	movs	r3, #0
 8009c12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009c1a:	78bb      	ldrb	r3, [r7, #2]
 8009c1c:	883a      	ldrh	r2, [r7, #0]
 8009c1e:	78f9      	ldrb	r1, [r7, #3]
 8009c20:	f7fa f990 	bl	8003f44 <HAL_PCD_EP_Open>
 8009c24:	4603      	mov	r3, r0
 8009c26:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c28:	7bfb      	ldrb	r3, [r7, #15]
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	f000 f904 	bl	8009e38 <USBD_Get_USB_Status>
 8009c30:	4603      	mov	r3, r0
 8009c32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c34:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c36:	4618      	mov	r0, r3
 8009c38:	3710      	adds	r7, #16
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	bd80      	pop	{r7, pc}

08009c3e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c3e:	b580      	push	{r7, lr}
 8009c40:	b084      	sub	sp, #16
 8009c42:	af00      	add	r7, sp, #0
 8009c44:	6078      	str	r0, [r7, #4]
 8009c46:	460b      	mov	r3, r1
 8009c48:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c4e:	2300      	movs	r3, #0
 8009c50:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009c58:	78fa      	ldrb	r2, [r7, #3]
 8009c5a:	4611      	mov	r1, r2
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	f7fa f9d9 	bl	8004014 <HAL_PCD_EP_Close>
 8009c62:	4603      	mov	r3, r0
 8009c64:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c66:	7bfb      	ldrb	r3, [r7, #15]
 8009c68:	4618      	mov	r0, r3
 8009c6a:	f000 f8e5 	bl	8009e38 <USBD_Get_USB_Status>
 8009c6e:	4603      	mov	r3, r0
 8009c70:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c72:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c74:	4618      	mov	r0, r3
 8009c76:	3710      	adds	r7, #16
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	bd80      	pop	{r7, pc}

08009c7c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b084      	sub	sp, #16
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
 8009c84:	460b      	mov	r3, r1
 8009c86:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c88:	2300      	movs	r3, #0
 8009c8a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009c96:	78fa      	ldrb	r2, [r7, #3]
 8009c98:	4611      	mov	r1, r2
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	f7fa fab1 	bl	8004202 <HAL_PCD_EP_SetStall>
 8009ca0:	4603      	mov	r3, r0
 8009ca2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ca4:	7bfb      	ldrb	r3, [r7, #15]
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	f000 f8c6 	bl	8009e38 <USBD_Get_USB_Status>
 8009cac:	4603      	mov	r3, r0
 8009cae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009cb0:	7bbb      	ldrb	r3, [r7, #14]
}
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	3710      	adds	r7, #16
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	bd80      	pop	{r7, pc}

08009cba <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009cba:	b580      	push	{r7, lr}
 8009cbc:	b084      	sub	sp, #16
 8009cbe:	af00      	add	r7, sp, #0
 8009cc0:	6078      	str	r0, [r7, #4]
 8009cc2:	460b      	mov	r3, r1
 8009cc4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009cca:	2300      	movs	r3, #0
 8009ccc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009cd4:	78fa      	ldrb	r2, [r7, #3]
 8009cd6:	4611      	mov	r1, r2
 8009cd8:	4618      	mov	r0, r3
 8009cda:	f7fa faf6 	bl	80042ca <HAL_PCD_EP_ClrStall>
 8009cde:	4603      	mov	r3, r0
 8009ce0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ce2:	7bfb      	ldrb	r3, [r7, #15]
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	f000 f8a7 	bl	8009e38 <USBD_Get_USB_Status>
 8009cea:	4603      	mov	r3, r0
 8009cec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009cee:	7bbb      	ldrb	r3, [r7, #14]
}
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	3710      	adds	r7, #16
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	bd80      	pop	{r7, pc}

08009cf8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009cf8:	b480      	push	{r7}
 8009cfa:	b085      	sub	sp, #20
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
 8009d00:	460b      	mov	r3, r1
 8009d02:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009d0a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009d0c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	da0b      	bge.n	8009d2c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009d14:	78fb      	ldrb	r3, [r7, #3]
 8009d16:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009d1a:	68f9      	ldr	r1, [r7, #12]
 8009d1c:	4613      	mov	r3, r2
 8009d1e:	00db      	lsls	r3, r3, #3
 8009d20:	1a9b      	subs	r3, r3, r2
 8009d22:	009b      	lsls	r3, r3, #2
 8009d24:	440b      	add	r3, r1
 8009d26:	333e      	adds	r3, #62	; 0x3e
 8009d28:	781b      	ldrb	r3, [r3, #0]
 8009d2a:	e00b      	b.n	8009d44 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009d2c:	78fb      	ldrb	r3, [r7, #3]
 8009d2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009d32:	68f9      	ldr	r1, [r7, #12]
 8009d34:	4613      	mov	r3, r2
 8009d36:	00db      	lsls	r3, r3, #3
 8009d38:	1a9b      	subs	r3, r3, r2
 8009d3a:	009b      	lsls	r3, r3, #2
 8009d3c:	440b      	add	r3, r1
 8009d3e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009d42:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009d44:	4618      	mov	r0, r3
 8009d46:	3714      	adds	r7, #20
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4e:	4770      	bx	lr

08009d50 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b084      	sub	sp, #16
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	6078      	str	r0, [r7, #4]
 8009d58:	460b      	mov	r3, r1
 8009d5a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d60:	2300      	movs	r3, #0
 8009d62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009d6a:	78fa      	ldrb	r2, [r7, #3]
 8009d6c:	4611      	mov	r1, r2
 8009d6e:	4618      	mov	r0, r3
 8009d70:	f7fa f8c3 	bl	8003efa <HAL_PCD_SetAddress>
 8009d74:	4603      	mov	r3, r0
 8009d76:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d78:	7bfb      	ldrb	r3, [r7, #15]
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	f000 f85c 	bl	8009e38 <USBD_Get_USB_Status>
 8009d80:	4603      	mov	r3, r0
 8009d82:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d84:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d86:	4618      	mov	r0, r3
 8009d88:	3710      	adds	r7, #16
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	bd80      	pop	{r7, pc}

08009d8e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009d8e:	b580      	push	{r7, lr}
 8009d90:	b086      	sub	sp, #24
 8009d92:	af00      	add	r7, sp, #0
 8009d94:	60f8      	str	r0, [r7, #12]
 8009d96:	607a      	str	r2, [r7, #4]
 8009d98:	603b      	str	r3, [r7, #0]
 8009d9a:	460b      	mov	r3, r1
 8009d9c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d9e:	2300      	movs	r3, #0
 8009da0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009da2:	2300      	movs	r3, #0
 8009da4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009dac:	7af9      	ldrb	r1, [r7, #11]
 8009dae:	683b      	ldr	r3, [r7, #0]
 8009db0:	687a      	ldr	r2, [r7, #4]
 8009db2:	f7fa f9dc 	bl	800416e <HAL_PCD_EP_Transmit>
 8009db6:	4603      	mov	r3, r0
 8009db8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009dba:	7dfb      	ldrb	r3, [r7, #23]
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	f000 f83b 	bl	8009e38 <USBD_Get_USB_Status>
 8009dc2:	4603      	mov	r3, r0
 8009dc4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009dc6:	7dbb      	ldrb	r3, [r7, #22]
}
 8009dc8:	4618      	mov	r0, r3
 8009dca:	3718      	adds	r7, #24
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	bd80      	pop	{r7, pc}

08009dd0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b086      	sub	sp, #24
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	60f8      	str	r0, [r7, #12]
 8009dd8:	607a      	str	r2, [r7, #4]
 8009dda:	603b      	str	r3, [r7, #0]
 8009ddc:	460b      	mov	r3, r1
 8009dde:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009de0:	2300      	movs	r3, #0
 8009de2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009de4:	2300      	movs	r3, #0
 8009de6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009dee:	7af9      	ldrb	r1, [r7, #11]
 8009df0:	683b      	ldr	r3, [r7, #0]
 8009df2:	687a      	ldr	r2, [r7, #4]
 8009df4:	f7fa f958 	bl	80040a8 <HAL_PCD_EP_Receive>
 8009df8:	4603      	mov	r3, r0
 8009dfa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009dfc:	7dfb      	ldrb	r3, [r7, #23]
 8009dfe:	4618      	mov	r0, r3
 8009e00:	f000 f81a 	bl	8009e38 <USBD_Get_USB_Status>
 8009e04:	4603      	mov	r3, r0
 8009e06:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009e08:	7dbb      	ldrb	r3, [r7, #22]
}
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	3718      	adds	r7, #24
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	bd80      	pop	{r7, pc}

08009e12 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009e12:	b580      	push	{r7, lr}
 8009e14:	b082      	sub	sp, #8
 8009e16:	af00      	add	r7, sp, #0
 8009e18:	6078      	str	r0, [r7, #4]
 8009e1a:	460b      	mov	r3, r1
 8009e1c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009e24:	78fa      	ldrb	r2, [r7, #3]
 8009e26:	4611      	mov	r1, r2
 8009e28:	4618      	mov	r0, r3
 8009e2a:	f7fa f988 	bl	800413e <HAL_PCD_EP_GetRxCount>
 8009e2e:	4603      	mov	r3, r0
}
 8009e30:	4618      	mov	r0, r3
 8009e32:	3708      	adds	r7, #8
 8009e34:	46bd      	mov	sp, r7
 8009e36:	bd80      	pop	{r7, pc}

08009e38 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009e38:	b480      	push	{r7}
 8009e3a:	b085      	sub	sp, #20
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	4603      	mov	r3, r0
 8009e40:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e42:	2300      	movs	r3, #0
 8009e44:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009e46:	79fb      	ldrb	r3, [r7, #7]
 8009e48:	2b03      	cmp	r3, #3
 8009e4a:	d817      	bhi.n	8009e7c <USBD_Get_USB_Status+0x44>
 8009e4c:	a201      	add	r2, pc, #4	; (adr r2, 8009e54 <USBD_Get_USB_Status+0x1c>)
 8009e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e52:	bf00      	nop
 8009e54:	08009e65 	.word	0x08009e65
 8009e58:	08009e6b 	.word	0x08009e6b
 8009e5c:	08009e71 	.word	0x08009e71
 8009e60:	08009e77 	.word	0x08009e77
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009e64:	2300      	movs	r3, #0
 8009e66:	73fb      	strb	r3, [r7, #15]
    break;
 8009e68:	e00b      	b.n	8009e82 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009e6a:	2303      	movs	r3, #3
 8009e6c:	73fb      	strb	r3, [r7, #15]
    break;
 8009e6e:	e008      	b.n	8009e82 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009e70:	2301      	movs	r3, #1
 8009e72:	73fb      	strb	r3, [r7, #15]
    break;
 8009e74:	e005      	b.n	8009e82 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009e76:	2303      	movs	r3, #3
 8009e78:	73fb      	strb	r3, [r7, #15]
    break;
 8009e7a:	e002      	b.n	8009e82 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009e7c:	2303      	movs	r3, #3
 8009e7e:	73fb      	strb	r3, [r7, #15]
    break;
 8009e80:	bf00      	nop
  }
  return usb_status;
 8009e82:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e84:	4618      	mov	r0, r3
 8009e86:	3714      	adds	r7, #20
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8e:	4770      	bx	lr

08009e90 <__errno>:
 8009e90:	4b01      	ldr	r3, [pc, #4]	; (8009e98 <__errno+0x8>)
 8009e92:	6818      	ldr	r0, [r3, #0]
 8009e94:	4770      	bx	lr
 8009e96:	bf00      	nop
 8009e98:	2000034c 	.word	0x2000034c

08009e9c <__libc_init_array>:
 8009e9c:	b570      	push	{r4, r5, r6, lr}
 8009e9e:	4e0d      	ldr	r6, [pc, #52]	; (8009ed4 <__libc_init_array+0x38>)
 8009ea0:	4c0d      	ldr	r4, [pc, #52]	; (8009ed8 <__libc_init_array+0x3c>)
 8009ea2:	1ba4      	subs	r4, r4, r6
 8009ea4:	10a4      	asrs	r4, r4, #2
 8009ea6:	2500      	movs	r5, #0
 8009ea8:	42a5      	cmp	r5, r4
 8009eaa:	d109      	bne.n	8009ec0 <__libc_init_array+0x24>
 8009eac:	4e0b      	ldr	r6, [pc, #44]	; (8009edc <__libc_init_array+0x40>)
 8009eae:	4c0c      	ldr	r4, [pc, #48]	; (8009ee0 <__libc_init_array+0x44>)
 8009eb0:	f000 fe08 	bl	800aac4 <_init>
 8009eb4:	1ba4      	subs	r4, r4, r6
 8009eb6:	10a4      	asrs	r4, r4, #2
 8009eb8:	2500      	movs	r5, #0
 8009eba:	42a5      	cmp	r5, r4
 8009ebc:	d105      	bne.n	8009eca <__libc_init_array+0x2e>
 8009ebe:	bd70      	pop	{r4, r5, r6, pc}
 8009ec0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009ec4:	4798      	blx	r3
 8009ec6:	3501      	adds	r5, #1
 8009ec8:	e7ee      	b.n	8009ea8 <__libc_init_array+0xc>
 8009eca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009ece:	4798      	blx	r3
 8009ed0:	3501      	adds	r5, #1
 8009ed2:	e7f2      	b.n	8009eba <__libc_init_array+0x1e>
 8009ed4:	0800baa8 	.word	0x0800baa8
 8009ed8:	0800baa8 	.word	0x0800baa8
 8009edc:	0800baa8 	.word	0x0800baa8
 8009ee0:	0800baac 	.word	0x0800baac

08009ee4 <malloc>:
 8009ee4:	4b02      	ldr	r3, [pc, #8]	; (8009ef0 <malloc+0xc>)
 8009ee6:	4601      	mov	r1, r0
 8009ee8:	6818      	ldr	r0, [r3, #0]
 8009eea:	f000 b861 	b.w	8009fb0 <_malloc_r>
 8009eee:	bf00      	nop
 8009ef0:	2000034c 	.word	0x2000034c

08009ef4 <free>:
 8009ef4:	4b02      	ldr	r3, [pc, #8]	; (8009f00 <free+0xc>)
 8009ef6:	4601      	mov	r1, r0
 8009ef8:	6818      	ldr	r0, [r3, #0]
 8009efa:	f000 b80b 	b.w	8009f14 <_free_r>
 8009efe:	bf00      	nop
 8009f00:	2000034c 	.word	0x2000034c

08009f04 <memset>:
 8009f04:	4402      	add	r2, r0
 8009f06:	4603      	mov	r3, r0
 8009f08:	4293      	cmp	r3, r2
 8009f0a:	d100      	bne.n	8009f0e <memset+0xa>
 8009f0c:	4770      	bx	lr
 8009f0e:	f803 1b01 	strb.w	r1, [r3], #1
 8009f12:	e7f9      	b.n	8009f08 <memset+0x4>

08009f14 <_free_r>:
 8009f14:	b538      	push	{r3, r4, r5, lr}
 8009f16:	4605      	mov	r5, r0
 8009f18:	2900      	cmp	r1, #0
 8009f1a:	d045      	beq.n	8009fa8 <_free_r+0x94>
 8009f1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f20:	1f0c      	subs	r4, r1, #4
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	bfb8      	it	lt
 8009f26:	18e4      	addlt	r4, r4, r3
 8009f28:	f000 f8d8 	bl	800a0dc <__malloc_lock>
 8009f2c:	4a1f      	ldr	r2, [pc, #124]	; (8009fac <_free_r+0x98>)
 8009f2e:	6813      	ldr	r3, [r2, #0]
 8009f30:	4610      	mov	r0, r2
 8009f32:	b933      	cbnz	r3, 8009f42 <_free_r+0x2e>
 8009f34:	6063      	str	r3, [r4, #4]
 8009f36:	6014      	str	r4, [r2, #0]
 8009f38:	4628      	mov	r0, r5
 8009f3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009f3e:	f000 b8ce 	b.w	800a0de <__malloc_unlock>
 8009f42:	42a3      	cmp	r3, r4
 8009f44:	d90c      	bls.n	8009f60 <_free_r+0x4c>
 8009f46:	6821      	ldr	r1, [r4, #0]
 8009f48:	1862      	adds	r2, r4, r1
 8009f4a:	4293      	cmp	r3, r2
 8009f4c:	bf04      	itt	eq
 8009f4e:	681a      	ldreq	r2, [r3, #0]
 8009f50:	685b      	ldreq	r3, [r3, #4]
 8009f52:	6063      	str	r3, [r4, #4]
 8009f54:	bf04      	itt	eq
 8009f56:	1852      	addeq	r2, r2, r1
 8009f58:	6022      	streq	r2, [r4, #0]
 8009f5a:	6004      	str	r4, [r0, #0]
 8009f5c:	e7ec      	b.n	8009f38 <_free_r+0x24>
 8009f5e:	4613      	mov	r3, r2
 8009f60:	685a      	ldr	r2, [r3, #4]
 8009f62:	b10a      	cbz	r2, 8009f68 <_free_r+0x54>
 8009f64:	42a2      	cmp	r2, r4
 8009f66:	d9fa      	bls.n	8009f5e <_free_r+0x4a>
 8009f68:	6819      	ldr	r1, [r3, #0]
 8009f6a:	1858      	adds	r0, r3, r1
 8009f6c:	42a0      	cmp	r0, r4
 8009f6e:	d10b      	bne.n	8009f88 <_free_r+0x74>
 8009f70:	6820      	ldr	r0, [r4, #0]
 8009f72:	4401      	add	r1, r0
 8009f74:	1858      	adds	r0, r3, r1
 8009f76:	4282      	cmp	r2, r0
 8009f78:	6019      	str	r1, [r3, #0]
 8009f7a:	d1dd      	bne.n	8009f38 <_free_r+0x24>
 8009f7c:	6810      	ldr	r0, [r2, #0]
 8009f7e:	6852      	ldr	r2, [r2, #4]
 8009f80:	605a      	str	r2, [r3, #4]
 8009f82:	4401      	add	r1, r0
 8009f84:	6019      	str	r1, [r3, #0]
 8009f86:	e7d7      	b.n	8009f38 <_free_r+0x24>
 8009f88:	d902      	bls.n	8009f90 <_free_r+0x7c>
 8009f8a:	230c      	movs	r3, #12
 8009f8c:	602b      	str	r3, [r5, #0]
 8009f8e:	e7d3      	b.n	8009f38 <_free_r+0x24>
 8009f90:	6820      	ldr	r0, [r4, #0]
 8009f92:	1821      	adds	r1, r4, r0
 8009f94:	428a      	cmp	r2, r1
 8009f96:	bf04      	itt	eq
 8009f98:	6811      	ldreq	r1, [r2, #0]
 8009f9a:	6852      	ldreq	r2, [r2, #4]
 8009f9c:	6062      	str	r2, [r4, #4]
 8009f9e:	bf04      	itt	eq
 8009fa0:	1809      	addeq	r1, r1, r0
 8009fa2:	6021      	streq	r1, [r4, #0]
 8009fa4:	605c      	str	r4, [r3, #4]
 8009fa6:	e7c7      	b.n	8009f38 <_free_r+0x24>
 8009fa8:	bd38      	pop	{r3, r4, r5, pc}
 8009faa:	bf00      	nop
 8009fac:	20000990 	.word	0x20000990

08009fb0 <_malloc_r>:
 8009fb0:	b570      	push	{r4, r5, r6, lr}
 8009fb2:	1ccd      	adds	r5, r1, #3
 8009fb4:	f025 0503 	bic.w	r5, r5, #3
 8009fb8:	3508      	adds	r5, #8
 8009fba:	2d0c      	cmp	r5, #12
 8009fbc:	bf38      	it	cc
 8009fbe:	250c      	movcc	r5, #12
 8009fc0:	2d00      	cmp	r5, #0
 8009fc2:	4606      	mov	r6, r0
 8009fc4:	db01      	blt.n	8009fca <_malloc_r+0x1a>
 8009fc6:	42a9      	cmp	r1, r5
 8009fc8:	d903      	bls.n	8009fd2 <_malloc_r+0x22>
 8009fca:	230c      	movs	r3, #12
 8009fcc:	6033      	str	r3, [r6, #0]
 8009fce:	2000      	movs	r0, #0
 8009fd0:	bd70      	pop	{r4, r5, r6, pc}
 8009fd2:	f000 f883 	bl	800a0dc <__malloc_lock>
 8009fd6:	4a21      	ldr	r2, [pc, #132]	; (800a05c <_malloc_r+0xac>)
 8009fd8:	6814      	ldr	r4, [r2, #0]
 8009fda:	4621      	mov	r1, r4
 8009fdc:	b991      	cbnz	r1, 800a004 <_malloc_r+0x54>
 8009fde:	4c20      	ldr	r4, [pc, #128]	; (800a060 <_malloc_r+0xb0>)
 8009fe0:	6823      	ldr	r3, [r4, #0]
 8009fe2:	b91b      	cbnz	r3, 8009fec <_malloc_r+0x3c>
 8009fe4:	4630      	mov	r0, r6
 8009fe6:	f000 f83d 	bl	800a064 <_sbrk_r>
 8009fea:	6020      	str	r0, [r4, #0]
 8009fec:	4629      	mov	r1, r5
 8009fee:	4630      	mov	r0, r6
 8009ff0:	f000 f838 	bl	800a064 <_sbrk_r>
 8009ff4:	1c43      	adds	r3, r0, #1
 8009ff6:	d124      	bne.n	800a042 <_malloc_r+0x92>
 8009ff8:	230c      	movs	r3, #12
 8009ffa:	6033      	str	r3, [r6, #0]
 8009ffc:	4630      	mov	r0, r6
 8009ffe:	f000 f86e 	bl	800a0de <__malloc_unlock>
 800a002:	e7e4      	b.n	8009fce <_malloc_r+0x1e>
 800a004:	680b      	ldr	r3, [r1, #0]
 800a006:	1b5b      	subs	r3, r3, r5
 800a008:	d418      	bmi.n	800a03c <_malloc_r+0x8c>
 800a00a:	2b0b      	cmp	r3, #11
 800a00c:	d90f      	bls.n	800a02e <_malloc_r+0x7e>
 800a00e:	600b      	str	r3, [r1, #0]
 800a010:	50cd      	str	r5, [r1, r3]
 800a012:	18cc      	adds	r4, r1, r3
 800a014:	4630      	mov	r0, r6
 800a016:	f000 f862 	bl	800a0de <__malloc_unlock>
 800a01a:	f104 000b 	add.w	r0, r4, #11
 800a01e:	1d23      	adds	r3, r4, #4
 800a020:	f020 0007 	bic.w	r0, r0, #7
 800a024:	1ac3      	subs	r3, r0, r3
 800a026:	d0d3      	beq.n	8009fd0 <_malloc_r+0x20>
 800a028:	425a      	negs	r2, r3
 800a02a:	50e2      	str	r2, [r4, r3]
 800a02c:	e7d0      	b.n	8009fd0 <_malloc_r+0x20>
 800a02e:	428c      	cmp	r4, r1
 800a030:	684b      	ldr	r3, [r1, #4]
 800a032:	bf16      	itet	ne
 800a034:	6063      	strne	r3, [r4, #4]
 800a036:	6013      	streq	r3, [r2, #0]
 800a038:	460c      	movne	r4, r1
 800a03a:	e7eb      	b.n	800a014 <_malloc_r+0x64>
 800a03c:	460c      	mov	r4, r1
 800a03e:	6849      	ldr	r1, [r1, #4]
 800a040:	e7cc      	b.n	8009fdc <_malloc_r+0x2c>
 800a042:	1cc4      	adds	r4, r0, #3
 800a044:	f024 0403 	bic.w	r4, r4, #3
 800a048:	42a0      	cmp	r0, r4
 800a04a:	d005      	beq.n	800a058 <_malloc_r+0xa8>
 800a04c:	1a21      	subs	r1, r4, r0
 800a04e:	4630      	mov	r0, r6
 800a050:	f000 f808 	bl	800a064 <_sbrk_r>
 800a054:	3001      	adds	r0, #1
 800a056:	d0cf      	beq.n	8009ff8 <_malloc_r+0x48>
 800a058:	6025      	str	r5, [r4, #0]
 800a05a:	e7db      	b.n	800a014 <_malloc_r+0x64>
 800a05c:	20000990 	.word	0x20000990
 800a060:	20000994 	.word	0x20000994

0800a064 <_sbrk_r>:
 800a064:	b538      	push	{r3, r4, r5, lr}
 800a066:	4c06      	ldr	r4, [pc, #24]	; (800a080 <_sbrk_r+0x1c>)
 800a068:	2300      	movs	r3, #0
 800a06a:	4605      	mov	r5, r0
 800a06c:	4608      	mov	r0, r1
 800a06e:	6023      	str	r3, [r4, #0]
 800a070:	f7f7 fd66 	bl	8001b40 <_sbrk>
 800a074:	1c43      	adds	r3, r0, #1
 800a076:	d102      	bne.n	800a07e <_sbrk_r+0x1a>
 800a078:	6823      	ldr	r3, [r4, #0]
 800a07a:	b103      	cbz	r3, 800a07e <_sbrk_r+0x1a>
 800a07c:	602b      	str	r3, [r5, #0]
 800a07e:	bd38      	pop	{r3, r4, r5, pc}
 800a080:	200014e4 	.word	0x200014e4

0800a084 <siscanf>:
 800a084:	b40e      	push	{r1, r2, r3}
 800a086:	b530      	push	{r4, r5, lr}
 800a088:	b09c      	sub	sp, #112	; 0x70
 800a08a:	ac1f      	add	r4, sp, #124	; 0x7c
 800a08c:	f44f 7201 	mov.w	r2, #516	; 0x204
 800a090:	f854 5b04 	ldr.w	r5, [r4], #4
 800a094:	f8ad 2014 	strh.w	r2, [sp, #20]
 800a098:	9002      	str	r0, [sp, #8]
 800a09a:	9006      	str	r0, [sp, #24]
 800a09c:	f7f6 f8a0 	bl	80001e0 <strlen>
 800a0a0:	4b0b      	ldr	r3, [pc, #44]	; (800a0d0 <siscanf+0x4c>)
 800a0a2:	9003      	str	r0, [sp, #12]
 800a0a4:	9007      	str	r0, [sp, #28]
 800a0a6:	930b      	str	r3, [sp, #44]	; 0x2c
 800a0a8:	480a      	ldr	r0, [pc, #40]	; (800a0d4 <siscanf+0x50>)
 800a0aa:	9401      	str	r4, [sp, #4]
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	930f      	str	r3, [sp, #60]	; 0x3c
 800a0b0:	9314      	str	r3, [sp, #80]	; 0x50
 800a0b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a0b6:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a0ba:	462a      	mov	r2, r5
 800a0bc:	4623      	mov	r3, r4
 800a0be:	a902      	add	r1, sp, #8
 800a0c0:	6800      	ldr	r0, [r0, #0]
 800a0c2:	f000 f867 	bl	800a194 <__ssvfiscanf_r>
 800a0c6:	b01c      	add	sp, #112	; 0x70
 800a0c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a0cc:	b003      	add	sp, #12
 800a0ce:	4770      	bx	lr
 800a0d0:	0800a0d9 	.word	0x0800a0d9
 800a0d4:	2000034c 	.word	0x2000034c

0800a0d8 <__seofread>:
 800a0d8:	2000      	movs	r0, #0
 800a0da:	4770      	bx	lr

0800a0dc <__malloc_lock>:
 800a0dc:	4770      	bx	lr

0800a0de <__malloc_unlock>:
 800a0de:	4770      	bx	lr

0800a0e0 <_sungetc_r>:
 800a0e0:	b538      	push	{r3, r4, r5, lr}
 800a0e2:	1c4b      	adds	r3, r1, #1
 800a0e4:	4614      	mov	r4, r2
 800a0e6:	d103      	bne.n	800a0f0 <_sungetc_r+0x10>
 800a0e8:	f04f 35ff 	mov.w	r5, #4294967295
 800a0ec:	4628      	mov	r0, r5
 800a0ee:	bd38      	pop	{r3, r4, r5, pc}
 800a0f0:	8993      	ldrh	r3, [r2, #12]
 800a0f2:	f023 0320 	bic.w	r3, r3, #32
 800a0f6:	8193      	strh	r3, [r2, #12]
 800a0f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a0fa:	6852      	ldr	r2, [r2, #4]
 800a0fc:	b2cd      	uxtb	r5, r1
 800a0fe:	b18b      	cbz	r3, 800a124 <_sungetc_r+0x44>
 800a100:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a102:	4293      	cmp	r3, r2
 800a104:	dd08      	ble.n	800a118 <_sungetc_r+0x38>
 800a106:	6823      	ldr	r3, [r4, #0]
 800a108:	1e5a      	subs	r2, r3, #1
 800a10a:	6022      	str	r2, [r4, #0]
 800a10c:	f803 5c01 	strb.w	r5, [r3, #-1]
 800a110:	6863      	ldr	r3, [r4, #4]
 800a112:	3301      	adds	r3, #1
 800a114:	6063      	str	r3, [r4, #4]
 800a116:	e7e9      	b.n	800a0ec <_sungetc_r+0xc>
 800a118:	4621      	mov	r1, r4
 800a11a:	f000 fc2f 	bl	800a97c <__submore>
 800a11e:	2800      	cmp	r0, #0
 800a120:	d0f1      	beq.n	800a106 <_sungetc_r+0x26>
 800a122:	e7e1      	b.n	800a0e8 <_sungetc_r+0x8>
 800a124:	6921      	ldr	r1, [r4, #16]
 800a126:	6823      	ldr	r3, [r4, #0]
 800a128:	b151      	cbz	r1, 800a140 <_sungetc_r+0x60>
 800a12a:	4299      	cmp	r1, r3
 800a12c:	d208      	bcs.n	800a140 <_sungetc_r+0x60>
 800a12e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800a132:	42a9      	cmp	r1, r5
 800a134:	d104      	bne.n	800a140 <_sungetc_r+0x60>
 800a136:	3b01      	subs	r3, #1
 800a138:	3201      	adds	r2, #1
 800a13a:	6023      	str	r3, [r4, #0]
 800a13c:	6062      	str	r2, [r4, #4]
 800a13e:	e7d5      	b.n	800a0ec <_sungetc_r+0xc>
 800a140:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800a144:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a148:	6363      	str	r3, [r4, #52]	; 0x34
 800a14a:	2303      	movs	r3, #3
 800a14c:	63a3      	str	r3, [r4, #56]	; 0x38
 800a14e:	4623      	mov	r3, r4
 800a150:	f803 5f46 	strb.w	r5, [r3, #70]!
 800a154:	6023      	str	r3, [r4, #0]
 800a156:	2301      	movs	r3, #1
 800a158:	e7dc      	b.n	800a114 <_sungetc_r+0x34>

0800a15a <__ssrefill_r>:
 800a15a:	b510      	push	{r4, lr}
 800a15c:	460c      	mov	r4, r1
 800a15e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800a160:	b169      	cbz	r1, 800a17e <__ssrefill_r+0x24>
 800a162:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a166:	4299      	cmp	r1, r3
 800a168:	d001      	beq.n	800a16e <__ssrefill_r+0x14>
 800a16a:	f7ff fed3 	bl	8009f14 <_free_r>
 800a16e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a170:	6063      	str	r3, [r4, #4]
 800a172:	2000      	movs	r0, #0
 800a174:	6360      	str	r0, [r4, #52]	; 0x34
 800a176:	b113      	cbz	r3, 800a17e <__ssrefill_r+0x24>
 800a178:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a17a:	6023      	str	r3, [r4, #0]
 800a17c:	bd10      	pop	{r4, pc}
 800a17e:	6923      	ldr	r3, [r4, #16]
 800a180:	6023      	str	r3, [r4, #0]
 800a182:	2300      	movs	r3, #0
 800a184:	6063      	str	r3, [r4, #4]
 800a186:	89a3      	ldrh	r3, [r4, #12]
 800a188:	f043 0320 	orr.w	r3, r3, #32
 800a18c:	81a3      	strh	r3, [r4, #12]
 800a18e:	f04f 30ff 	mov.w	r0, #4294967295
 800a192:	e7f3      	b.n	800a17c <__ssrefill_r+0x22>

0800a194 <__ssvfiscanf_r>:
 800a194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a198:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800a19c:	460c      	mov	r4, r1
 800a19e:	2100      	movs	r1, #0
 800a1a0:	9144      	str	r1, [sp, #272]	; 0x110
 800a1a2:	9145      	str	r1, [sp, #276]	; 0x114
 800a1a4:	499f      	ldr	r1, [pc, #636]	; (800a424 <__ssvfiscanf_r+0x290>)
 800a1a6:	91a0      	str	r1, [sp, #640]	; 0x280
 800a1a8:	f10d 0804 	add.w	r8, sp, #4
 800a1ac:	499e      	ldr	r1, [pc, #632]	; (800a428 <__ssvfiscanf_r+0x294>)
 800a1ae:	f8df 927c 	ldr.w	r9, [pc, #636]	; 800a42c <__ssvfiscanf_r+0x298>
 800a1b2:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800a1b6:	4606      	mov	r6, r0
 800a1b8:	4692      	mov	sl, r2
 800a1ba:	91a1      	str	r1, [sp, #644]	; 0x284
 800a1bc:	9300      	str	r3, [sp, #0]
 800a1be:	270a      	movs	r7, #10
 800a1c0:	f89a 3000 	ldrb.w	r3, [sl]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	f000 812a 	beq.w	800a41e <__ssvfiscanf_r+0x28a>
 800a1ca:	4655      	mov	r5, sl
 800a1cc:	f000 fc14 	bl	800a9f8 <__locale_ctype_ptr>
 800a1d0:	f815 bb01 	ldrb.w	fp, [r5], #1
 800a1d4:	4458      	add	r0, fp
 800a1d6:	7843      	ldrb	r3, [r0, #1]
 800a1d8:	f013 0308 	ands.w	r3, r3, #8
 800a1dc:	d01c      	beq.n	800a218 <__ssvfiscanf_r+0x84>
 800a1de:	6863      	ldr	r3, [r4, #4]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	dd12      	ble.n	800a20a <__ssvfiscanf_r+0x76>
 800a1e4:	f000 fc08 	bl	800a9f8 <__locale_ctype_ptr>
 800a1e8:	6823      	ldr	r3, [r4, #0]
 800a1ea:	781a      	ldrb	r2, [r3, #0]
 800a1ec:	4410      	add	r0, r2
 800a1ee:	7842      	ldrb	r2, [r0, #1]
 800a1f0:	0712      	lsls	r2, r2, #28
 800a1f2:	d401      	bmi.n	800a1f8 <__ssvfiscanf_r+0x64>
 800a1f4:	46aa      	mov	sl, r5
 800a1f6:	e7e3      	b.n	800a1c0 <__ssvfiscanf_r+0x2c>
 800a1f8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a1fa:	3201      	adds	r2, #1
 800a1fc:	9245      	str	r2, [sp, #276]	; 0x114
 800a1fe:	6862      	ldr	r2, [r4, #4]
 800a200:	3301      	adds	r3, #1
 800a202:	3a01      	subs	r2, #1
 800a204:	6062      	str	r2, [r4, #4]
 800a206:	6023      	str	r3, [r4, #0]
 800a208:	e7e9      	b.n	800a1de <__ssvfiscanf_r+0x4a>
 800a20a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a20c:	4621      	mov	r1, r4
 800a20e:	4630      	mov	r0, r6
 800a210:	4798      	blx	r3
 800a212:	2800      	cmp	r0, #0
 800a214:	d0e6      	beq.n	800a1e4 <__ssvfiscanf_r+0x50>
 800a216:	e7ed      	b.n	800a1f4 <__ssvfiscanf_r+0x60>
 800a218:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 800a21c:	f040 8082 	bne.w	800a324 <__ssvfiscanf_r+0x190>
 800a220:	9343      	str	r3, [sp, #268]	; 0x10c
 800a222:	9341      	str	r3, [sp, #260]	; 0x104
 800a224:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800a228:	2b2a      	cmp	r3, #42	; 0x2a
 800a22a:	d103      	bne.n	800a234 <__ssvfiscanf_r+0xa0>
 800a22c:	2310      	movs	r3, #16
 800a22e:	9341      	str	r3, [sp, #260]	; 0x104
 800a230:	f10a 0502 	add.w	r5, sl, #2
 800a234:	46aa      	mov	sl, r5
 800a236:	f815 1b01 	ldrb.w	r1, [r5], #1
 800a23a:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800a23e:	2a09      	cmp	r2, #9
 800a240:	d922      	bls.n	800a288 <__ssvfiscanf_r+0xf4>
 800a242:	2203      	movs	r2, #3
 800a244:	4879      	ldr	r0, [pc, #484]	; (800a42c <__ssvfiscanf_r+0x298>)
 800a246:	f7f5 ffd3 	bl	80001f0 <memchr>
 800a24a:	b138      	cbz	r0, 800a25c <__ssvfiscanf_r+0xc8>
 800a24c:	eba0 0309 	sub.w	r3, r0, r9
 800a250:	2001      	movs	r0, #1
 800a252:	4098      	lsls	r0, r3
 800a254:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a256:	4318      	orrs	r0, r3
 800a258:	9041      	str	r0, [sp, #260]	; 0x104
 800a25a:	46aa      	mov	sl, r5
 800a25c:	f89a 3000 	ldrb.w	r3, [sl]
 800a260:	2b67      	cmp	r3, #103	; 0x67
 800a262:	f10a 0501 	add.w	r5, sl, #1
 800a266:	d82b      	bhi.n	800a2c0 <__ssvfiscanf_r+0x12c>
 800a268:	2b65      	cmp	r3, #101	; 0x65
 800a26a:	f080 809f 	bcs.w	800a3ac <__ssvfiscanf_r+0x218>
 800a26e:	2b47      	cmp	r3, #71	; 0x47
 800a270:	d810      	bhi.n	800a294 <__ssvfiscanf_r+0x100>
 800a272:	2b45      	cmp	r3, #69	; 0x45
 800a274:	f080 809a 	bcs.w	800a3ac <__ssvfiscanf_r+0x218>
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d06c      	beq.n	800a356 <__ssvfiscanf_r+0x1c2>
 800a27c:	2b25      	cmp	r3, #37	; 0x25
 800a27e:	d051      	beq.n	800a324 <__ssvfiscanf_r+0x190>
 800a280:	2303      	movs	r3, #3
 800a282:	9347      	str	r3, [sp, #284]	; 0x11c
 800a284:	9742      	str	r7, [sp, #264]	; 0x108
 800a286:	e027      	b.n	800a2d8 <__ssvfiscanf_r+0x144>
 800a288:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800a28a:	fb07 1303 	mla	r3, r7, r3, r1
 800a28e:	3b30      	subs	r3, #48	; 0x30
 800a290:	9343      	str	r3, [sp, #268]	; 0x10c
 800a292:	e7cf      	b.n	800a234 <__ssvfiscanf_r+0xa0>
 800a294:	2b5b      	cmp	r3, #91	; 0x5b
 800a296:	d06a      	beq.n	800a36e <__ssvfiscanf_r+0x1da>
 800a298:	d80c      	bhi.n	800a2b4 <__ssvfiscanf_r+0x120>
 800a29a:	2b58      	cmp	r3, #88	; 0x58
 800a29c:	d1f0      	bne.n	800a280 <__ssvfiscanf_r+0xec>
 800a29e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800a2a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a2a4:	9241      	str	r2, [sp, #260]	; 0x104
 800a2a6:	2210      	movs	r2, #16
 800a2a8:	9242      	str	r2, [sp, #264]	; 0x108
 800a2aa:	2b6e      	cmp	r3, #110	; 0x6e
 800a2ac:	bf8c      	ite	hi
 800a2ae:	2304      	movhi	r3, #4
 800a2b0:	2303      	movls	r3, #3
 800a2b2:	e010      	b.n	800a2d6 <__ssvfiscanf_r+0x142>
 800a2b4:	2b63      	cmp	r3, #99	; 0x63
 800a2b6:	d065      	beq.n	800a384 <__ssvfiscanf_r+0x1f0>
 800a2b8:	2b64      	cmp	r3, #100	; 0x64
 800a2ba:	d1e1      	bne.n	800a280 <__ssvfiscanf_r+0xec>
 800a2bc:	9742      	str	r7, [sp, #264]	; 0x108
 800a2be:	e7f4      	b.n	800a2aa <__ssvfiscanf_r+0x116>
 800a2c0:	2b70      	cmp	r3, #112	; 0x70
 800a2c2:	d04b      	beq.n	800a35c <__ssvfiscanf_r+0x1c8>
 800a2c4:	d826      	bhi.n	800a314 <__ssvfiscanf_r+0x180>
 800a2c6:	2b6e      	cmp	r3, #110	; 0x6e
 800a2c8:	d062      	beq.n	800a390 <__ssvfiscanf_r+0x1fc>
 800a2ca:	d84c      	bhi.n	800a366 <__ssvfiscanf_r+0x1d2>
 800a2cc:	2b69      	cmp	r3, #105	; 0x69
 800a2ce:	d1d7      	bne.n	800a280 <__ssvfiscanf_r+0xec>
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	9342      	str	r3, [sp, #264]	; 0x108
 800a2d4:	2303      	movs	r3, #3
 800a2d6:	9347      	str	r3, [sp, #284]	; 0x11c
 800a2d8:	6863      	ldr	r3, [r4, #4]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	dd68      	ble.n	800a3b0 <__ssvfiscanf_r+0x21c>
 800a2de:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a2e0:	0659      	lsls	r1, r3, #25
 800a2e2:	d407      	bmi.n	800a2f4 <__ssvfiscanf_r+0x160>
 800a2e4:	f000 fb88 	bl	800a9f8 <__locale_ctype_ptr>
 800a2e8:	6823      	ldr	r3, [r4, #0]
 800a2ea:	781a      	ldrb	r2, [r3, #0]
 800a2ec:	4410      	add	r0, r2
 800a2ee:	7842      	ldrb	r2, [r0, #1]
 800a2f0:	0712      	lsls	r2, r2, #28
 800a2f2:	d464      	bmi.n	800a3be <__ssvfiscanf_r+0x22a>
 800a2f4:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800a2f6:	2b02      	cmp	r3, #2
 800a2f8:	dc73      	bgt.n	800a3e2 <__ssvfiscanf_r+0x24e>
 800a2fa:	466b      	mov	r3, sp
 800a2fc:	4622      	mov	r2, r4
 800a2fe:	a941      	add	r1, sp, #260	; 0x104
 800a300:	4630      	mov	r0, r6
 800a302:	f000 f897 	bl	800a434 <_scanf_chars>
 800a306:	2801      	cmp	r0, #1
 800a308:	f000 8089 	beq.w	800a41e <__ssvfiscanf_r+0x28a>
 800a30c:	2802      	cmp	r0, #2
 800a30e:	f47f af71 	bne.w	800a1f4 <__ssvfiscanf_r+0x60>
 800a312:	e01d      	b.n	800a350 <__ssvfiscanf_r+0x1bc>
 800a314:	2b75      	cmp	r3, #117	; 0x75
 800a316:	d0d1      	beq.n	800a2bc <__ssvfiscanf_r+0x128>
 800a318:	2b78      	cmp	r3, #120	; 0x78
 800a31a:	d0c0      	beq.n	800a29e <__ssvfiscanf_r+0x10a>
 800a31c:	2b73      	cmp	r3, #115	; 0x73
 800a31e:	d1af      	bne.n	800a280 <__ssvfiscanf_r+0xec>
 800a320:	2302      	movs	r3, #2
 800a322:	e7d8      	b.n	800a2d6 <__ssvfiscanf_r+0x142>
 800a324:	6863      	ldr	r3, [r4, #4]
 800a326:	2b00      	cmp	r3, #0
 800a328:	dd0c      	ble.n	800a344 <__ssvfiscanf_r+0x1b0>
 800a32a:	6823      	ldr	r3, [r4, #0]
 800a32c:	781a      	ldrb	r2, [r3, #0]
 800a32e:	455a      	cmp	r2, fp
 800a330:	d175      	bne.n	800a41e <__ssvfiscanf_r+0x28a>
 800a332:	3301      	adds	r3, #1
 800a334:	6862      	ldr	r2, [r4, #4]
 800a336:	6023      	str	r3, [r4, #0]
 800a338:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800a33a:	3a01      	subs	r2, #1
 800a33c:	3301      	adds	r3, #1
 800a33e:	6062      	str	r2, [r4, #4]
 800a340:	9345      	str	r3, [sp, #276]	; 0x114
 800a342:	e757      	b.n	800a1f4 <__ssvfiscanf_r+0x60>
 800a344:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a346:	4621      	mov	r1, r4
 800a348:	4630      	mov	r0, r6
 800a34a:	4798      	blx	r3
 800a34c:	2800      	cmp	r0, #0
 800a34e:	d0ec      	beq.n	800a32a <__ssvfiscanf_r+0x196>
 800a350:	9844      	ldr	r0, [sp, #272]	; 0x110
 800a352:	2800      	cmp	r0, #0
 800a354:	d159      	bne.n	800a40a <__ssvfiscanf_r+0x276>
 800a356:	f04f 30ff 	mov.w	r0, #4294967295
 800a35a:	e05c      	b.n	800a416 <__ssvfiscanf_r+0x282>
 800a35c:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800a35e:	f042 0220 	orr.w	r2, r2, #32
 800a362:	9241      	str	r2, [sp, #260]	; 0x104
 800a364:	e79b      	b.n	800a29e <__ssvfiscanf_r+0x10a>
 800a366:	2308      	movs	r3, #8
 800a368:	9342      	str	r3, [sp, #264]	; 0x108
 800a36a:	2304      	movs	r3, #4
 800a36c:	e7b3      	b.n	800a2d6 <__ssvfiscanf_r+0x142>
 800a36e:	4629      	mov	r1, r5
 800a370:	4640      	mov	r0, r8
 800a372:	f000 f9b7 	bl	800a6e4 <__sccl>
 800a376:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a378:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a37c:	9341      	str	r3, [sp, #260]	; 0x104
 800a37e:	4605      	mov	r5, r0
 800a380:	2301      	movs	r3, #1
 800a382:	e7a8      	b.n	800a2d6 <__ssvfiscanf_r+0x142>
 800a384:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a386:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a38a:	9341      	str	r3, [sp, #260]	; 0x104
 800a38c:	2300      	movs	r3, #0
 800a38e:	e7a2      	b.n	800a2d6 <__ssvfiscanf_r+0x142>
 800a390:	9841      	ldr	r0, [sp, #260]	; 0x104
 800a392:	06c3      	lsls	r3, r0, #27
 800a394:	f53f af2e 	bmi.w	800a1f4 <__ssvfiscanf_r+0x60>
 800a398:	9b00      	ldr	r3, [sp, #0]
 800a39a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a39c:	1d19      	adds	r1, r3, #4
 800a39e:	9100      	str	r1, [sp, #0]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	07c0      	lsls	r0, r0, #31
 800a3a4:	bf4c      	ite	mi
 800a3a6:	801a      	strhmi	r2, [r3, #0]
 800a3a8:	601a      	strpl	r2, [r3, #0]
 800a3aa:	e723      	b.n	800a1f4 <__ssvfiscanf_r+0x60>
 800a3ac:	2305      	movs	r3, #5
 800a3ae:	e792      	b.n	800a2d6 <__ssvfiscanf_r+0x142>
 800a3b0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a3b2:	4621      	mov	r1, r4
 800a3b4:	4630      	mov	r0, r6
 800a3b6:	4798      	blx	r3
 800a3b8:	2800      	cmp	r0, #0
 800a3ba:	d090      	beq.n	800a2de <__ssvfiscanf_r+0x14a>
 800a3bc:	e7c8      	b.n	800a350 <__ssvfiscanf_r+0x1bc>
 800a3be:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a3c0:	3201      	adds	r2, #1
 800a3c2:	9245      	str	r2, [sp, #276]	; 0x114
 800a3c4:	6862      	ldr	r2, [r4, #4]
 800a3c6:	3a01      	subs	r2, #1
 800a3c8:	2a00      	cmp	r2, #0
 800a3ca:	6062      	str	r2, [r4, #4]
 800a3cc:	dd02      	ble.n	800a3d4 <__ssvfiscanf_r+0x240>
 800a3ce:	3301      	adds	r3, #1
 800a3d0:	6023      	str	r3, [r4, #0]
 800a3d2:	e787      	b.n	800a2e4 <__ssvfiscanf_r+0x150>
 800a3d4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a3d6:	4621      	mov	r1, r4
 800a3d8:	4630      	mov	r0, r6
 800a3da:	4798      	blx	r3
 800a3dc:	2800      	cmp	r0, #0
 800a3de:	d081      	beq.n	800a2e4 <__ssvfiscanf_r+0x150>
 800a3e0:	e7b6      	b.n	800a350 <__ssvfiscanf_r+0x1bc>
 800a3e2:	2b04      	cmp	r3, #4
 800a3e4:	dc06      	bgt.n	800a3f4 <__ssvfiscanf_r+0x260>
 800a3e6:	466b      	mov	r3, sp
 800a3e8:	4622      	mov	r2, r4
 800a3ea:	a941      	add	r1, sp, #260	; 0x104
 800a3ec:	4630      	mov	r0, r6
 800a3ee:	f000 f885 	bl	800a4fc <_scanf_i>
 800a3f2:	e788      	b.n	800a306 <__ssvfiscanf_r+0x172>
 800a3f4:	4b0e      	ldr	r3, [pc, #56]	; (800a430 <__ssvfiscanf_r+0x29c>)
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	f43f aefc 	beq.w	800a1f4 <__ssvfiscanf_r+0x60>
 800a3fc:	466b      	mov	r3, sp
 800a3fe:	4622      	mov	r2, r4
 800a400:	a941      	add	r1, sp, #260	; 0x104
 800a402:	4630      	mov	r0, r6
 800a404:	f3af 8000 	nop.w
 800a408:	e77d      	b.n	800a306 <__ssvfiscanf_r+0x172>
 800a40a:	89a3      	ldrh	r3, [r4, #12]
 800a40c:	f013 0f40 	tst.w	r3, #64	; 0x40
 800a410:	bf18      	it	ne
 800a412:	f04f 30ff 	movne.w	r0, #4294967295
 800a416:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800a41a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a41e:	9844      	ldr	r0, [sp, #272]	; 0x110
 800a420:	e7f9      	b.n	800a416 <__ssvfiscanf_r+0x282>
 800a422:	bf00      	nop
 800a424:	0800a0e1 	.word	0x0800a0e1
 800a428:	0800a15b 	.word	0x0800a15b
 800a42c:	0800b914 	.word	0x0800b914
 800a430:	00000000 	.word	0x00000000

0800a434 <_scanf_chars>:
 800a434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a438:	4615      	mov	r5, r2
 800a43a:	688a      	ldr	r2, [r1, #8]
 800a43c:	4680      	mov	r8, r0
 800a43e:	460c      	mov	r4, r1
 800a440:	b932      	cbnz	r2, 800a450 <_scanf_chars+0x1c>
 800a442:	698a      	ldr	r2, [r1, #24]
 800a444:	2a00      	cmp	r2, #0
 800a446:	bf14      	ite	ne
 800a448:	f04f 32ff 	movne.w	r2, #4294967295
 800a44c:	2201      	moveq	r2, #1
 800a44e:	608a      	str	r2, [r1, #8]
 800a450:	6822      	ldr	r2, [r4, #0]
 800a452:	06d1      	lsls	r1, r2, #27
 800a454:	bf5f      	itttt	pl
 800a456:	681a      	ldrpl	r2, [r3, #0]
 800a458:	1d11      	addpl	r1, r2, #4
 800a45a:	6019      	strpl	r1, [r3, #0]
 800a45c:	6817      	ldrpl	r7, [r2, #0]
 800a45e:	2600      	movs	r6, #0
 800a460:	69a3      	ldr	r3, [r4, #24]
 800a462:	b1db      	cbz	r3, 800a49c <_scanf_chars+0x68>
 800a464:	2b01      	cmp	r3, #1
 800a466:	d107      	bne.n	800a478 <_scanf_chars+0x44>
 800a468:	682b      	ldr	r3, [r5, #0]
 800a46a:	6962      	ldr	r2, [r4, #20]
 800a46c:	781b      	ldrb	r3, [r3, #0]
 800a46e:	5cd3      	ldrb	r3, [r2, r3]
 800a470:	b9a3      	cbnz	r3, 800a49c <_scanf_chars+0x68>
 800a472:	2e00      	cmp	r6, #0
 800a474:	d132      	bne.n	800a4dc <_scanf_chars+0xa8>
 800a476:	e006      	b.n	800a486 <_scanf_chars+0x52>
 800a478:	2b02      	cmp	r3, #2
 800a47a:	d007      	beq.n	800a48c <_scanf_chars+0x58>
 800a47c:	2e00      	cmp	r6, #0
 800a47e:	d12d      	bne.n	800a4dc <_scanf_chars+0xa8>
 800a480:	69a3      	ldr	r3, [r4, #24]
 800a482:	2b01      	cmp	r3, #1
 800a484:	d12a      	bne.n	800a4dc <_scanf_chars+0xa8>
 800a486:	2001      	movs	r0, #1
 800a488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a48c:	f000 fab4 	bl	800a9f8 <__locale_ctype_ptr>
 800a490:	682b      	ldr	r3, [r5, #0]
 800a492:	781b      	ldrb	r3, [r3, #0]
 800a494:	4418      	add	r0, r3
 800a496:	7843      	ldrb	r3, [r0, #1]
 800a498:	071b      	lsls	r3, r3, #28
 800a49a:	d4ef      	bmi.n	800a47c <_scanf_chars+0x48>
 800a49c:	6823      	ldr	r3, [r4, #0]
 800a49e:	06da      	lsls	r2, r3, #27
 800a4a0:	bf5e      	ittt	pl
 800a4a2:	682b      	ldrpl	r3, [r5, #0]
 800a4a4:	781b      	ldrbpl	r3, [r3, #0]
 800a4a6:	703b      	strbpl	r3, [r7, #0]
 800a4a8:	682a      	ldr	r2, [r5, #0]
 800a4aa:	686b      	ldr	r3, [r5, #4]
 800a4ac:	f102 0201 	add.w	r2, r2, #1
 800a4b0:	602a      	str	r2, [r5, #0]
 800a4b2:	68a2      	ldr	r2, [r4, #8]
 800a4b4:	f103 33ff 	add.w	r3, r3, #4294967295
 800a4b8:	f102 32ff 	add.w	r2, r2, #4294967295
 800a4bc:	606b      	str	r3, [r5, #4]
 800a4be:	f106 0601 	add.w	r6, r6, #1
 800a4c2:	bf58      	it	pl
 800a4c4:	3701      	addpl	r7, #1
 800a4c6:	60a2      	str	r2, [r4, #8]
 800a4c8:	b142      	cbz	r2, 800a4dc <_scanf_chars+0xa8>
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	dcc8      	bgt.n	800a460 <_scanf_chars+0x2c>
 800a4ce:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a4d2:	4629      	mov	r1, r5
 800a4d4:	4640      	mov	r0, r8
 800a4d6:	4798      	blx	r3
 800a4d8:	2800      	cmp	r0, #0
 800a4da:	d0c1      	beq.n	800a460 <_scanf_chars+0x2c>
 800a4dc:	6823      	ldr	r3, [r4, #0]
 800a4de:	f013 0310 	ands.w	r3, r3, #16
 800a4e2:	d105      	bne.n	800a4f0 <_scanf_chars+0xbc>
 800a4e4:	68e2      	ldr	r2, [r4, #12]
 800a4e6:	3201      	adds	r2, #1
 800a4e8:	60e2      	str	r2, [r4, #12]
 800a4ea:	69a2      	ldr	r2, [r4, #24]
 800a4ec:	b102      	cbz	r2, 800a4f0 <_scanf_chars+0xbc>
 800a4ee:	703b      	strb	r3, [r7, #0]
 800a4f0:	6923      	ldr	r3, [r4, #16]
 800a4f2:	441e      	add	r6, r3
 800a4f4:	6126      	str	r6, [r4, #16]
 800a4f6:	2000      	movs	r0, #0
 800a4f8:	e7c6      	b.n	800a488 <_scanf_chars+0x54>
	...

0800a4fc <_scanf_i>:
 800a4fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a500:	469a      	mov	sl, r3
 800a502:	4b74      	ldr	r3, [pc, #464]	; (800a6d4 <_scanf_i+0x1d8>)
 800a504:	460c      	mov	r4, r1
 800a506:	4683      	mov	fp, r0
 800a508:	4616      	mov	r6, r2
 800a50a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a50e:	b087      	sub	sp, #28
 800a510:	ab03      	add	r3, sp, #12
 800a512:	68a7      	ldr	r7, [r4, #8]
 800a514:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800a518:	4b6f      	ldr	r3, [pc, #444]	; (800a6d8 <_scanf_i+0x1dc>)
 800a51a:	69a1      	ldr	r1, [r4, #24]
 800a51c:	4a6f      	ldr	r2, [pc, #444]	; (800a6dc <_scanf_i+0x1e0>)
 800a51e:	2903      	cmp	r1, #3
 800a520:	bf08      	it	eq
 800a522:	461a      	moveq	r2, r3
 800a524:	1e7b      	subs	r3, r7, #1
 800a526:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 800a52a:	bf84      	itt	hi
 800a52c:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a530:	60a3      	strhi	r3, [r4, #8]
 800a532:	6823      	ldr	r3, [r4, #0]
 800a534:	9200      	str	r2, [sp, #0]
 800a536:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800a53a:	bf88      	it	hi
 800a53c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a540:	f104 091c 	add.w	r9, r4, #28
 800a544:	6023      	str	r3, [r4, #0]
 800a546:	bf8c      	ite	hi
 800a548:	197f      	addhi	r7, r7, r5
 800a54a:	2700      	movls	r7, #0
 800a54c:	464b      	mov	r3, r9
 800a54e:	f04f 0800 	mov.w	r8, #0
 800a552:	9301      	str	r3, [sp, #4]
 800a554:	6831      	ldr	r1, [r6, #0]
 800a556:	ab03      	add	r3, sp, #12
 800a558:	2202      	movs	r2, #2
 800a55a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800a55e:	7809      	ldrb	r1, [r1, #0]
 800a560:	f7f5 fe46 	bl	80001f0 <memchr>
 800a564:	9b01      	ldr	r3, [sp, #4]
 800a566:	b330      	cbz	r0, 800a5b6 <_scanf_i+0xba>
 800a568:	f1b8 0f01 	cmp.w	r8, #1
 800a56c:	d15a      	bne.n	800a624 <_scanf_i+0x128>
 800a56e:	6862      	ldr	r2, [r4, #4]
 800a570:	b92a      	cbnz	r2, 800a57e <_scanf_i+0x82>
 800a572:	6822      	ldr	r2, [r4, #0]
 800a574:	2108      	movs	r1, #8
 800a576:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a57a:	6061      	str	r1, [r4, #4]
 800a57c:	6022      	str	r2, [r4, #0]
 800a57e:	6822      	ldr	r2, [r4, #0]
 800a580:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800a584:	6022      	str	r2, [r4, #0]
 800a586:	68a2      	ldr	r2, [r4, #8]
 800a588:	1e51      	subs	r1, r2, #1
 800a58a:	60a1      	str	r1, [r4, #8]
 800a58c:	b19a      	cbz	r2, 800a5b6 <_scanf_i+0xba>
 800a58e:	6832      	ldr	r2, [r6, #0]
 800a590:	1c51      	adds	r1, r2, #1
 800a592:	6031      	str	r1, [r6, #0]
 800a594:	7812      	ldrb	r2, [r2, #0]
 800a596:	701a      	strb	r2, [r3, #0]
 800a598:	1c5d      	adds	r5, r3, #1
 800a59a:	6873      	ldr	r3, [r6, #4]
 800a59c:	3b01      	subs	r3, #1
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	6073      	str	r3, [r6, #4]
 800a5a2:	dc07      	bgt.n	800a5b4 <_scanf_i+0xb8>
 800a5a4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a5a8:	4631      	mov	r1, r6
 800a5aa:	4658      	mov	r0, fp
 800a5ac:	4798      	blx	r3
 800a5ae:	2800      	cmp	r0, #0
 800a5b0:	f040 8086 	bne.w	800a6c0 <_scanf_i+0x1c4>
 800a5b4:	462b      	mov	r3, r5
 800a5b6:	f108 0801 	add.w	r8, r8, #1
 800a5ba:	f1b8 0f03 	cmp.w	r8, #3
 800a5be:	d1c8      	bne.n	800a552 <_scanf_i+0x56>
 800a5c0:	6862      	ldr	r2, [r4, #4]
 800a5c2:	b90a      	cbnz	r2, 800a5c8 <_scanf_i+0xcc>
 800a5c4:	220a      	movs	r2, #10
 800a5c6:	6062      	str	r2, [r4, #4]
 800a5c8:	6862      	ldr	r2, [r4, #4]
 800a5ca:	4945      	ldr	r1, [pc, #276]	; (800a6e0 <_scanf_i+0x1e4>)
 800a5cc:	6960      	ldr	r0, [r4, #20]
 800a5ce:	9301      	str	r3, [sp, #4]
 800a5d0:	1a89      	subs	r1, r1, r2
 800a5d2:	f000 f887 	bl	800a6e4 <__sccl>
 800a5d6:	9b01      	ldr	r3, [sp, #4]
 800a5d8:	f04f 0800 	mov.w	r8, #0
 800a5dc:	461d      	mov	r5, r3
 800a5de:	68a3      	ldr	r3, [r4, #8]
 800a5e0:	6822      	ldr	r2, [r4, #0]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d03a      	beq.n	800a65c <_scanf_i+0x160>
 800a5e6:	6831      	ldr	r1, [r6, #0]
 800a5e8:	6960      	ldr	r0, [r4, #20]
 800a5ea:	f891 c000 	ldrb.w	ip, [r1]
 800a5ee:	f810 000c 	ldrb.w	r0, [r0, ip]
 800a5f2:	2800      	cmp	r0, #0
 800a5f4:	d032      	beq.n	800a65c <_scanf_i+0x160>
 800a5f6:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800a5fa:	d121      	bne.n	800a640 <_scanf_i+0x144>
 800a5fc:	0510      	lsls	r0, r2, #20
 800a5fe:	d51f      	bpl.n	800a640 <_scanf_i+0x144>
 800a600:	f108 0801 	add.w	r8, r8, #1
 800a604:	b117      	cbz	r7, 800a60c <_scanf_i+0x110>
 800a606:	3301      	adds	r3, #1
 800a608:	3f01      	subs	r7, #1
 800a60a:	60a3      	str	r3, [r4, #8]
 800a60c:	6873      	ldr	r3, [r6, #4]
 800a60e:	3b01      	subs	r3, #1
 800a610:	2b00      	cmp	r3, #0
 800a612:	6073      	str	r3, [r6, #4]
 800a614:	dd1b      	ble.n	800a64e <_scanf_i+0x152>
 800a616:	6833      	ldr	r3, [r6, #0]
 800a618:	3301      	adds	r3, #1
 800a61a:	6033      	str	r3, [r6, #0]
 800a61c:	68a3      	ldr	r3, [r4, #8]
 800a61e:	3b01      	subs	r3, #1
 800a620:	60a3      	str	r3, [r4, #8]
 800a622:	e7dc      	b.n	800a5de <_scanf_i+0xe2>
 800a624:	f1b8 0f02 	cmp.w	r8, #2
 800a628:	d1ad      	bne.n	800a586 <_scanf_i+0x8a>
 800a62a:	6822      	ldr	r2, [r4, #0]
 800a62c:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800a630:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800a634:	d1bf      	bne.n	800a5b6 <_scanf_i+0xba>
 800a636:	2110      	movs	r1, #16
 800a638:	6061      	str	r1, [r4, #4]
 800a63a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a63e:	e7a1      	b.n	800a584 <_scanf_i+0x88>
 800a640:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800a644:	6022      	str	r2, [r4, #0]
 800a646:	780b      	ldrb	r3, [r1, #0]
 800a648:	702b      	strb	r3, [r5, #0]
 800a64a:	3501      	adds	r5, #1
 800a64c:	e7de      	b.n	800a60c <_scanf_i+0x110>
 800a64e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a652:	4631      	mov	r1, r6
 800a654:	4658      	mov	r0, fp
 800a656:	4798      	blx	r3
 800a658:	2800      	cmp	r0, #0
 800a65a:	d0df      	beq.n	800a61c <_scanf_i+0x120>
 800a65c:	6823      	ldr	r3, [r4, #0]
 800a65e:	05d9      	lsls	r1, r3, #23
 800a660:	d50c      	bpl.n	800a67c <_scanf_i+0x180>
 800a662:	454d      	cmp	r5, r9
 800a664:	d908      	bls.n	800a678 <_scanf_i+0x17c>
 800a666:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800a66a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a66e:	4632      	mov	r2, r6
 800a670:	4658      	mov	r0, fp
 800a672:	4798      	blx	r3
 800a674:	1e6f      	subs	r7, r5, #1
 800a676:	463d      	mov	r5, r7
 800a678:	454d      	cmp	r5, r9
 800a67a:	d029      	beq.n	800a6d0 <_scanf_i+0x1d4>
 800a67c:	6822      	ldr	r2, [r4, #0]
 800a67e:	f012 0210 	ands.w	r2, r2, #16
 800a682:	d113      	bne.n	800a6ac <_scanf_i+0x1b0>
 800a684:	702a      	strb	r2, [r5, #0]
 800a686:	6863      	ldr	r3, [r4, #4]
 800a688:	9e00      	ldr	r6, [sp, #0]
 800a68a:	4649      	mov	r1, r9
 800a68c:	4658      	mov	r0, fp
 800a68e:	47b0      	blx	r6
 800a690:	f8da 3000 	ldr.w	r3, [sl]
 800a694:	6821      	ldr	r1, [r4, #0]
 800a696:	1d1a      	adds	r2, r3, #4
 800a698:	f8ca 2000 	str.w	r2, [sl]
 800a69c:	f011 0f20 	tst.w	r1, #32
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	d010      	beq.n	800a6c6 <_scanf_i+0x1ca>
 800a6a4:	6018      	str	r0, [r3, #0]
 800a6a6:	68e3      	ldr	r3, [r4, #12]
 800a6a8:	3301      	adds	r3, #1
 800a6aa:	60e3      	str	r3, [r4, #12]
 800a6ac:	eba5 0509 	sub.w	r5, r5, r9
 800a6b0:	44a8      	add	r8, r5
 800a6b2:	6925      	ldr	r5, [r4, #16]
 800a6b4:	4445      	add	r5, r8
 800a6b6:	6125      	str	r5, [r4, #16]
 800a6b8:	2000      	movs	r0, #0
 800a6ba:	b007      	add	sp, #28
 800a6bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6c0:	f04f 0800 	mov.w	r8, #0
 800a6c4:	e7ca      	b.n	800a65c <_scanf_i+0x160>
 800a6c6:	07ca      	lsls	r2, r1, #31
 800a6c8:	bf4c      	ite	mi
 800a6ca:	8018      	strhmi	r0, [r3, #0]
 800a6cc:	6018      	strpl	r0, [r3, #0]
 800a6ce:	e7ea      	b.n	800a6a6 <_scanf_i+0x1aa>
 800a6d0:	2001      	movs	r0, #1
 800a6d2:	e7f2      	b.n	800a6ba <_scanf_i+0x1be>
 800a6d4:	0800ab94 	.word	0x0800ab94
 800a6d8:	0800a841 	.word	0x0800a841
 800a6dc:	0800a959 	.word	0x0800a959
 800a6e0:	0800b928 	.word	0x0800b928

0800a6e4 <__sccl>:
 800a6e4:	b570      	push	{r4, r5, r6, lr}
 800a6e6:	780b      	ldrb	r3, [r1, #0]
 800a6e8:	2b5e      	cmp	r3, #94	; 0x5e
 800a6ea:	bf13      	iteet	ne
 800a6ec:	1c4a      	addne	r2, r1, #1
 800a6ee:	1c8a      	addeq	r2, r1, #2
 800a6f0:	784b      	ldrbeq	r3, [r1, #1]
 800a6f2:	2100      	movne	r1, #0
 800a6f4:	bf08      	it	eq
 800a6f6:	2101      	moveq	r1, #1
 800a6f8:	1e44      	subs	r4, r0, #1
 800a6fa:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 800a6fe:	f804 1f01 	strb.w	r1, [r4, #1]!
 800a702:	42ac      	cmp	r4, r5
 800a704:	d1fb      	bne.n	800a6fe <__sccl+0x1a>
 800a706:	b913      	cbnz	r3, 800a70e <__sccl+0x2a>
 800a708:	3a01      	subs	r2, #1
 800a70a:	4610      	mov	r0, r2
 800a70c:	bd70      	pop	{r4, r5, r6, pc}
 800a70e:	f081 0401 	eor.w	r4, r1, #1
 800a712:	54c4      	strb	r4, [r0, r3]
 800a714:	1c51      	adds	r1, r2, #1
 800a716:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 800a71a:	2d2d      	cmp	r5, #45	; 0x2d
 800a71c:	f101 36ff 	add.w	r6, r1, #4294967295
 800a720:	460a      	mov	r2, r1
 800a722:	d006      	beq.n	800a732 <__sccl+0x4e>
 800a724:	2d5d      	cmp	r5, #93	; 0x5d
 800a726:	d0f0      	beq.n	800a70a <__sccl+0x26>
 800a728:	b90d      	cbnz	r5, 800a72e <__sccl+0x4a>
 800a72a:	4632      	mov	r2, r6
 800a72c:	e7ed      	b.n	800a70a <__sccl+0x26>
 800a72e:	462b      	mov	r3, r5
 800a730:	e7ef      	b.n	800a712 <__sccl+0x2e>
 800a732:	780e      	ldrb	r6, [r1, #0]
 800a734:	2e5d      	cmp	r6, #93	; 0x5d
 800a736:	d0fa      	beq.n	800a72e <__sccl+0x4a>
 800a738:	42b3      	cmp	r3, r6
 800a73a:	dcf8      	bgt.n	800a72e <__sccl+0x4a>
 800a73c:	3301      	adds	r3, #1
 800a73e:	429e      	cmp	r6, r3
 800a740:	54c4      	strb	r4, [r0, r3]
 800a742:	dcfb      	bgt.n	800a73c <__sccl+0x58>
 800a744:	3102      	adds	r1, #2
 800a746:	e7e6      	b.n	800a716 <__sccl+0x32>

0800a748 <_strtol_l.isra.0>:
 800a748:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a74c:	4680      	mov	r8, r0
 800a74e:	4689      	mov	r9, r1
 800a750:	4692      	mov	sl, r2
 800a752:	461e      	mov	r6, r3
 800a754:	460f      	mov	r7, r1
 800a756:	463d      	mov	r5, r7
 800a758:	9808      	ldr	r0, [sp, #32]
 800a75a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a75e:	f000 f947 	bl	800a9f0 <__locale_ctype_ptr_l>
 800a762:	4420      	add	r0, r4
 800a764:	7843      	ldrb	r3, [r0, #1]
 800a766:	f013 0308 	ands.w	r3, r3, #8
 800a76a:	d132      	bne.n	800a7d2 <_strtol_l.isra.0+0x8a>
 800a76c:	2c2d      	cmp	r4, #45	; 0x2d
 800a76e:	d132      	bne.n	800a7d6 <_strtol_l.isra.0+0x8e>
 800a770:	787c      	ldrb	r4, [r7, #1]
 800a772:	1cbd      	adds	r5, r7, #2
 800a774:	2201      	movs	r2, #1
 800a776:	2e00      	cmp	r6, #0
 800a778:	d05d      	beq.n	800a836 <_strtol_l.isra.0+0xee>
 800a77a:	2e10      	cmp	r6, #16
 800a77c:	d109      	bne.n	800a792 <_strtol_l.isra.0+0x4a>
 800a77e:	2c30      	cmp	r4, #48	; 0x30
 800a780:	d107      	bne.n	800a792 <_strtol_l.isra.0+0x4a>
 800a782:	782b      	ldrb	r3, [r5, #0]
 800a784:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a788:	2b58      	cmp	r3, #88	; 0x58
 800a78a:	d14f      	bne.n	800a82c <_strtol_l.isra.0+0xe4>
 800a78c:	786c      	ldrb	r4, [r5, #1]
 800a78e:	2610      	movs	r6, #16
 800a790:	3502      	adds	r5, #2
 800a792:	2a00      	cmp	r2, #0
 800a794:	bf14      	ite	ne
 800a796:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800a79a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800a79e:	2700      	movs	r7, #0
 800a7a0:	fbb1 fcf6 	udiv	ip, r1, r6
 800a7a4:	4638      	mov	r0, r7
 800a7a6:	fb06 1e1c 	mls	lr, r6, ip, r1
 800a7aa:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800a7ae:	2b09      	cmp	r3, #9
 800a7b0:	d817      	bhi.n	800a7e2 <_strtol_l.isra.0+0x9a>
 800a7b2:	461c      	mov	r4, r3
 800a7b4:	42a6      	cmp	r6, r4
 800a7b6:	dd23      	ble.n	800a800 <_strtol_l.isra.0+0xb8>
 800a7b8:	1c7b      	adds	r3, r7, #1
 800a7ba:	d007      	beq.n	800a7cc <_strtol_l.isra.0+0x84>
 800a7bc:	4584      	cmp	ip, r0
 800a7be:	d31c      	bcc.n	800a7fa <_strtol_l.isra.0+0xb2>
 800a7c0:	d101      	bne.n	800a7c6 <_strtol_l.isra.0+0x7e>
 800a7c2:	45a6      	cmp	lr, r4
 800a7c4:	db19      	blt.n	800a7fa <_strtol_l.isra.0+0xb2>
 800a7c6:	fb00 4006 	mla	r0, r0, r6, r4
 800a7ca:	2701      	movs	r7, #1
 800a7cc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a7d0:	e7eb      	b.n	800a7aa <_strtol_l.isra.0+0x62>
 800a7d2:	462f      	mov	r7, r5
 800a7d4:	e7bf      	b.n	800a756 <_strtol_l.isra.0+0xe>
 800a7d6:	2c2b      	cmp	r4, #43	; 0x2b
 800a7d8:	bf04      	itt	eq
 800a7da:	1cbd      	addeq	r5, r7, #2
 800a7dc:	787c      	ldrbeq	r4, [r7, #1]
 800a7de:	461a      	mov	r2, r3
 800a7e0:	e7c9      	b.n	800a776 <_strtol_l.isra.0+0x2e>
 800a7e2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800a7e6:	2b19      	cmp	r3, #25
 800a7e8:	d801      	bhi.n	800a7ee <_strtol_l.isra.0+0xa6>
 800a7ea:	3c37      	subs	r4, #55	; 0x37
 800a7ec:	e7e2      	b.n	800a7b4 <_strtol_l.isra.0+0x6c>
 800a7ee:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800a7f2:	2b19      	cmp	r3, #25
 800a7f4:	d804      	bhi.n	800a800 <_strtol_l.isra.0+0xb8>
 800a7f6:	3c57      	subs	r4, #87	; 0x57
 800a7f8:	e7dc      	b.n	800a7b4 <_strtol_l.isra.0+0x6c>
 800a7fa:	f04f 37ff 	mov.w	r7, #4294967295
 800a7fe:	e7e5      	b.n	800a7cc <_strtol_l.isra.0+0x84>
 800a800:	1c7b      	adds	r3, r7, #1
 800a802:	d108      	bne.n	800a816 <_strtol_l.isra.0+0xce>
 800a804:	2322      	movs	r3, #34	; 0x22
 800a806:	f8c8 3000 	str.w	r3, [r8]
 800a80a:	4608      	mov	r0, r1
 800a80c:	f1ba 0f00 	cmp.w	sl, #0
 800a810:	d107      	bne.n	800a822 <_strtol_l.isra.0+0xda>
 800a812:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a816:	b102      	cbz	r2, 800a81a <_strtol_l.isra.0+0xd2>
 800a818:	4240      	negs	r0, r0
 800a81a:	f1ba 0f00 	cmp.w	sl, #0
 800a81e:	d0f8      	beq.n	800a812 <_strtol_l.isra.0+0xca>
 800a820:	b10f      	cbz	r7, 800a826 <_strtol_l.isra.0+0xde>
 800a822:	f105 39ff 	add.w	r9, r5, #4294967295
 800a826:	f8ca 9000 	str.w	r9, [sl]
 800a82a:	e7f2      	b.n	800a812 <_strtol_l.isra.0+0xca>
 800a82c:	2430      	movs	r4, #48	; 0x30
 800a82e:	2e00      	cmp	r6, #0
 800a830:	d1af      	bne.n	800a792 <_strtol_l.isra.0+0x4a>
 800a832:	2608      	movs	r6, #8
 800a834:	e7ad      	b.n	800a792 <_strtol_l.isra.0+0x4a>
 800a836:	2c30      	cmp	r4, #48	; 0x30
 800a838:	d0a3      	beq.n	800a782 <_strtol_l.isra.0+0x3a>
 800a83a:	260a      	movs	r6, #10
 800a83c:	e7a9      	b.n	800a792 <_strtol_l.isra.0+0x4a>
	...

0800a840 <_strtol_r>:
 800a840:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a842:	4c06      	ldr	r4, [pc, #24]	; (800a85c <_strtol_r+0x1c>)
 800a844:	4d06      	ldr	r5, [pc, #24]	; (800a860 <_strtol_r+0x20>)
 800a846:	6824      	ldr	r4, [r4, #0]
 800a848:	6a24      	ldr	r4, [r4, #32]
 800a84a:	2c00      	cmp	r4, #0
 800a84c:	bf08      	it	eq
 800a84e:	462c      	moveq	r4, r5
 800a850:	9400      	str	r4, [sp, #0]
 800a852:	f7ff ff79 	bl	800a748 <_strtol_l.isra.0>
 800a856:	b003      	add	sp, #12
 800a858:	bd30      	pop	{r4, r5, pc}
 800a85a:	bf00      	nop
 800a85c:	2000034c 	.word	0x2000034c
 800a860:	200003b0 	.word	0x200003b0

0800a864 <_strtoul_l.isra.0>:
 800a864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a868:	4680      	mov	r8, r0
 800a86a:	4689      	mov	r9, r1
 800a86c:	4692      	mov	sl, r2
 800a86e:	461e      	mov	r6, r3
 800a870:	460f      	mov	r7, r1
 800a872:	463d      	mov	r5, r7
 800a874:	9808      	ldr	r0, [sp, #32]
 800a876:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a87a:	f000 f8b9 	bl	800a9f0 <__locale_ctype_ptr_l>
 800a87e:	4420      	add	r0, r4
 800a880:	7843      	ldrb	r3, [r0, #1]
 800a882:	f013 0308 	ands.w	r3, r3, #8
 800a886:	d130      	bne.n	800a8ea <_strtoul_l.isra.0+0x86>
 800a888:	2c2d      	cmp	r4, #45	; 0x2d
 800a88a:	d130      	bne.n	800a8ee <_strtoul_l.isra.0+0x8a>
 800a88c:	787c      	ldrb	r4, [r7, #1]
 800a88e:	1cbd      	adds	r5, r7, #2
 800a890:	2101      	movs	r1, #1
 800a892:	2e00      	cmp	r6, #0
 800a894:	d05c      	beq.n	800a950 <_strtoul_l.isra.0+0xec>
 800a896:	2e10      	cmp	r6, #16
 800a898:	d109      	bne.n	800a8ae <_strtoul_l.isra.0+0x4a>
 800a89a:	2c30      	cmp	r4, #48	; 0x30
 800a89c:	d107      	bne.n	800a8ae <_strtoul_l.isra.0+0x4a>
 800a89e:	782b      	ldrb	r3, [r5, #0]
 800a8a0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a8a4:	2b58      	cmp	r3, #88	; 0x58
 800a8a6:	d14e      	bne.n	800a946 <_strtoul_l.isra.0+0xe2>
 800a8a8:	786c      	ldrb	r4, [r5, #1]
 800a8aa:	2610      	movs	r6, #16
 800a8ac:	3502      	adds	r5, #2
 800a8ae:	f04f 32ff 	mov.w	r2, #4294967295
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	fbb2 f2f6 	udiv	r2, r2, r6
 800a8b8:	fb06 fc02 	mul.w	ip, r6, r2
 800a8bc:	ea6f 0c0c 	mvn.w	ip, ip
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800a8c6:	2f09      	cmp	r7, #9
 800a8c8:	d817      	bhi.n	800a8fa <_strtoul_l.isra.0+0x96>
 800a8ca:	463c      	mov	r4, r7
 800a8cc:	42a6      	cmp	r6, r4
 800a8ce:	dd23      	ble.n	800a918 <_strtoul_l.isra.0+0xb4>
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	db1e      	blt.n	800a912 <_strtoul_l.isra.0+0xae>
 800a8d4:	4282      	cmp	r2, r0
 800a8d6:	d31c      	bcc.n	800a912 <_strtoul_l.isra.0+0xae>
 800a8d8:	d101      	bne.n	800a8de <_strtoul_l.isra.0+0x7a>
 800a8da:	45a4      	cmp	ip, r4
 800a8dc:	db19      	blt.n	800a912 <_strtoul_l.isra.0+0xae>
 800a8de:	fb00 4006 	mla	r0, r0, r6, r4
 800a8e2:	2301      	movs	r3, #1
 800a8e4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a8e8:	e7eb      	b.n	800a8c2 <_strtoul_l.isra.0+0x5e>
 800a8ea:	462f      	mov	r7, r5
 800a8ec:	e7c1      	b.n	800a872 <_strtoul_l.isra.0+0xe>
 800a8ee:	2c2b      	cmp	r4, #43	; 0x2b
 800a8f0:	bf04      	itt	eq
 800a8f2:	1cbd      	addeq	r5, r7, #2
 800a8f4:	787c      	ldrbeq	r4, [r7, #1]
 800a8f6:	4619      	mov	r1, r3
 800a8f8:	e7cb      	b.n	800a892 <_strtoul_l.isra.0+0x2e>
 800a8fa:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800a8fe:	2f19      	cmp	r7, #25
 800a900:	d801      	bhi.n	800a906 <_strtoul_l.isra.0+0xa2>
 800a902:	3c37      	subs	r4, #55	; 0x37
 800a904:	e7e2      	b.n	800a8cc <_strtoul_l.isra.0+0x68>
 800a906:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800a90a:	2f19      	cmp	r7, #25
 800a90c:	d804      	bhi.n	800a918 <_strtoul_l.isra.0+0xb4>
 800a90e:	3c57      	subs	r4, #87	; 0x57
 800a910:	e7dc      	b.n	800a8cc <_strtoul_l.isra.0+0x68>
 800a912:	f04f 33ff 	mov.w	r3, #4294967295
 800a916:	e7e5      	b.n	800a8e4 <_strtoul_l.isra.0+0x80>
 800a918:	2b00      	cmp	r3, #0
 800a91a:	da09      	bge.n	800a930 <_strtoul_l.isra.0+0xcc>
 800a91c:	2322      	movs	r3, #34	; 0x22
 800a91e:	f8c8 3000 	str.w	r3, [r8]
 800a922:	f04f 30ff 	mov.w	r0, #4294967295
 800a926:	f1ba 0f00 	cmp.w	sl, #0
 800a92a:	d107      	bne.n	800a93c <_strtoul_l.isra.0+0xd8>
 800a92c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a930:	b101      	cbz	r1, 800a934 <_strtoul_l.isra.0+0xd0>
 800a932:	4240      	negs	r0, r0
 800a934:	f1ba 0f00 	cmp.w	sl, #0
 800a938:	d0f8      	beq.n	800a92c <_strtoul_l.isra.0+0xc8>
 800a93a:	b10b      	cbz	r3, 800a940 <_strtoul_l.isra.0+0xdc>
 800a93c:	f105 39ff 	add.w	r9, r5, #4294967295
 800a940:	f8ca 9000 	str.w	r9, [sl]
 800a944:	e7f2      	b.n	800a92c <_strtoul_l.isra.0+0xc8>
 800a946:	2430      	movs	r4, #48	; 0x30
 800a948:	2e00      	cmp	r6, #0
 800a94a:	d1b0      	bne.n	800a8ae <_strtoul_l.isra.0+0x4a>
 800a94c:	2608      	movs	r6, #8
 800a94e:	e7ae      	b.n	800a8ae <_strtoul_l.isra.0+0x4a>
 800a950:	2c30      	cmp	r4, #48	; 0x30
 800a952:	d0a4      	beq.n	800a89e <_strtoul_l.isra.0+0x3a>
 800a954:	260a      	movs	r6, #10
 800a956:	e7aa      	b.n	800a8ae <_strtoul_l.isra.0+0x4a>

0800a958 <_strtoul_r>:
 800a958:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a95a:	4c06      	ldr	r4, [pc, #24]	; (800a974 <_strtoul_r+0x1c>)
 800a95c:	4d06      	ldr	r5, [pc, #24]	; (800a978 <_strtoul_r+0x20>)
 800a95e:	6824      	ldr	r4, [r4, #0]
 800a960:	6a24      	ldr	r4, [r4, #32]
 800a962:	2c00      	cmp	r4, #0
 800a964:	bf08      	it	eq
 800a966:	462c      	moveq	r4, r5
 800a968:	9400      	str	r4, [sp, #0]
 800a96a:	f7ff ff7b 	bl	800a864 <_strtoul_l.isra.0>
 800a96e:	b003      	add	sp, #12
 800a970:	bd30      	pop	{r4, r5, pc}
 800a972:	bf00      	nop
 800a974:	2000034c 	.word	0x2000034c
 800a978:	200003b0 	.word	0x200003b0

0800a97c <__submore>:
 800a97c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a980:	460c      	mov	r4, r1
 800a982:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800a984:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a988:	4299      	cmp	r1, r3
 800a98a:	d11d      	bne.n	800a9c8 <__submore+0x4c>
 800a98c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a990:	f7ff fb0e 	bl	8009fb0 <_malloc_r>
 800a994:	b918      	cbnz	r0, 800a99e <__submore+0x22>
 800a996:	f04f 30ff 	mov.w	r0, #4294967295
 800a99a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a99e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a9a2:	63a3      	str	r3, [r4, #56]	; 0x38
 800a9a4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800a9a8:	6360      	str	r0, [r4, #52]	; 0x34
 800a9aa:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800a9ae:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800a9b2:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800a9b6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a9ba:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800a9be:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800a9c2:	6020      	str	r0, [r4, #0]
 800a9c4:	2000      	movs	r0, #0
 800a9c6:	e7e8      	b.n	800a99a <__submore+0x1e>
 800a9c8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800a9ca:	0077      	lsls	r7, r6, #1
 800a9cc:	463a      	mov	r2, r7
 800a9ce:	f000 f83e 	bl	800aa4e <_realloc_r>
 800a9d2:	4605      	mov	r5, r0
 800a9d4:	2800      	cmp	r0, #0
 800a9d6:	d0de      	beq.n	800a996 <__submore+0x1a>
 800a9d8:	eb00 0806 	add.w	r8, r0, r6
 800a9dc:	4601      	mov	r1, r0
 800a9de:	4632      	mov	r2, r6
 800a9e0:	4640      	mov	r0, r8
 800a9e2:	f000 f829 	bl	800aa38 <memcpy>
 800a9e6:	f8c4 8000 	str.w	r8, [r4]
 800a9ea:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800a9ee:	e7e9      	b.n	800a9c4 <__submore+0x48>

0800a9f0 <__locale_ctype_ptr_l>:
 800a9f0:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800a9f4:	4770      	bx	lr
	...

0800a9f8 <__locale_ctype_ptr>:
 800a9f8:	4b04      	ldr	r3, [pc, #16]	; (800aa0c <__locale_ctype_ptr+0x14>)
 800a9fa:	4a05      	ldr	r2, [pc, #20]	; (800aa10 <__locale_ctype_ptr+0x18>)
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	6a1b      	ldr	r3, [r3, #32]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	bf08      	it	eq
 800aa04:	4613      	moveq	r3, r2
 800aa06:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 800aa0a:	4770      	bx	lr
 800aa0c:	2000034c 	.word	0x2000034c
 800aa10:	200003b0 	.word	0x200003b0

0800aa14 <__ascii_mbtowc>:
 800aa14:	b082      	sub	sp, #8
 800aa16:	b901      	cbnz	r1, 800aa1a <__ascii_mbtowc+0x6>
 800aa18:	a901      	add	r1, sp, #4
 800aa1a:	b142      	cbz	r2, 800aa2e <__ascii_mbtowc+0x1a>
 800aa1c:	b14b      	cbz	r3, 800aa32 <__ascii_mbtowc+0x1e>
 800aa1e:	7813      	ldrb	r3, [r2, #0]
 800aa20:	600b      	str	r3, [r1, #0]
 800aa22:	7812      	ldrb	r2, [r2, #0]
 800aa24:	1c10      	adds	r0, r2, #0
 800aa26:	bf18      	it	ne
 800aa28:	2001      	movne	r0, #1
 800aa2a:	b002      	add	sp, #8
 800aa2c:	4770      	bx	lr
 800aa2e:	4610      	mov	r0, r2
 800aa30:	e7fb      	b.n	800aa2a <__ascii_mbtowc+0x16>
 800aa32:	f06f 0001 	mvn.w	r0, #1
 800aa36:	e7f8      	b.n	800aa2a <__ascii_mbtowc+0x16>

0800aa38 <memcpy>:
 800aa38:	b510      	push	{r4, lr}
 800aa3a:	1e43      	subs	r3, r0, #1
 800aa3c:	440a      	add	r2, r1
 800aa3e:	4291      	cmp	r1, r2
 800aa40:	d100      	bne.n	800aa44 <memcpy+0xc>
 800aa42:	bd10      	pop	{r4, pc}
 800aa44:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aa48:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aa4c:	e7f7      	b.n	800aa3e <memcpy+0x6>

0800aa4e <_realloc_r>:
 800aa4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa50:	4607      	mov	r7, r0
 800aa52:	4614      	mov	r4, r2
 800aa54:	460e      	mov	r6, r1
 800aa56:	b921      	cbnz	r1, 800aa62 <_realloc_r+0x14>
 800aa58:	4611      	mov	r1, r2
 800aa5a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800aa5e:	f7ff baa7 	b.w	8009fb0 <_malloc_r>
 800aa62:	b922      	cbnz	r2, 800aa6e <_realloc_r+0x20>
 800aa64:	f7ff fa56 	bl	8009f14 <_free_r>
 800aa68:	4625      	mov	r5, r4
 800aa6a:	4628      	mov	r0, r5
 800aa6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa6e:	f000 f821 	bl	800aab4 <_malloc_usable_size_r>
 800aa72:	42a0      	cmp	r0, r4
 800aa74:	d20f      	bcs.n	800aa96 <_realloc_r+0x48>
 800aa76:	4621      	mov	r1, r4
 800aa78:	4638      	mov	r0, r7
 800aa7a:	f7ff fa99 	bl	8009fb0 <_malloc_r>
 800aa7e:	4605      	mov	r5, r0
 800aa80:	2800      	cmp	r0, #0
 800aa82:	d0f2      	beq.n	800aa6a <_realloc_r+0x1c>
 800aa84:	4631      	mov	r1, r6
 800aa86:	4622      	mov	r2, r4
 800aa88:	f7ff ffd6 	bl	800aa38 <memcpy>
 800aa8c:	4631      	mov	r1, r6
 800aa8e:	4638      	mov	r0, r7
 800aa90:	f7ff fa40 	bl	8009f14 <_free_r>
 800aa94:	e7e9      	b.n	800aa6a <_realloc_r+0x1c>
 800aa96:	4635      	mov	r5, r6
 800aa98:	e7e7      	b.n	800aa6a <_realloc_r+0x1c>

0800aa9a <__ascii_wctomb>:
 800aa9a:	b149      	cbz	r1, 800aab0 <__ascii_wctomb+0x16>
 800aa9c:	2aff      	cmp	r2, #255	; 0xff
 800aa9e:	bf85      	ittet	hi
 800aaa0:	238a      	movhi	r3, #138	; 0x8a
 800aaa2:	6003      	strhi	r3, [r0, #0]
 800aaa4:	700a      	strbls	r2, [r1, #0]
 800aaa6:	f04f 30ff 	movhi.w	r0, #4294967295
 800aaaa:	bf98      	it	ls
 800aaac:	2001      	movls	r0, #1
 800aaae:	4770      	bx	lr
 800aab0:	4608      	mov	r0, r1
 800aab2:	4770      	bx	lr

0800aab4 <_malloc_usable_size_r>:
 800aab4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aab8:	1f18      	subs	r0, r3, #4
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	bfbc      	itt	lt
 800aabe:	580b      	ldrlt	r3, [r1, r0]
 800aac0:	18c0      	addlt	r0, r0, r3
 800aac2:	4770      	bx	lr

0800aac4 <_init>:
 800aac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aac6:	bf00      	nop
 800aac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aaca:	bc08      	pop	{r3}
 800aacc:	469e      	mov	lr, r3
 800aace:	4770      	bx	lr

0800aad0 <_fini>:
 800aad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aad2:	bf00      	nop
 800aad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aad6:	bc08      	pop	{r3}
 800aad8:	469e      	mov	lr, r3
 800aada:	4770      	bx	lr
