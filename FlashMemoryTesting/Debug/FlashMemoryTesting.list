
FlashMemoryTesting.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a7c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003c04  08003c04  00013c04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c3c  08003c3c  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08003c3c  08003c3c  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003c3c  08003c3c  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c3c  08003c3c  00013c3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c40  08003c40  00013c40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08003c44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000138  20000014  08003c58  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000014c  08003c58  0002014c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b8f9  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001565  00000000  00000000  0002b93d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008f8  00000000  00000000  0002cea8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008b8  00000000  00000000  0002d7a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a43b  00000000  00000000  0002e058  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008547  00000000  00000000  00048493  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009a871  00000000  00000000  000509da  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000eb24b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002460  00000000  00000000  000eb2c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003bec 	.word	0x08003bec

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08003bec 	.word	0x08003bec

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 fe5e 	bl	8000e8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f81c 	bl	800020c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f8ca 	bl	800036c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001d8:	f000 f898 	bl	800030c <MX_USART2_UART_Init>
  MX_SPI3_Init();
 80001dc:	f000 f858 	bl	8000290 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  W25qxx_Init();
 80001e0:	f000 fb48 	bl	8000874 <W25qxx_Init>
  W25qxx_EraseChip();
 80001e4:	f000 fc18 	bl	8000a18 <W25qxx_EraseChip>
  W25qxx_WriteSector(writeBuffer, 1, 0, 8);
 80001e8:	2308      	movs	r3, #8
 80001ea:	2200      	movs	r2, #0
 80001ec:	2101      	movs	r1, #1
 80001ee:	4805      	ldr	r0, [pc, #20]	; (8000204 <main+0x3c>)
 80001f0:	f000 fcde 	bl	8000bb0 <W25qxx_WriteSector>
  W25qxx_ReadSector(readBuffer, 1, 0, 8); //
 80001f4:	2308      	movs	r3, #8
 80001f6:	2200      	movs	r2, #0
 80001f8:	2101      	movs	r1, #1
 80001fa:	4803      	ldr	r0, [pc, #12]	; (8000208 <main+0x40>)
 80001fc:	f000 fdba 	bl	8000d74 <W25qxx_ReadSector>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000200:	e7fe      	b.n	8000200 <main+0x38>
 8000202:	bf00      	nop
 8000204:	20000000 	.word	0x20000000
 8000208:	20000030 	.word	0x20000030

0800020c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	b090      	sub	sp, #64	; 0x40
 8000210:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000212:	f107 0318 	add.w	r3, r7, #24
 8000216:	2228      	movs	r2, #40	; 0x28
 8000218:	2100      	movs	r1, #0
 800021a:	4618      	mov	r0, r3
 800021c:	f003 fcde 	bl	8003bdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000220:	1d3b      	adds	r3, r7, #4
 8000222:	2200      	movs	r2, #0
 8000224:	601a      	str	r2, [r3, #0]
 8000226:	605a      	str	r2, [r3, #4]
 8000228:	609a      	str	r2, [r3, #8]
 800022a:	60da      	str	r2, [r3, #12]
 800022c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800022e:	2302      	movs	r3, #2
 8000230:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000232:	2301      	movs	r3, #1
 8000234:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000236:	2310      	movs	r3, #16
 8000238:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800023a:	2302      	movs	r3, #2
 800023c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800023e:	2300      	movs	r3, #0
 8000240:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000242:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000246:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000248:	f107 0318 	add.w	r3, r7, #24
 800024c:	4618      	mov	r0, r3
 800024e:	f001 f915 	bl	800147c <HAL_RCC_OscConfig>
 8000252:	4603      	mov	r3, r0
 8000254:	2b00      	cmp	r3, #0
 8000256:	d001      	beq.n	800025c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000258:	f000 f908 	bl	800046c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800025c:	230f      	movs	r3, #15
 800025e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000260:	2302      	movs	r3, #2
 8000262:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000264:	2300      	movs	r3, #0
 8000266:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000268:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800026c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800026e:	2300      	movs	r3, #0
 8000270:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000272:	1d3b      	adds	r3, r7, #4
 8000274:	2102      	movs	r1, #2
 8000276:	4618      	mov	r0, r3
 8000278:	f002 f808 	bl	800228c <HAL_RCC_ClockConfig>
 800027c:	4603      	mov	r3, r0
 800027e:	2b00      	cmp	r3, #0
 8000280:	d001      	beq.n	8000286 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000282:	f000 f8f3 	bl	800046c <Error_Handler>
  }
}
 8000286:	bf00      	nop
 8000288:	3740      	adds	r7, #64	; 0x40
 800028a:	46bd      	mov	sp, r7
 800028c:	bd80      	pop	{r7, pc}
	...

08000290 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000294:	4b1b      	ldr	r3, [pc, #108]	; (8000304 <MX_SPI3_Init+0x74>)
 8000296:	4a1c      	ldr	r2, [pc, #112]	; (8000308 <MX_SPI3_Init+0x78>)
 8000298:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800029a:	4b1a      	ldr	r3, [pc, #104]	; (8000304 <MX_SPI3_Init+0x74>)
 800029c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80002a0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80002a2:	4b18      	ldr	r3, [pc, #96]	; (8000304 <MX_SPI3_Init+0x74>)
 80002a4:	2200      	movs	r2, #0
 80002a6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80002a8:	4b16      	ldr	r3, [pc, #88]	; (8000304 <MX_SPI3_Init+0x74>)
 80002aa:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80002ae:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80002b0:	4b14      	ldr	r3, [pc, #80]	; (8000304 <MX_SPI3_Init+0x74>)
 80002b2:	2200      	movs	r2, #0
 80002b4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80002b6:	4b13      	ldr	r3, [pc, #76]	; (8000304 <MX_SPI3_Init+0x74>)
 80002b8:	2200      	movs	r2, #0
 80002ba:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80002bc:	4b11      	ldr	r3, [pc, #68]	; (8000304 <MX_SPI3_Init+0x74>)
 80002be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80002c2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80002c4:	4b0f      	ldr	r3, [pc, #60]	; (8000304 <MX_SPI3_Init+0x74>)
 80002c6:	2210      	movs	r2, #16
 80002c8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80002ca:	4b0e      	ldr	r3, [pc, #56]	; (8000304 <MX_SPI3_Init+0x74>)
 80002cc:	2200      	movs	r2, #0
 80002ce:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80002d0:	4b0c      	ldr	r3, [pc, #48]	; (8000304 <MX_SPI3_Init+0x74>)
 80002d2:	2200      	movs	r2, #0
 80002d4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80002d6:	4b0b      	ldr	r3, [pc, #44]	; (8000304 <MX_SPI3_Init+0x74>)
 80002d8:	2200      	movs	r2, #0
 80002da:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80002dc:	4b09      	ldr	r3, [pc, #36]	; (8000304 <MX_SPI3_Init+0x74>)
 80002de:	2207      	movs	r2, #7
 80002e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80002e2:	4b08      	ldr	r3, [pc, #32]	; (8000304 <MX_SPI3_Init+0x74>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80002e8:	4b06      	ldr	r3, [pc, #24]	; (8000304 <MX_SPI3_Init+0x74>)
 80002ea:	2208      	movs	r2, #8
 80002ec:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80002ee:	4805      	ldr	r0, [pc, #20]	; (8000304 <MX_SPI3_Init+0x74>)
 80002f0:	f002 fa02 	bl	80026f8 <HAL_SPI_Init>
 80002f4:	4603      	mov	r3, r0
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d001      	beq.n	80002fe <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80002fa:	f000 f8b7 	bl	800046c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80002fe:	bf00      	nop
 8000300:	bd80      	pop	{r7, pc}
 8000302:	bf00      	nop
 8000304:	20000038 	.word	0x20000038
 8000308:	40003c00 	.word	0x40003c00

0800030c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000310:	4b14      	ldr	r3, [pc, #80]	; (8000364 <MX_USART2_UART_Init+0x58>)
 8000312:	4a15      	ldr	r2, [pc, #84]	; (8000368 <MX_USART2_UART_Init+0x5c>)
 8000314:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000316:	4b13      	ldr	r3, [pc, #76]	; (8000364 <MX_USART2_UART_Init+0x58>)
 8000318:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 800031c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800031e:	4b11      	ldr	r3, [pc, #68]	; (8000364 <MX_USART2_UART_Init+0x58>)
 8000320:	2200      	movs	r2, #0
 8000322:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000324:	4b0f      	ldr	r3, [pc, #60]	; (8000364 <MX_USART2_UART_Init+0x58>)
 8000326:	2200      	movs	r2, #0
 8000328:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800032a:	4b0e      	ldr	r3, [pc, #56]	; (8000364 <MX_USART2_UART_Init+0x58>)
 800032c:	2200      	movs	r2, #0
 800032e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000330:	4b0c      	ldr	r3, [pc, #48]	; (8000364 <MX_USART2_UART_Init+0x58>)
 8000332:	220c      	movs	r2, #12
 8000334:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000336:	4b0b      	ldr	r3, [pc, #44]	; (8000364 <MX_USART2_UART_Init+0x58>)
 8000338:	2200      	movs	r2, #0
 800033a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800033c:	4b09      	ldr	r3, [pc, #36]	; (8000364 <MX_USART2_UART_Init+0x58>)
 800033e:	2200      	movs	r2, #0
 8000340:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000342:	4b08      	ldr	r3, [pc, #32]	; (8000364 <MX_USART2_UART_Init+0x58>)
 8000344:	2200      	movs	r2, #0
 8000346:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000348:	4b06      	ldr	r3, [pc, #24]	; (8000364 <MX_USART2_UART_Init+0x58>)
 800034a:	2200      	movs	r2, #0
 800034c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800034e:	4805      	ldr	r0, [pc, #20]	; (8000364 <MX_USART2_UART_Init+0x58>)
 8000350:	f003 f8ea 	bl	8003528 <HAL_UART_Init>
 8000354:	4603      	mov	r3, r0
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800035a:	f000 f887 	bl	800046c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800035e:	bf00      	nop
 8000360:	bd80      	pop	{r7, pc}
 8000362:	bf00      	nop
 8000364:	2000009c 	.word	0x2000009c
 8000368:	40004400 	.word	0x40004400

0800036c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b08a      	sub	sp, #40	; 0x28
 8000370:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000372:	f107 0314 	add.w	r3, r7, #20
 8000376:	2200      	movs	r2, #0
 8000378:	601a      	str	r2, [r3, #0]
 800037a:	605a      	str	r2, [r3, #4]
 800037c:	609a      	str	r2, [r3, #8]
 800037e:	60da      	str	r2, [r3, #12]
 8000380:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000382:	4b37      	ldr	r3, [pc, #220]	; (8000460 <MX_GPIO_Init+0xf4>)
 8000384:	695b      	ldr	r3, [r3, #20]
 8000386:	4a36      	ldr	r2, [pc, #216]	; (8000460 <MX_GPIO_Init+0xf4>)
 8000388:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800038c:	6153      	str	r3, [r2, #20]
 800038e:	4b34      	ldr	r3, [pc, #208]	; (8000460 <MX_GPIO_Init+0xf4>)
 8000390:	695b      	ldr	r3, [r3, #20]
 8000392:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000396:	613b      	str	r3, [r7, #16]
 8000398:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800039a:	4b31      	ldr	r3, [pc, #196]	; (8000460 <MX_GPIO_Init+0xf4>)
 800039c:	695b      	ldr	r3, [r3, #20]
 800039e:	4a30      	ldr	r2, [pc, #192]	; (8000460 <MX_GPIO_Init+0xf4>)
 80003a0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80003a4:	6153      	str	r3, [r2, #20]
 80003a6:	4b2e      	ldr	r3, [pc, #184]	; (8000460 <MX_GPIO_Init+0xf4>)
 80003a8:	695b      	ldr	r3, [r3, #20]
 80003aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80003ae:	60fb      	str	r3, [r7, #12]
 80003b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003b2:	4b2b      	ldr	r3, [pc, #172]	; (8000460 <MX_GPIO_Init+0xf4>)
 80003b4:	695b      	ldr	r3, [r3, #20]
 80003b6:	4a2a      	ldr	r2, [pc, #168]	; (8000460 <MX_GPIO_Init+0xf4>)
 80003b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003bc:	6153      	str	r3, [r2, #20]
 80003be:	4b28      	ldr	r3, [pc, #160]	; (8000460 <MX_GPIO_Init+0xf4>)
 80003c0:	695b      	ldr	r3, [r3, #20]
 80003c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003c6:	60bb      	str	r3, [r7, #8]
 80003c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003ca:	4b25      	ldr	r3, [pc, #148]	; (8000460 <MX_GPIO_Init+0xf4>)
 80003cc:	695b      	ldr	r3, [r3, #20]
 80003ce:	4a24      	ldr	r2, [pc, #144]	; (8000460 <MX_GPIO_Init+0xf4>)
 80003d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80003d4:	6153      	str	r3, [r2, #20]
 80003d6:	4b22      	ldr	r3, [pc, #136]	; (8000460 <MX_GPIO_Init+0xf4>)
 80003d8:	695b      	ldr	r3, [r3, #20]
 80003da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80003de:	607b      	str	r3, [r7, #4]
 80003e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80003e2:	2200      	movs	r2, #0
 80003e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003e8:	481e      	ldr	r0, [pc, #120]	; (8000464 <MX_GPIO_Init+0xf8>)
 80003ea:	f001 f82f 	bl	800144c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 80003ee:	2200      	movs	r2, #0
 80003f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003f8:	f001 f828 	bl	800144c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80003fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000400:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000402:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000406:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000408:	2300      	movs	r3, #0
 800040a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800040c:	f107 0314 	add.w	r3, r7, #20
 8000410:	4619      	mov	r1, r3
 8000412:	4815      	ldr	r0, [pc, #84]	; (8000468 <MX_GPIO_Init+0xfc>)
 8000414:	f000 fea8 	bl	8001168 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000418:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800041c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800041e:	2301      	movs	r3, #1
 8000420:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000422:	2300      	movs	r3, #0
 8000424:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000426:	2300      	movs	r3, #0
 8000428:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800042a:	f107 0314 	add.w	r3, r7, #20
 800042e:	4619      	mov	r1, r3
 8000430:	480c      	ldr	r0, [pc, #48]	; (8000464 <MX_GPIO_Init+0xf8>)
 8000432:	f000 fe99 	bl	8001168 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 8000436:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800043a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800043c:	2301      	movs	r3, #1
 800043e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000440:	2300      	movs	r3, #0
 8000442:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000444:	2300      	movs	r3, #0
 8000446:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8000448:	f107 0314 	add.w	r3, r7, #20
 800044c:	4619      	mov	r1, r3
 800044e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000452:	f000 fe89 	bl	8001168 <HAL_GPIO_Init>

}
 8000456:	bf00      	nop
 8000458:	3728      	adds	r7, #40	; 0x28
 800045a:	46bd      	mov	sp, r7
 800045c:	bd80      	pop	{r7, pc}
 800045e:	bf00      	nop
 8000460:	40021000 	.word	0x40021000
 8000464:	48000400 	.word	0x48000400
 8000468:	48000800 	.word	0x48000800

0800046c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800046c:	b480      	push	{r7}
 800046e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000470:	bf00      	nop
 8000472:	46bd      	mov	sp, r7
 8000474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000478:	4770      	bx	lr
	...

0800047c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b082      	sub	sp, #8
 8000480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000482:	4b0f      	ldr	r3, [pc, #60]	; (80004c0 <HAL_MspInit+0x44>)
 8000484:	699b      	ldr	r3, [r3, #24]
 8000486:	4a0e      	ldr	r2, [pc, #56]	; (80004c0 <HAL_MspInit+0x44>)
 8000488:	f043 0301 	orr.w	r3, r3, #1
 800048c:	6193      	str	r3, [r2, #24]
 800048e:	4b0c      	ldr	r3, [pc, #48]	; (80004c0 <HAL_MspInit+0x44>)
 8000490:	699b      	ldr	r3, [r3, #24]
 8000492:	f003 0301 	and.w	r3, r3, #1
 8000496:	607b      	str	r3, [r7, #4]
 8000498:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800049a:	4b09      	ldr	r3, [pc, #36]	; (80004c0 <HAL_MspInit+0x44>)
 800049c:	69db      	ldr	r3, [r3, #28]
 800049e:	4a08      	ldr	r2, [pc, #32]	; (80004c0 <HAL_MspInit+0x44>)
 80004a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004a4:	61d3      	str	r3, [r2, #28]
 80004a6:	4b06      	ldr	r3, [pc, #24]	; (80004c0 <HAL_MspInit+0x44>)
 80004a8:	69db      	ldr	r3, [r3, #28]
 80004aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004ae:	603b      	str	r3, [r7, #0]
 80004b0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80004b2:	2007      	movs	r0, #7
 80004b4:	f000 fe24 	bl	8001100 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004b8:	bf00      	nop
 80004ba:	3708      	adds	r7, #8
 80004bc:	46bd      	mov	sp, r7
 80004be:	bd80      	pop	{r7, pc}
 80004c0:	40021000 	.word	0x40021000

080004c4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b08a      	sub	sp, #40	; 0x28
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004cc:	f107 0314 	add.w	r3, r7, #20
 80004d0:	2200      	movs	r2, #0
 80004d2:	601a      	str	r2, [r3, #0]
 80004d4:	605a      	str	r2, [r3, #4]
 80004d6:	609a      	str	r2, [r3, #8]
 80004d8:	60da      	str	r2, [r3, #12]
 80004da:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	4a17      	ldr	r2, [pc, #92]	; (8000540 <HAL_SPI_MspInit+0x7c>)
 80004e2:	4293      	cmp	r3, r2
 80004e4:	d128      	bne.n	8000538 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80004e6:	4b17      	ldr	r3, [pc, #92]	; (8000544 <HAL_SPI_MspInit+0x80>)
 80004e8:	69db      	ldr	r3, [r3, #28]
 80004ea:	4a16      	ldr	r2, [pc, #88]	; (8000544 <HAL_SPI_MspInit+0x80>)
 80004ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80004f0:	61d3      	str	r3, [r2, #28]
 80004f2:	4b14      	ldr	r3, [pc, #80]	; (8000544 <HAL_SPI_MspInit+0x80>)
 80004f4:	69db      	ldr	r3, [r3, #28]
 80004f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80004fa:	613b      	str	r3, [r7, #16]
 80004fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80004fe:	4b11      	ldr	r3, [pc, #68]	; (8000544 <HAL_SPI_MspInit+0x80>)
 8000500:	695b      	ldr	r3, [r3, #20]
 8000502:	4a10      	ldr	r2, [pc, #64]	; (8000544 <HAL_SPI_MspInit+0x80>)
 8000504:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000508:	6153      	str	r3, [r2, #20]
 800050a:	4b0e      	ldr	r3, [pc, #56]	; (8000544 <HAL_SPI_MspInit+0x80>)
 800050c:	695b      	ldr	r3, [r3, #20]
 800050e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000512:	60fb      	str	r3, [r7, #12]
 8000514:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000516:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800051a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800051c:	2302      	movs	r3, #2
 800051e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000520:	2300      	movs	r3, #0
 8000522:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000524:	2303      	movs	r3, #3
 8000526:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000528:	2306      	movs	r3, #6
 800052a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800052c:	f107 0314 	add.w	r3, r7, #20
 8000530:	4619      	mov	r1, r3
 8000532:	4805      	ldr	r0, [pc, #20]	; (8000548 <HAL_SPI_MspInit+0x84>)
 8000534:	f000 fe18 	bl	8001168 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000538:	bf00      	nop
 800053a:	3728      	adds	r7, #40	; 0x28
 800053c:	46bd      	mov	sp, r7
 800053e:	bd80      	pop	{r7, pc}
 8000540:	40003c00 	.word	0x40003c00
 8000544:	40021000 	.word	0x40021000
 8000548:	48000800 	.word	0x48000800

0800054c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b08a      	sub	sp, #40	; 0x28
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000554:	f107 0314 	add.w	r3, r7, #20
 8000558:	2200      	movs	r2, #0
 800055a:	601a      	str	r2, [r3, #0]
 800055c:	605a      	str	r2, [r3, #4]
 800055e:	609a      	str	r2, [r3, #8]
 8000560:	60da      	str	r2, [r3, #12]
 8000562:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	4a17      	ldr	r2, [pc, #92]	; (80005c8 <HAL_UART_MspInit+0x7c>)
 800056a:	4293      	cmp	r3, r2
 800056c:	d128      	bne.n	80005c0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800056e:	4b17      	ldr	r3, [pc, #92]	; (80005cc <HAL_UART_MspInit+0x80>)
 8000570:	69db      	ldr	r3, [r3, #28]
 8000572:	4a16      	ldr	r2, [pc, #88]	; (80005cc <HAL_UART_MspInit+0x80>)
 8000574:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000578:	61d3      	str	r3, [r2, #28]
 800057a:	4b14      	ldr	r3, [pc, #80]	; (80005cc <HAL_UART_MspInit+0x80>)
 800057c:	69db      	ldr	r3, [r3, #28]
 800057e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000582:	613b      	str	r3, [r7, #16]
 8000584:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000586:	4b11      	ldr	r3, [pc, #68]	; (80005cc <HAL_UART_MspInit+0x80>)
 8000588:	695b      	ldr	r3, [r3, #20]
 800058a:	4a10      	ldr	r2, [pc, #64]	; (80005cc <HAL_UART_MspInit+0x80>)
 800058c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000590:	6153      	str	r3, [r2, #20]
 8000592:	4b0e      	ldr	r3, [pc, #56]	; (80005cc <HAL_UART_MspInit+0x80>)
 8000594:	695b      	ldr	r3, [r3, #20]
 8000596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800059a:	60fb      	str	r3, [r7, #12]
 800059c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800059e:	230c      	movs	r3, #12
 80005a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005a2:	2302      	movs	r3, #2
 80005a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a6:	2300      	movs	r3, #0
 80005a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005aa:	2300      	movs	r3, #0
 80005ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80005ae:	2307      	movs	r3, #7
 80005b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005b2:	f107 0314 	add.w	r3, r7, #20
 80005b6:	4619      	mov	r1, r3
 80005b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005bc:	f000 fdd4 	bl	8001168 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80005c0:	bf00      	nop
 80005c2:	3728      	adds	r7, #40	; 0x28
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	40004400 	.word	0x40004400
 80005cc:	40021000 	.word	0x40021000

080005d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80005d4:	bf00      	nop
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr

080005de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005de:	b480      	push	{r7}
 80005e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005e2:	e7fe      	b.n	80005e2 <HardFault_Handler+0x4>

080005e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005e8:	e7fe      	b.n	80005e8 <MemManage_Handler+0x4>

080005ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005ea:	b480      	push	{r7}
 80005ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005ee:	e7fe      	b.n	80005ee <BusFault_Handler+0x4>

080005f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005f4:	e7fe      	b.n	80005f4 <UsageFault_Handler+0x4>

080005f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005f6:	b480      	push	{r7}
 80005f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005fa:	bf00      	nop
 80005fc:	46bd      	mov	sp, r7
 80005fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000602:	4770      	bx	lr

08000604 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000608:	bf00      	nop
 800060a:	46bd      	mov	sp, r7
 800060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000610:	4770      	bx	lr

08000612 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000612:	b480      	push	{r7}
 8000614:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000616:	bf00      	nop
 8000618:	46bd      	mov	sp, r7
 800061a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061e:	4770      	bx	lr

08000620 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000624:	f000 fc78 	bl	8000f18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000628:	bf00      	nop
 800062a:	bd80      	pop	{r7, pc}

0800062c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000630:	4b06      	ldr	r3, [pc, #24]	; (800064c <SystemInit+0x20>)
 8000632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000636:	4a05      	ldr	r2, [pc, #20]	; (800064c <SystemInit+0x20>)
 8000638:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800063c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000640:	bf00      	nop
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	e000ed00 	.word	0xe000ed00

08000650 <W25qxx_Spi>:
#else
#define W25qxx_Delay(delay) HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t W25qxx_Spi(uint8_t Data)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b086      	sub	sp, #24
 8000654:	af02      	add	r7, sp, #8
 8000656:	4603      	mov	r3, r0
 8000658:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI, &Data, &ret, 1, 100);
 800065a:	f107 020f 	add.w	r2, r7, #15
 800065e:	1df9      	adds	r1, r7, #7
 8000660:	2364      	movs	r3, #100	; 0x64
 8000662:	9300      	str	r3, [sp, #0]
 8000664:	2301      	movs	r3, #1
 8000666:	4804      	ldr	r0, [pc, #16]	; (8000678 <W25qxx_Spi+0x28>)
 8000668:	f002 fb8f 	bl	8002d8a <HAL_SPI_TransmitReceive>
	return ret;
 800066c:	7bfb      	ldrb	r3, [r7, #15]
}
 800066e:	4618      	mov	r0, r3
 8000670:	3710      	adds	r7, #16
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	20000038 	.word	0x20000038

0800067c <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b084      	sub	sp, #16
 8000680:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 8000682:	2300      	movs	r3, #0
 8000684:	60fb      	str	r3, [r7, #12]
 8000686:	2300      	movs	r3, #0
 8000688:	60bb      	str	r3, [r7, #8]
 800068a:	2300      	movs	r3, #0
 800068c:	607b      	str	r3, [r7, #4]
 800068e:	2300      	movs	r3, #0
 8000690:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8000692:	2200      	movs	r2, #0
 8000694:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000698:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800069c:	f000 fed6 	bl	800144c <HAL_GPIO_WritePin>
	W25qxx_Spi(0x9F);
 80006a0:	209f      	movs	r0, #159	; 0x9f
 80006a2:	f7ff ffd5 	bl	8000650 <W25qxx_Spi>
	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80006a6:	20a5      	movs	r0, #165	; 0xa5
 80006a8:	f7ff ffd2 	bl	8000650 <W25qxx_Spi>
 80006ac:	4603      	mov	r3, r0
 80006ae:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80006b0:	20a5      	movs	r0, #165	; 0xa5
 80006b2:	f7ff ffcd 	bl	8000650 <W25qxx_Spi>
 80006b6:	4603      	mov	r3, r0
 80006b8:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80006ba:	20a5      	movs	r0, #165	; 0xa5
 80006bc:	f7ff ffc8 	bl	8000650 <W25qxx_Spi>
 80006c0:	4603      	mov	r3, r0
 80006c2:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80006c4:	2201      	movs	r2, #1
 80006c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006ce:	f000 febd 	bl	800144c <HAL_GPIO_WritePin>
	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 80006d2:	68bb      	ldr	r3, [r7, #8]
 80006d4:	041a      	lsls	r2, r3, #16
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	021b      	lsls	r3, r3, #8
 80006da:	4313      	orrs	r3, r2
 80006dc:	683a      	ldr	r2, [r7, #0]
 80006de:	4313      	orrs	r3, r2
 80006e0:	60fb      	str	r3, [r7, #12]
	return Temp;
 80006e2:	68fb      	ldr	r3, [r7, #12]
}
 80006e4:	4618      	mov	r0, r3
 80006e6:	3710      	adds	r7, #16
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}

080006ec <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 80006ec:	b590      	push	{r4, r7, lr}
 80006ee:	b083      	sub	sp, #12
 80006f0:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80006f2:	2200      	movs	r2, #0
 80006f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006fc:	f000 fea6 	bl	800144c <HAL_GPIO_WritePin>
	W25qxx_Spi(0x4B);
 8000700:	204b      	movs	r0, #75	; 0x4b
 8000702:	f7ff ffa5 	bl	8000650 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8000706:	2300      	movs	r3, #0
 8000708:	71fb      	strb	r3, [r7, #7]
 800070a:	e005      	b.n	8000718 <W25qxx_ReadUniqID+0x2c>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800070c:	20a5      	movs	r0, #165	; 0xa5
 800070e:	f7ff ff9f 	bl	8000650 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8000712:	79fb      	ldrb	r3, [r7, #7]
 8000714:	3301      	adds	r3, #1
 8000716:	71fb      	strb	r3, [r7, #7]
 8000718:	79fb      	ldrb	r3, [r7, #7]
 800071a:	2b03      	cmp	r3, #3
 800071c:	d9f6      	bls.n	800070c <W25qxx_ReadUniqID+0x20>
	for (uint8_t i = 0; i < 8; i++)
 800071e:	2300      	movs	r3, #0
 8000720:	71bb      	strb	r3, [r7, #6]
 8000722:	e00b      	b.n	800073c <W25qxx_ReadUniqID+0x50>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8000724:	79bc      	ldrb	r4, [r7, #6]
 8000726:	20a5      	movs	r0, #165	; 0xa5
 8000728:	f7ff ff92 	bl	8000650 <W25qxx_Spi>
 800072c:	4603      	mov	r3, r0
 800072e:	461a      	mov	r2, r3
 8000730:	4b09      	ldr	r3, [pc, #36]	; (8000758 <W25qxx_ReadUniqID+0x6c>)
 8000732:	4423      	add	r3, r4
 8000734:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < 8; i++)
 8000736:	79bb      	ldrb	r3, [r7, #6]
 8000738:	3301      	adds	r3, #1
 800073a:	71bb      	strb	r3, [r7, #6]
 800073c:	79bb      	ldrb	r3, [r7, #6]
 800073e:	2b07      	cmp	r3, #7
 8000740:	d9f0      	bls.n	8000724 <W25qxx_ReadUniqID+0x38>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8000742:	2201      	movs	r2, #1
 8000744:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000748:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800074c:	f000 fe7e 	bl	800144c <HAL_GPIO_WritePin>
}
 8000750:	bf00      	nop
 8000752:	370c      	adds	r7, #12
 8000754:	46bd      	mov	sp, r7
 8000756:	bd90      	pop	{r4, r7, pc}
 8000758:	20000120 	.word	0x20000120

0800075c <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8000760:	2200      	movs	r2, #0
 8000762:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000766:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800076a:	f000 fe6f 	bl	800144c <HAL_GPIO_WritePin>
	W25qxx_Spi(0x06);
 800076e:	2006      	movs	r0, #6
 8000770:	f7ff ff6e 	bl	8000650 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8000774:	2201      	movs	r2, #1
 8000776:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800077a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800077e:	f000 fe65 	bl	800144c <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 8000782:	2001      	movs	r0, #1
 8000784:	f000 fbe8 	bl	8000f58 <HAL_Delay>
}
 8000788:	bf00      	nop
 800078a:	bd80      	pop	{r7, pc}

0800078c <W25qxx_ReadStatusRegister>:
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusRegister_1_2_3)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b084      	sub	sp, #16
 8000790:	af00      	add	r7, sp, #0
 8000792:	4603      	mov	r3, r0
 8000794:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 8000796:	2300      	movs	r3, #0
 8000798:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800079a:	2200      	movs	r2, #0
 800079c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007a4:	f000 fe52 	bl	800144c <HAL_GPIO_WritePin>
	if (SelectStatusRegister_1_2_3 == 1)
 80007a8:	79fb      	ldrb	r3, [r7, #7]
 80007aa:	2b01      	cmp	r3, #1
 80007ac:	d10c      	bne.n	80007c8 <W25qxx_ReadStatusRegister+0x3c>
	{
		W25qxx_Spi(0x05);
 80007ae:	2005      	movs	r0, #5
 80007b0:	f7ff ff4e 	bl	8000650 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80007b4:	20a5      	movs	r0, #165	; 0xa5
 80007b6:	f7ff ff4b 	bl	8000650 <W25qxx_Spi>
 80007ba:	4603      	mov	r3, r0
 80007bc:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 80007be:	4a16      	ldr	r2, [pc, #88]	; (8000818 <W25qxx_ReadStatusRegister+0x8c>)
 80007c0:	7bfb      	ldrb	r3, [r7, #15]
 80007c2:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 80007c6:	e01b      	b.n	8000800 <W25qxx_ReadStatusRegister+0x74>
	}
	else if (SelectStatusRegister_1_2_3 == 2)
 80007c8:	79fb      	ldrb	r3, [r7, #7]
 80007ca:	2b02      	cmp	r3, #2
 80007cc:	d10c      	bne.n	80007e8 <W25qxx_ReadStatusRegister+0x5c>
	{
		W25qxx_Spi(0x35);
 80007ce:	2035      	movs	r0, #53	; 0x35
 80007d0:	f7ff ff3e 	bl	8000650 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80007d4:	20a5      	movs	r0, #165	; 0xa5
 80007d6:	f7ff ff3b 	bl	8000650 <W25qxx_Spi>
 80007da:	4603      	mov	r3, r0
 80007dc:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 80007de:	4a0e      	ldr	r2, [pc, #56]	; (8000818 <W25qxx_ReadStatusRegister+0x8c>)
 80007e0:	7bfb      	ldrb	r3, [r7, #15]
 80007e2:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 80007e6:	e00b      	b.n	8000800 <W25qxx_ReadStatusRegister+0x74>
	}
	else
	{
		W25qxx_Spi(0x15);
 80007e8:	2015      	movs	r0, #21
 80007ea:	f7ff ff31 	bl	8000650 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80007ee:	20a5      	movs	r0, #165	; 0xa5
 80007f0:	f7ff ff2e 	bl	8000650 <W25qxx_Spi>
 80007f4:	4603      	mov	r3, r0
 80007f6:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 80007f8:	4a07      	ldr	r2, [pc, #28]	; (8000818 <W25qxx_ReadStatusRegister+0x8c>)
 80007fa:	7bfb      	ldrb	r3, [r7, #15]
 80007fc:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8000800:	2201      	movs	r2, #1
 8000802:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000806:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800080a:	f000 fe1f 	bl	800144c <HAL_GPIO_WritePin>
	return status;
 800080e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000810:	4618      	mov	r0, r3
 8000812:	3710      	adds	r7, #16
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	20000120 	.word	0x20000120

0800081c <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 8000820:	2001      	movs	r0, #1
 8000822:	f000 fb99 	bl	8000f58 <HAL_Delay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8000826:	2200      	movs	r2, #0
 8000828:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800082c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000830:	f000 fe0c 	bl	800144c <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 8000834:	2005      	movs	r0, #5
 8000836:	f7ff ff0b 	bl	8000650 <W25qxx_Spi>
	do
	{
		w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800083a:	20a5      	movs	r0, #165	; 0xa5
 800083c:	f7ff ff08 	bl	8000650 <W25qxx_Spi>
 8000840:	4603      	mov	r3, r0
 8000842:	461a      	mov	r2, r3
 8000844:	4b0a      	ldr	r3, [pc, #40]	; (8000870 <W25qxx_WaitForWriteEnd+0x54>)
 8000846:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 800084a:	2001      	movs	r0, #1
 800084c:	f000 fb84 	bl	8000f58 <HAL_Delay>
	} while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 8000850:	4b07      	ldr	r3, [pc, #28]	; (8000870 <W25qxx_WaitForWriteEnd+0x54>)
 8000852:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000856:	f003 0301 	and.w	r3, r3, #1
 800085a:	2b00      	cmp	r3, #0
 800085c:	d1ed      	bne.n	800083a <W25qxx_WaitForWriteEnd+0x1e>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800085e:	2201      	movs	r2, #1
 8000860:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000864:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000868:	f000 fdf0 	bl	800144c <HAL_GPIO_WritePin>
}
 800086c:	bf00      	nop
 800086e:	bd80      	pop	{r7, pc}
 8000870:	20000120 	.word	0x20000120

08000874 <W25qxx_Init>:
//###################################################################################################################
bool W25qxx_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 800087a:	4b66      	ldr	r3, [pc, #408]	; (8000a14 <W25qxx_Init+0x1a0>)
 800087c:	2201      	movs	r2, #1
 800087e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while (HAL_GetTick() < 100)
 8000882:	e002      	b.n	800088a <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 8000884:	2001      	movs	r0, #1
 8000886:	f000 fb67 	bl	8000f58 <HAL_Delay>
	while (HAL_GetTick() < 100)
 800088a:	f000 fb59 	bl	8000f40 <HAL_GetTick>
 800088e:	4603      	mov	r3, r0
 8000890:	2b63      	cmp	r3, #99	; 0x63
 8000892:	d9f7      	bls.n	8000884 <W25qxx_Init+0x10>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8000894:	2201      	movs	r2, #1
 8000896:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800089a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800089e:	f000 fdd5 	bl	800144c <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 80008a2:	2064      	movs	r0, #100	; 0x64
 80008a4:	f000 fb58 	bl	8000f58 <HAL_Delay>
	uint32_t id;
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Init Begin...\r\n");
#endif
	id = W25qxx_ReadID();
 80008a8:	f7ff fee8 	bl	800067c <W25qxx_ReadID>
 80008ac:	6078      	str	r0, [r7, #4]

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ID:0x%X\r\n", id);
#endif
	switch (id & 0x000000FF)
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	b2db      	uxtb	r3, r3
 80008b2:	3b11      	subs	r3, #17
 80008b4:	2b0f      	cmp	r3, #15
 80008b6:	d86c      	bhi.n	8000992 <W25qxx_Init+0x11e>
 80008b8:	a201      	add	r2, pc, #4	; (adr r2, 80008c0 <W25qxx_Init+0x4c>)
 80008ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008be:	bf00      	nop
 80008c0:	08000985 	.word	0x08000985
 80008c4:	08000977 	.word	0x08000977
 80008c8:	08000969 	.word	0x08000969
 80008cc:	0800095b 	.word	0x0800095b
 80008d0:	0800094d 	.word	0x0800094d
 80008d4:	0800093f 	.word	0x0800093f
 80008d8:	08000931 	.word	0x08000931
 80008dc:	08000921 	.word	0x08000921
 80008e0:	08000911 	.word	0x08000911
 80008e4:	08000993 	.word	0x08000993
 80008e8:	08000993 	.word	0x08000993
 80008ec:	08000993 	.word	0x08000993
 80008f0:	08000993 	.word	0x08000993
 80008f4:	08000993 	.word	0x08000993
 80008f8:	08000993 	.word	0x08000993
 80008fc:	08000901 	.word	0x08000901
	{
	case 0x20: // 	w25q512
		w25qxx.ID = W25Q512;
 8000900:	4b44      	ldr	r3, [pc, #272]	; (8000a14 <W25qxx_Init+0x1a0>)
 8000902:	220a      	movs	r2, #10
 8000904:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 1024;
 8000906:	4b43      	ldr	r3, [pc, #268]	; (8000a14 <W25qxx_Init+0x1a0>)
 8000908:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800090c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q512\r\n");
#endif
		break;
 800090e:	e046      	b.n	800099e <W25qxx_Init+0x12a>
	case 0x19: // 	w25q256
		w25qxx.ID = W25Q256;
 8000910:	4b40      	ldr	r3, [pc, #256]	; (8000a14 <W25qxx_Init+0x1a0>)
 8000912:	2209      	movs	r2, #9
 8000914:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 512;
 8000916:	4b3f      	ldr	r3, [pc, #252]	; (8000a14 <W25qxx_Init+0x1a0>)
 8000918:	f44f 7200 	mov.w	r2, #512	; 0x200
 800091c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q256\r\n");
#endif
		break;
 800091e:	e03e      	b.n	800099e <W25qxx_Init+0x12a>
	case 0x18: // 	w25q128
		w25qxx.ID = W25Q128;
 8000920:	4b3c      	ldr	r3, [pc, #240]	; (8000a14 <W25qxx_Init+0x1a0>)
 8000922:	2208      	movs	r2, #8
 8000924:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 256;
 8000926:	4b3b      	ldr	r3, [pc, #236]	; (8000a14 <W25qxx_Init+0x1a0>)
 8000928:	f44f 7280 	mov.w	r2, #256	; 0x100
 800092c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q128\r\n");
#endif
		break;
 800092e:	e036      	b.n	800099e <W25qxx_Init+0x12a>
	case 0x17: //	w25q64
		w25qxx.ID = W25Q64;
 8000930:	4b38      	ldr	r3, [pc, #224]	; (8000a14 <W25qxx_Init+0x1a0>)
 8000932:	2207      	movs	r2, #7
 8000934:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 128;
 8000936:	4b37      	ldr	r3, [pc, #220]	; (8000a14 <W25qxx_Init+0x1a0>)
 8000938:	2280      	movs	r2, #128	; 0x80
 800093a:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q64\r\n");
#endif
		break;
 800093c:	e02f      	b.n	800099e <W25qxx_Init+0x12a>
	case 0x16: //	w25q32
		w25qxx.ID = W25Q32;
 800093e:	4b35      	ldr	r3, [pc, #212]	; (8000a14 <W25qxx_Init+0x1a0>)
 8000940:	2206      	movs	r2, #6
 8000942:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 64;
 8000944:	4b33      	ldr	r3, [pc, #204]	; (8000a14 <W25qxx_Init+0x1a0>)
 8000946:	2240      	movs	r2, #64	; 0x40
 8000948:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q32\r\n");
#endif
		break;
 800094a:	e028      	b.n	800099e <W25qxx_Init+0x12a>
	case 0x15: //	w25q16
		w25qxx.ID = W25Q16;
 800094c:	4b31      	ldr	r3, [pc, #196]	; (8000a14 <W25qxx_Init+0x1a0>)
 800094e:	2205      	movs	r2, #5
 8000950:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 32;
 8000952:	4b30      	ldr	r3, [pc, #192]	; (8000a14 <W25qxx_Init+0x1a0>)
 8000954:	2220      	movs	r2, #32
 8000956:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q16\r\n");
#endif
		break;
 8000958:	e021      	b.n	800099e <W25qxx_Init+0x12a>
	case 0x14: //	w25q80
		w25qxx.ID = W25Q80;
 800095a:	4b2e      	ldr	r3, [pc, #184]	; (8000a14 <W25qxx_Init+0x1a0>)
 800095c:	2204      	movs	r2, #4
 800095e:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 16;
 8000960:	4b2c      	ldr	r3, [pc, #176]	; (8000a14 <W25qxx_Init+0x1a0>)
 8000962:	2210      	movs	r2, #16
 8000964:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q80\r\n");
#endif
		break;
 8000966:	e01a      	b.n	800099e <W25qxx_Init+0x12a>
	case 0x13: //	w25q40
		w25qxx.ID = W25Q40;
 8000968:	4b2a      	ldr	r3, [pc, #168]	; (8000a14 <W25qxx_Init+0x1a0>)
 800096a:	2203      	movs	r2, #3
 800096c:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 8;
 800096e:	4b29      	ldr	r3, [pc, #164]	; (8000a14 <W25qxx_Init+0x1a0>)
 8000970:	2208      	movs	r2, #8
 8000972:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q40\r\n");
#endif
		break;
 8000974:	e013      	b.n	800099e <W25qxx_Init+0x12a>
	case 0x12: //	w25q20
		w25qxx.ID = W25Q20;
 8000976:	4b27      	ldr	r3, [pc, #156]	; (8000a14 <W25qxx_Init+0x1a0>)
 8000978:	2202      	movs	r2, #2
 800097a:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 4;
 800097c:	4b25      	ldr	r3, [pc, #148]	; (8000a14 <W25qxx_Init+0x1a0>)
 800097e:	2204      	movs	r2, #4
 8000980:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q20\r\n");
#endif
		break;
 8000982:	e00c      	b.n	800099e <W25qxx_Init+0x12a>
	case 0x11: //	w25q10
		w25qxx.ID = W25Q10;
 8000984:	4b23      	ldr	r3, [pc, #140]	; (8000a14 <W25qxx_Init+0x1a0>)
 8000986:	2201      	movs	r2, #1
 8000988:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 2;
 800098a:	4b22      	ldr	r3, [pc, #136]	; (8000a14 <W25qxx_Init+0x1a0>)
 800098c:	2202      	movs	r2, #2
 800098e:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q10\r\n");
#endif
		break;
 8000990:	e005      	b.n	800099e <W25qxx_Init+0x12a>
	default:
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Unknown ID\r\n");
#endif
		w25qxx.Lock = 0;
 8000992:	4b20      	ldr	r3, [pc, #128]	; (8000a14 <W25qxx_Init+0x1a0>)
 8000994:	2200      	movs	r2, #0
 8000996:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		return false;
 800099a:	2300      	movs	r3, #0
 800099c:	e036      	b.n	8000a0c <W25qxx_Init+0x198>
	}
	w25qxx.PageSize = 256;
 800099e:	4b1d      	ldr	r3, [pc, #116]	; (8000a14 <W25qxx_Init+0x1a0>)
 80009a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009a4:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 80009a6:	4b1b      	ldr	r3, [pc, #108]	; (8000a14 <W25qxx_Init+0x1a0>)
 80009a8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009ac:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 80009ae:	4b19      	ldr	r3, [pc, #100]	; (8000a14 <W25qxx_Init+0x1a0>)
 80009b0:	69db      	ldr	r3, [r3, #28]
 80009b2:	011b      	lsls	r3, r3, #4
 80009b4:	4a17      	ldr	r2, [pc, #92]	; (8000a14 <W25qxx_Init+0x1a0>)
 80009b6:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 80009b8:	4b16      	ldr	r3, [pc, #88]	; (8000a14 <W25qxx_Init+0x1a0>)
 80009ba:	695b      	ldr	r3, [r3, #20]
 80009bc:	4a15      	ldr	r2, [pc, #84]	; (8000a14 <W25qxx_Init+0x1a0>)
 80009be:	6912      	ldr	r2, [r2, #16]
 80009c0:	fb02 f303 	mul.w	r3, r2, r3
 80009c4:	4a13      	ldr	r2, [pc, #76]	; (8000a14 <W25qxx_Init+0x1a0>)
 80009c6:	8952      	ldrh	r2, [r2, #10]
 80009c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80009cc:	4a11      	ldr	r2, [pc, #68]	; (8000a14 <W25qxx_Init+0x1a0>)
 80009ce:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 80009d0:	4b10      	ldr	r3, [pc, #64]	; (8000a14 <W25qxx_Init+0x1a0>)
 80009d2:	691b      	ldr	r3, [r3, #16]
 80009d4:	011b      	lsls	r3, r3, #4
 80009d6:	4a0f      	ldr	r2, [pc, #60]	; (8000a14 <W25qxx_Init+0x1a0>)
 80009d8:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 80009da:	4b0e      	ldr	r3, [pc, #56]	; (8000a14 <W25qxx_Init+0x1a0>)
 80009dc:	695b      	ldr	r3, [r3, #20]
 80009de:	4a0d      	ldr	r2, [pc, #52]	; (8000a14 <W25qxx_Init+0x1a0>)
 80009e0:	6912      	ldr	r2, [r2, #16]
 80009e2:	fb02 f303 	mul.w	r3, r2, r3
 80009e6:	0a9b      	lsrs	r3, r3, #10
 80009e8:	4a0a      	ldr	r2, [pc, #40]	; (8000a14 <W25qxx_Init+0x1a0>)
 80009ea:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 80009ec:	f7ff fe7e 	bl	80006ec <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 80009f0:	2001      	movs	r0, #1
 80009f2:	f7ff fecb 	bl	800078c <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 80009f6:	2002      	movs	r0, #2
 80009f8:	f7ff fec8 	bl	800078c <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 80009fc:	2003      	movs	r0, #3
 80009fe:	f7ff fec5 	bl	800078c <W25qxx_ReadStatusRegister>
	printf("w25qxx Block Size: %d Bytes\r\n", w25qxx.BlockSize);
	printf("w25qxx Block Count: %d\r\n", w25qxx.BlockCount);
	printf("w25qxx Capacity: %d KiloBytes\r\n", w25qxx.CapacityInKiloByte);
	printf("w25qxx Init Done\r\n");
#endif
	w25qxx.Lock = 0;
 8000a02:	4b04      	ldr	r3, [pc, #16]	; (8000a14 <W25qxx_Init+0x1a0>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 8000a0a:	2301      	movs	r3, #1
}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	3708      	adds	r7, #8
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	20000120 	.word	0x20000120

08000a18 <W25qxx_EraseChip>:
//###################################################################################################################
void W25qxx_EraseChip(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
	while (w25qxx.Lock == 1)
 8000a1c:	e002      	b.n	8000a24 <W25qxx_EraseChip+0xc>
		W25qxx_Delay(1);
 8000a1e:	2001      	movs	r0, #1
 8000a20:	f000 fa9a 	bl	8000f58 <HAL_Delay>
	while (w25qxx.Lock == 1)
 8000a24:	4b13      	ldr	r3, [pc, #76]	; (8000a74 <W25qxx_EraseChip+0x5c>)
 8000a26:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8000a2a:	2b01      	cmp	r3, #1
 8000a2c:	d0f7      	beq.n	8000a1e <W25qxx_EraseChip+0x6>
	w25qxx.Lock = 1;
 8000a2e:	4b11      	ldr	r3, [pc, #68]	; (8000a74 <W25qxx_EraseChip+0x5c>)
 8000a30:	2201      	movs	r2, #1
 8000a32:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
#if (_W25QXX_DEBUG == 1)
	uint32_t StartTime = HAL_GetTick();
	printf("w25qxx EraseChip Begin...\r\n");
#endif
	W25qxx_WriteEnable();
 8000a36:	f7ff fe91 	bl	800075c <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a44:	f000 fd02 	bl	800144c <HAL_GPIO_WritePin>
	W25qxx_Spi(0xC7);
 8000a48:	20c7      	movs	r0, #199	; 0xc7
 8000a4a:	f7ff fe01 	bl	8000650 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8000a4e:	2201      	movs	r2, #1
 8000a50:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a58:	f000 fcf8 	bl	800144c <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 8000a5c:	f7ff fede 	bl	800081c <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx EraseBlock done after %d ms!\r\n", HAL_GetTick() - StartTime);
#endif
	W25qxx_Delay(10);
 8000a60:	200a      	movs	r0, #10
 8000a62:	f000 fa79 	bl	8000f58 <HAL_Delay>
	w25qxx.Lock = 0;
 8000a66:	4b03      	ldr	r3, [pc, #12]	; (8000a74 <W25qxx_EraseChip+0x5c>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8000a6e:	bf00      	nop
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	20000120 	.word	0x20000120

08000a78 <W25qxx_SectorToPage>:
{
	return ((SectorAddress * w25qxx.SectorSize) / w25qxx.BlockSize);
}
//###################################################################################################################
uint32_t W25qxx_SectorToPage(uint32_t SectorAddress)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
	return (SectorAddress * w25qxx.SectorSize) / w25qxx.PageSize;
 8000a80:	4b07      	ldr	r3, [pc, #28]	; (8000aa0 <W25qxx_SectorToPage+0x28>)
 8000a82:	691b      	ldr	r3, [r3, #16]
 8000a84:	687a      	ldr	r2, [r7, #4]
 8000a86:	fb02 f303 	mul.w	r3, r2, r3
 8000a8a:	4a05      	ldr	r2, [pc, #20]	; (8000aa0 <W25qxx_SectorToPage+0x28>)
 8000a8c:	8952      	ldrh	r2, [r2, #10]
 8000a8e:	fbb3 f3f2 	udiv	r3, r3, r2
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	370c      	adds	r7, #12
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	20000120 	.word	0x20000120

08000aa4 <W25qxx_WritePage>:
#endif
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b084      	sub	sp, #16
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	60f8      	str	r0, [r7, #12]
 8000aac:	60b9      	str	r1, [r7, #8]
 8000aae:	607a      	str	r2, [r7, #4]
 8000ab0:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 8000ab2:	e002      	b.n	8000aba <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 8000ab4:	2001      	movs	r0, #1
 8000ab6:	f000 fa4f 	bl	8000f58 <HAL_Delay>
	while (w25qxx.Lock == 1)
 8000aba:	4b3b      	ldr	r3, [pc, #236]	; (8000ba8 <W25qxx_WritePage+0x104>)
 8000abc:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8000ac0:	2b01      	cmp	r3, #1
 8000ac2:	d0f7      	beq.n	8000ab4 <W25qxx_WritePage+0x10>
	w25qxx.Lock = 1;
 8000ac4:	4b38      	ldr	r3, [pc, #224]	; (8000ba8 <W25qxx_WritePage+0x104>)
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if (((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || (NumByteToWrite_up_to_PageSize == 0))
 8000acc:	683a      	ldr	r2, [r7, #0]
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	4413      	add	r3, r2
 8000ad2:	4a35      	ldr	r2, [pc, #212]	; (8000ba8 <W25qxx_WritePage+0x104>)
 8000ad4:	8952      	ldrh	r2, [r2, #10]
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d802      	bhi.n	8000ae0 <W25qxx_WritePage+0x3c>
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d105      	bne.n	8000aec <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8000ae0:	4b31      	ldr	r3, [pc, #196]	; (8000ba8 <W25qxx_WritePage+0x104>)
 8000ae2:	895b      	ldrh	r3, [r3, #10]
 8000ae4:	461a      	mov	r2, r3
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	1ad3      	subs	r3, r2, r3
 8000aea:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 8000aec:	687a      	ldr	r2, [r7, #4]
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	4413      	add	r3, r2
 8000af2:	4a2d      	ldr	r2, [pc, #180]	; (8000ba8 <W25qxx_WritePage+0x104>)
 8000af4:	8952      	ldrh	r2, [r2, #10]
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d905      	bls.n	8000b06 <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8000afa:	4b2b      	ldr	r3, [pc, #172]	; (8000ba8 <W25qxx_WritePage+0x104>)
 8000afc:	895b      	ldrh	r3, [r3, #10]
 8000afe:	461a      	mov	r2, r3
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	1ad3      	subs	r3, r2, r3
 8000b04:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToWrite_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t StartTime = HAL_GetTick();
#endif
	W25qxx_WaitForWriteEnd();
 8000b06:	f7ff fe89 	bl	800081c <W25qxx_WaitForWriteEnd>
	W25qxx_WriteEnable();
 8000b0a:	f7ff fe27 	bl	800075c <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8000b0e:	2200      	movs	r2, #0
 8000b10:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b18:	f000 fc98 	bl	800144c <HAL_GPIO_WritePin>
	Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 8000b1c:	4b22      	ldr	r3, [pc, #136]	; (8000ba8 <W25qxx_WritePage+0x104>)
 8000b1e:	895b      	ldrh	r3, [r3, #10]
 8000b20:	461a      	mov	r2, r3
 8000b22:	68bb      	ldr	r3, [r7, #8]
 8000b24:	fb03 f302 	mul.w	r3, r3, r2
 8000b28:	687a      	ldr	r2, [r7, #4]
 8000b2a:	4413      	add	r3, r2
 8000b2c:	60bb      	str	r3, [r7, #8]
	if (w25qxx.ID >= W25Q256)
 8000b2e:	4b1e      	ldr	r3, [pc, #120]	; (8000ba8 <W25qxx_WritePage+0x104>)
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	2b08      	cmp	r3, #8
 8000b34:	d909      	bls.n	8000b4a <W25qxx_WritePage+0xa6>
	{
		W25qxx_Spi(0x12);
 8000b36:	2012      	movs	r0, #18
 8000b38:	f7ff fd8a 	bl	8000650 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8000b3c:	68bb      	ldr	r3, [r7, #8]
 8000b3e:	0e1b      	lsrs	r3, r3, #24
 8000b40:	b2db      	uxtb	r3, r3
 8000b42:	4618      	mov	r0, r3
 8000b44:	f7ff fd84 	bl	8000650 <W25qxx_Spi>
 8000b48:	e002      	b.n	8000b50 <W25qxx_WritePage+0xac>
	}
	else
	{
		W25qxx_Spi(0x02);
 8000b4a:	2002      	movs	r0, #2
 8000b4c:	f7ff fd80 	bl	8000650 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8000b50:	68bb      	ldr	r3, [r7, #8]
 8000b52:	0c1b      	lsrs	r3, r3, #16
 8000b54:	b2db      	uxtb	r3, r3
 8000b56:	4618      	mov	r0, r3
 8000b58:	f7ff fd7a 	bl	8000650 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	0a1b      	lsrs	r3, r3, #8
 8000b60:	b2db      	uxtb	r3, r3
 8000b62:	4618      	mov	r0, r3
 8000b64:	f7ff fd74 	bl	8000650 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	b2db      	uxtb	r3, r3
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f7ff fd6f 	bl	8000650 <W25qxx_Spi>
	HAL_SPI_Transmit(&_W25QXX_SPI, pBuffer, NumByteToWrite_up_to_PageSize, 100);
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	b29a      	uxth	r2, r3
 8000b76:	2364      	movs	r3, #100	; 0x64
 8000b78:	68f9      	ldr	r1, [r7, #12]
 8000b7a:	480c      	ldr	r0, [pc, #48]	; (8000bac <W25qxx_WritePage+0x108>)
 8000b7c:	f001 fe67 	bl	800284e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8000b80:	2201      	movs	r2, #1
 8000b82:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b8a:	f000 fc5f 	bl	800144c <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 8000b8e:	f7ff fe45 	bl	800081c <W25qxx_WaitForWriteEnd>
	}
	printf("\r\n");
	printf("w25qxx WritePage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 8000b92:	2001      	movs	r0, #1
 8000b94:	f000 f9e0 	bl	8000f58 <HAL_Delay>
	w25qxx.Lock = 0;
 8000b98:	4b03      	ldr	r3, [pc, #12]	; (8000ba8 <W25qxx_WritePage+0x104>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8000ba0:	bf00      	nop
 8000ba2:	3710      	adds	r7, #16
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	20000120 	.word	0x20000120
 8000bac:	20000038 	.word	0x20000038

08000bb0 <W25qxx_WriteSector>:
//###################################################################################################################
void W25qxx_WriteSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_SectorSize)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b088      	sub	sp, #32
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	60f8      	str	r0, [r7, #12]
 8000bb8:	60b9      	str	r1, [r7, #8]
 8000bba:	607a      	str	r2, [r7, #4]
 8000bbc:	603b      	str	r3, [r7, #0]
	if ((NumByteToWrite_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToWrite_up_to_SectorSize == 0))
 8000bbe:	4b2c      	ldr	r3, [pc, #176]	; (8000c70 <W25qxx_WriteSector+0xc0>)
 8000bc0:	691b      	ldr	r3, [r3, #16]
 8000bc2:	683a      	ldr	r2, [r7, #0]
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	d802      	bhi.n	8000bce <W25qxx_WriteSector+0x1e>
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d102      	bne.n	8000bd4 <W25qxx_WriteSector+0x24>
		NumByteToWrite_up_to_SectorSize = w25qxx.SectorSize;
 8000bce:	4b28      	ldr	r3, [pc, #160]	; (8000c70 <W25qxx_WriteSector+0xc0>)
 8000bd0:	691b      	ldr	r3, [r3, #16]
 8000bd2:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx WriteSector:%d, Offset:%d ,Write %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToWrite_up_to_SectorSize);
	W25qxx_Delay(100);
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 8000bd4:	4b26      	ldr	r3, [pc, #152]	; (8000c70 <W25qxx_WriteSector+0xc0>)
 8000bd6:	691b      	ldr	r3, [r3, #16]
 8000bd8:	687a      	ldr	r2, [r7, #4]
 8000bda:	429a      	cmp	r2, r3
 8000bdc:	d243      	bcs.n	8000c66 <W25qxx_WriteSector+0xb6>
		return;
	}
	uint32_t StartPage;
	int32_t BytesToWrite;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToWrite_up_to_SectorSize) > w25qxx.SectorSize)
 8000bde:	687a      	ldr	r2, [r7, #4]
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	441a      	add	r2, r3
 8000be4:	4b22      	ldr	r3, [pc, #136]	; (8000c70 <W25qxx_WriteSector+0xc0>)
 8000be6:	691b      	ldr	r3, [r3, #16]
 8000be8:	429a      	cmp	r2, r3
 8000bea:	d905      	bls.n	8000bf8 <W25qxx_WriteSector+0x48>
		BytesToWrite = w25qxx.SectorSize - OffsetInByte;
 8000bec:	4b20      	ldr	r3, [pc, #128]	; (8000c70 <W25qxx_WriteSector+0xc0>)
 8000bee:	691a      	ldr	r2, [r3, #16]
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	1ad3      	subs	r3, r2, r3
 8000bf4:	61bb      	str	r3, [r7, #24]
 8000bf6:	e001      	b.n	8000bfc <W25qxx_WriteSector+0x4c>
	else
		BytesToWrite = NumByteToWrite_up_to_SectorSize;
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 8000bfc:	68b8      	ldr	r0, [r7, #8]
 8000bfe:	f7ff ff3b 	bl	8000a78 <W25qxx_SectorToPage>
 8000c02:	4602      	mov	r2, r0
 8000c04:	4b1a      	ldr	r3, [pc, #104]	; (8000c70 <W25qxx_WriteSector+0xc0>)
 8000c06:	895b      	ldrh	r3, [r3, #10]
 8000c08:	4619      	mov	r1, r3
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c10:	4413      	add	r3, r2
 8000c12:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 8000c14:	4b16      	ldr	r3, [pc, #88]	; (8000c70 <W25qxx_WriteSector+0xc0>)
 8000c16:	895b      	ldrh	r3, [r3, #10]
 8000c18:	461a      	mov	r2, r3
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	fbb3 f1f2 	udiv	r1, r3, r2
 8000c20:	fb02 f201 	mul.w	r2, r2, r1
 8000c24:	1a9b      	subs	r3, r3, r2
 8000c26:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_WritePage(pBuffer, StartPage, LocalOffset, BytesToWrite);
 8000c28:	69bb      	ldr	r3, [r7, #24]
 8000c2a:	697a      	ldr	r2, [r7, #20]
 8000c2c:	69f9      	ldr	r1, [r7, #28]
 8000c2e:	68f8      	ldr	r0, [r7, #12]
 8000c30:	f7ff ff38 	bl	8000aa4 <W25qxx_WritePage>
		StartPage++;
 8000c34:	69fb      	ldr	r3, [r7, #28]
 8000c36:	3301      	adds	r3, #1
 8000c38:	61fb      	str	r3, [r7, #28]
		BytesToWrite -= w25qxx.PageSize - LocalOffset;
 8000c3a:	4b0d      	ldr	r3, [pc, #52]	; (8000c70 <W25qxx_WriteSector+0xc0>)
 8000c3c:	895b      	ldrh	r3, [r3, #10]
 8000c3e:	461a      	mov	r2, r3
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	1a9a      	subs	r2, r3, r2
 8000c44:	69bb      	ldr	r3, [r7, #24]
 8000c46:	4413      	add	r3, r2
 8000c48:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 8000c4a:	4b09      	ldr	r3, [pc, #36]	; (8000c70 <W25qxx_WriteSector+0xc0>)
 8000c4c:	895b      	ldrh	r3, [r3, #10]
 8000c4e:	461a      	mov	r2, r3
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	1ad3      	subs	r3, r2, r3
 8000c54:	68fa      	ldr	r2, [r7, #12]
 8000c56:	4413      	add	r3, r2
 8000c58:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	617b      	str	r3, [r7, #20]
	} while (BytesToWrite > 0);
 8000c5e:	69bb      	ldr	r3, [r7, #24]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	dce1      	bgt.n	8000c28 <W25qxx_WriteSector+0x78>
 8000c64:	e000      	b.n	8000c68 <W25qxx_WriteSector+0xb8>
		return;
 8000c66:	bf00      	nop
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx WriteSector Done\r\n");
	W25qxx_Delay(100);
#endif
}
 8000c68:	3720      	adds	r7, #32
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	20000120 	.word	0x20000120

08000c74 <W25qxx_ReadPage>:
	W25qxx_Delay(1);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b084      	sub	sp, #16
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	60f8      	str	r0, [r7, #12]
 8000c7c:	60b9      	str	r1, [r7, #8]
 8000c7e:	607a      	str	r2, [r7, #4]
 8000c80:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 8000c82:	e002      	b.n	8000c8a <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 8000c84:	2001      	movs	r0, #1
 8000c86:	f000 f967 	bl	8000f58 <HAL_Delay>
	while (w25qxx.Lock == 1)
 8000c8a:	4b38      	ldr	r3, [pc, #224]	; (8000d6c <W25qxx_ReadPage+0xf8>)
 8000c8c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8000c90:	2b01      	cmp	r3, #1
 8000c92:	d0f7      	beq.n	8000c84 <W25qxx_ReadPage+0x10>
	w25qxx.Lock = 1;
 8000c94:	4b35      	ldr	r3, [pc, #212]	; (8000d6c <W25qxx_ReadPage+0xf8>)
 8000c96:	2201      	movs	r2, #1
 8000c98:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if ((NumByteToRead_up_to_PageSize > w25qxx.PageSize) || (NumByteToRead_up_to_PageSize == 0))
 8000c9c:	4b33      	ldr	r3, [pc, #204]	; (8000d6c <W25qxx_ReadPage+0xf8>)
 8000c9e:	895b      	ldrh	r3, [r3, #10]
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	4293      	cmp	r3, r2
 8000ca6:	d802      	bhi.n	8000cae <W25qxx_ReadPage+0x3a>
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d102      	bne.n	8000cb4 <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize;
 8000cae:	4b2f      	ldr	r3, [pc, #188]	; (8000d6c <W25qxx_ReadPage+0xf8>)
 8000cb0:	895b      	ldrh	r3, [r3, #10]
 8000cb2:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 8000cb4:	687a      	ldr	r2, [r7, #4]
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	4413      	add	r3, r2
 8000cba:	4a2c      	ldr	r2, [pc, #176]	; (8000d6c <W25qxx_ReadPage+0xf8>)
 8000cbc:	8952      	ldrh	r2, [r2, #10]
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d905      	bls.n	8000cce <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8000cc2:	4b2a      	ldr	r3, [pc, #168]	; (8000d6c <W25qxx_ReadPage+0xf8>)
 8000cc4:	895b      	ldrh	r3, [r3, #10]
 8000cc6:	461a      	mov	r2, r3
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	1ad3      	subs	r3, r2, r3
 8000ccc:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ReadPage:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToRead_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t StartTime = HAL_GetTick();
#endif
	Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 8000cce:	4b27      	ldr	r3, [pc, #156]	; (8000d6c <W25qxx_ReadPage+0xf8>)
 8000cd0:	895b      	ldrh	r3, [r3, #10]
 8000cd2:	461a      	mov	r2, r3
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	fb03 f302 	mul.w	r3, r3, r2
 8000cda:	687a      	ldr	r2, [r7, #4]
 8000cdc:	4413      	add	r3, r2
 8000cde:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ce6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cea:	f000 fbaf 	bl	800144c <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 8000cee:	4b1f      	ldr	r3, [pc, #124]	; (8000d6c <W25qxx_ReadPage+0xf8>)
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	2b08      	cmp	r3, #8
 8000cf4:	d909      	bls.n	8000d0a <W25qxx_ReadPage+0x96>
	{
		W25qxx_Spi(0x0C);
 8000cf6:	200c      	movs	r0, #12
 8000cf8:	f7ff fcaa 	bl	8000650 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	0e1b      	lsrs	r3, r3, #24
 8000d00:	b2db      	uxtb	r3, r3
 8000d02:	4618      	mov	r0, r3
 8000d04:	f7ff fca4 	bl	8000650 <W25qxx_Spi>
 8000d08:	e002      	b.n	8000d10 <W25qxx_ReadPage+0x9c>
	}
	else
	{
		W25qxx_Spi(0x0B);
 8000d0a:	200b      	movs	r0, #11
 8000d0c:	f7ff fca0 	bl	8000650 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	0c1b      	lsrs	r3, r3, #16
 8000d14:	b2db      	uxtb	r3, r3
 8000d16:	4618      	mov	r0, r3
 8000d18:	f7ff fc9a 	bl	8000650 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	0a1b      	lsrs	r3, r3, #8
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	4618      	mov	r0, r3
 8000d24:	f7ff fc94 	bl	8000650 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8000d28:	68bb      	ldr	r3, [r7, #8]
 8000d2a:	b2db      	uxtb	r3, r3
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff fc8f 	bl	8000650 <W25qxx_Spi>
	W25qxx_Spi(0);
 8000d32:	2000      	movs	r0, #0
 8000d34:	f7ff fc8c 	bl	8000650 <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, NumByteToRead_up_to_PageSize, 100);
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	b29a      	uxth	r2, r3
 8000d3c:	2364      	movs	r3, #100	; 0x64
 8000d3e:	68f9      	ldr	r1, [r7, #12]
 8000d40:	480b      	ldr	r0, [pc, #44]	; (8000d70 <W25qxx_ReadPage+0xfc>)
 8000d42:	f001 fef2 	bl	8002b2a <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8000d46:	2201      	movs	r2, #1
 8000d48:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d50:	f000 fb7c 	bl	800144c <HAL_GPIO_WritePin>
	}
	printf("\r\n");
	printf("w25qxx ReadPage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 8000d54:	2001      	movs	r0, #1
 8000d56:	f000 f8ff 	bl	8000f58 <HAL_Delay>
	w25qxx.Lock = 0;
 8000d5a:	4b04      	ldr	r3, [pc, #16]	; (8000d6c <W25qxx_ReadPage+0xf8>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8000d62:	bf00      	nop
 8000d64:	3710      	adds	r7, #16
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	20000120 	.word	0x20000120
 8000d70:	20000038 	.word	0x20000038

08000d74 <W25qxx_ReadSector>:
//###################################################################################################################
void W25qxx_ReadSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_SectorSize)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b088      	sub	sp, #32
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	60f8      	str	r0, [r7, #12]
 8000d7c:	60b9      	str	r1, [r7, #8]
 8000d7e:	607a      	str	r2, [r7, #4]
 8000d80:	603b      	str	r3, [r7, #0]
	if ((NumByteToRead_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToRead_up_to_SectorSize == 0))
 8000d82:	4b2c      	ldr	r3, [pc, #176]	; (8000e34 <W25qxx_ReadSector+0xc0>)
 8000d84:	691b      	ldr	r3, [r3, #16]
 8000d86:	683a      	ldr	r2, [r7, #0]
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	d802      	bhi.n	8000d92 <W25qxx_ReadSector+0x1e>
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d102      	bne.n	8000d98 <W25qxx_ReadSector+0x24>
		NumByteToRead_up_to_SectorSize = w25qxx.SectorSize;
 8000d92:	4b28      	ldr	r3, [pc, #160]	; (8000e34 <W25qxx_ReadSector+0xc0>)
 8000d94:	691b      	ldr	r3, [r3, #16]
 8000d96:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx ReadSector:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToRead_up_to_SectorSize);
	W25qxx_Delay(100);
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 8000d98:	4b26      	ldr	r3, [pc, #152]	; (8000e34 <W25qxx_ReadSector+0xc0>)
 8000d9a:	691b      	ldr	r3, [r3, #16]
 8000d9c:	687a      	ldr	r2, [r7, #4]
 8000d9e:	429a      	cmp	r2, r3
 8000da0:	d243      	bcs.n	8000e2a <W25qxx_ReadSector+0xb6>
		return;
	}
	uint32_t StartPage;
	int32_t BytesToRead;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToRead_up_to_SectorSize) > w25qxx.SectorSize)
 8000da2:	687a      	ldr	r2, [r7, #4]
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	441a      	add	r2, r3
 8000da8:	4b22      	ldr	r3, [pc, #136]	; (8000e34 <W25qxx_ReadSector+0xc0>)
 8000daa:	691b      	ldr	r3, [r3, #16]
 8000dac:	429a      	cmp	r2, r3
 8000dae:	d905      	bls.n	8000dbc <W25qxx_ReadSector+0x48>
		BytesToRead = w25qxx.SectorSize - OffsetInByte;
 8000db0:	4b20      	ldr	r3, [pc, #128]	; (8000e34 <W25qxx_ReadSector+0xc0>)
 8000db2:	691a      	ldr	r2, [r3, #16]
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	1ad3      	subs	r3, r2, r3
 8000db8:	61bb      	str	r3, [r7, #24]
 8000dba:	e001      	b.n	8000dc0 <W25qxx_ReadSector+0x4c>
	else
		BytesToRead = NumByteToRead_up_to_SectorSize;
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 8000dc0:	68b8      	ldr	r0, [r7, #8]
 8000dc2:	f7ff fe59 	bl	8000a78 <W25qxx_SectorToPage>
 8000dc6:	4602      	mov	r2, r0
 8000dc8:	4b1a      	ldr	r3, [pc, #104]	; (8000e34 <W25qxx_ReadSector+0xc0>)
 8000dca:	895b      	ldrh	r3, [r3, #10]
 8000dcc:	4619      	mov	r1, r3
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dd4:	4413      	add	r3, r2
 8000dd6:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 8000dd8:	4b16      	ldr	r3, [pc, #88]	; (8000e34 <W25qxx_ReadSector+0xc0>)
 8000dda:	895b      	ldrh	r3, [r3, #10]
 8000ddc:	461a      	mov	r2, r3
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	fbb3 f1f2 	udiv	r1, r3, r2
 8000de4:	fb02 f201 	mul.w	r2, r2, r1
 8000de8:	1a9b      	subs	r3, r3, r2
 8000dea:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_ReadPage(pBuffer, StartPage, LocalOffset, BytesToRead);
 8000dec:	69bb      	ldr	r3, [r7, #24]
 8000dee:	697a      	ldr	r2, [r7, #20]
 8000df0:	69f9      	ldr	r1, [r7, #28]
 8000df2:	68f8      	ldr	r0, [r7, #12]
 8000df4:	f7ff ff3e 	bl	8000c74 <W25qxx_ReadPage>
		StartPage++;
 8000df8:	69fb      	ldr	r3, [r7, #28]
 8000dfa:	3301      	adds	r3, #1
 8000dfc:	61fb      	str	r3, [r7, #28]
		BytesToRead -= w25qxx.PageSize - LocalOffset;
 8000dfe:	4b0d      	ldr	r3, [pc, #52]	; (8000e34 <W25qxx_ReadSector+0xc0>)
 8000e00:	895b      	ldrh	r3, [r3, #10]
 8000e02:	461a      	mov	r2, r3
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	1a9a      	subs	r2, r3, r2
 8000e08:	69bb      	ldr	r3, [r7, #24]
 8000e0a:	4413      	add	r3, r2
 8000e0c:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 8000e0e:	4b09      	ldr	r3, [pc, #36]	; (8000e34 <W25qxx_ReadSector+0xc0>)
 8000e10:	895b      	ldrh	r3, [r3, #10]
 8000e12:	461a      	mov	r2, r3
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	1ad3      	subs	r3, r2, r3
 8000e18:	68fa      	ldr	r2, [r7, #12]
 8000e1a:	4413      	add	r3, r2
 8000e1c:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	617b      	str	r3, [r7, #20]
	} while (BytesToRead > 0);
 8000e22:	69bb      	ldr	r3, [r7, #24]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	dce1      	bgt.n	8000dec <W25qxx_ReadSector+0x78>
 8000e28:	e000      	b.n	8000e2c <W25qxx_ReadSector+0xb8>
		return;
 8000e2a:	bf00      	nop
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx ReadSector Done\r\n");
	W25qxx_Delay(100);
#endif
}
 8000e2c:	3720      	adds	r7, #32
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	20000120 	.word	0x20000120

08000e38 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000e38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e70 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e3c:	480d      	ldr	r0, [pc, #52]	; (8000e74 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e3e:	490e      	ldr	r1, [pc, #56]	; (8000e78 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e40:	4a0e      	ldr	r2, [pc, #56]	; (8000e7c <LoopForever+0xe>)
  movs r3, #0
 8000e42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e44:	e002      	b.n	8000e4c <LoopCopyDataInit>

08000e46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e4a:	3304      	adds	r3, #4

08000e4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e50:	d3f9      	bcc.n	8000e46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e52:	4a0b      	ldr	r2, [pc, #44]	; (8000e80 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e54:	4c0b      	ldr	r4, [pc, #44]	; (8000e84 <LoopForever+0x16>)
  movs r3, #0
 8000e56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e58:	e001      	b.n	8000e5e <LoopFillZerobss>

08000e5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e5c:	3204      	adds	r2, #4

08000e5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e60:	d3fb      	bcc.n	8000e5a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000e62:	f7ff fbe3 	bl	800062c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e66:	f002 fe95 	bl	8003b94 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e6a:	f7ff f9ad 	bl	80001c8 <main>

08000e6e <LoopForever>:

LoopForever:
    b LoopForever
 8000e6e:	e7fe      	b.n	8000e6e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000e70:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000e74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e78:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000e7c:	08003c44 	.word	0x08003c44
  ldr r2, =_sbss
 8000e80:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000e84:	2000014c 	.word	0x2000014c

08000e88 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e88:	e7fe      	b.n	8000e88 <ADC1_IRQHandler>
	...

08000e8c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e90:	4b08      	ldr	r3, [pc, #32]	; (8000eb4 <HAL_Init+0x28>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a07      	ldr	r2, [pc, #28]	; (8000eb4 <HAL_Init+0x28>)
 8000e96:	f043 0310 	orr.w	r3, r3, #16
 8000e9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e9c:	2003      	movs	r0, #3
 8000e9e:	f000 f92f 	bl	8001100 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ea2:	2000      	movs	r0, #0
 8000ea4:	f000 f808 	bl	8000eb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ea8:	f7ff fae8 	bl	800047c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000eac:	2300      	movs	r3, #0
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40022000 	.word	0x40022000

08000eb8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ec0:	4b12      	ldr	r3, [pc, #72]	; (8000f0c <HAL_InitTick+0x54>)
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	4b12      	ldr	r3, [pc, #72]	; (8000f10 <HAL_InitTick+0x58>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	4619      	mov	r1, r3
 8000eca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ece:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ed2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f000 f939 	bl	800114e <HAL_SYSTICK_Config>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	e00e      	b.n	8000f04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2b0f      	cmp	r3, #15
 8000eea:	d80a      	bhi.n	8000f02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eec:	2200      	movs	r2, #0
 8000eee:	6879      	ldr	r1, [r7, #4]
 8000ef0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ef4:	f000 f90f 	bl	8001116 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ef8:	4a06      	ldr	r2, [pc, #24]	; (8000f14 <HAL_InitTick+0x5c>)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000efe:	2300      	movs	r3, #0
 8000f00:	e000      	b.n	8000f04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f02:	2301      	movs	r3, #1
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	3708      	adds	r7, #8
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	20000008 	.word	0x20000008
 8000f10:	20000010 	.word	0x20000010
 8000f14:	2000000c 	.word	0x2000000c

08000f18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f1c:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <HAL_IncTick+0x20>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	461a      	mov	r2, r3
 8000f22:	4b06      	ldr	r3, [pc, #24]	; (8000f3c <HAL_IncTick+0x24>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4413      	add	r3, r2
 8000f28:	4a04      	ldr	r2, [pc, #16]	; (8000f3c <HAL_IncTick+0x24>)
 8000f2a:	6013      	str	r3, [r2, #0]
}
 8000f2c:	bf00      	nop
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	20000010 	.word	0x20000010
 8000f3c:	20000148 	.word	0x20000148

08000f40 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  return uwTick;  
 8000f44:	4b03      	ldr	r3, [pc, #12]	; (8000f54 <HAL_GetTick+0x14>)
 8000f46:	681b      	ldr	r3, [r3, #0]
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	20000148 	.word	0x20000148

08000f58 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b084      	sub	sp, #16
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f60:	f7ff ffee 	bl	8000f40 <HAL_GetTick>
 8000f64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f70:	d005      	beq.n	8000f7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f72:	4b09      	ldr	r3, [pc, #36]	; (8000f98 <HAL_Delay+0x40>)
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	461a      	mov	r2, r3
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000f7e:	bf00      	nop
 8000f80:	f7ff ffde 	bl	8000f40 <HAL_GetTick>
 8000f84:	4602      	mov	r2, r0
 8000f86:	68bb      	ldr	r3, [r7, #8]
 8000f88:	1ad3      	subs	r3, r2, r3
 8000f8a:	68fa      	ldr	r2, [r7, #12]
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	d8f7      	bhi.n	8000f80 <HAL_Delay+0x28>
  {
  }
}
 8000f90:	bf00      	nop
 8000f92:	3710      	adds	r7, #16
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	20000010 	.word	0x20000010

08000f9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b085      	sub	sp, #20
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	f003 0307 	and.w	r3, r3, #7
 8000faa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fac:	4b0c      	ldr	r3, [pc, #48]	; (8000fe0 <__NVIC_SetPriorityGrouping+0x44>)
 8000fae:	68db      	ldr	r3, [r3, #12]
 8000fb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fb2:	68ba      	ldr	r2, [r7, #8]
 8000fb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fb8:	4013      	ands	r3, r2
 8000fba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fce:	4a04      	ldr	r2, [pc, #16]	; (8000fe0 <__NVIC_SetPriorityGrouping+0x44>)
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	60d3      	str	r3, [r2, #12]
}
 8000fd4:	bf00      	nop
 8000fd6:	3714      	adds	r7, #20
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr
 8000fe0:	e000ed00 	.word	0xe000ed00

08000fe4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fe8:	4b04      	ldr	r3, [pc, #16]	; (8000ffc <__NVIC_GetPriorityGrouping+0x18>)
 8000fea:	68db      	ldr	r3, [r3, #12]
 8000fec:	0a1b      	lsrs	r3, r3, #8
 8000fee:	f003 0307 	and.w	r3, r3, #7
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr
 8000ffc:	e000ed00 	.word	0xe000ed00

08001000 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	4603      	mov	r3, r0
 8001008:	6039      	str	r1, [r7, #0]
 800100a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800100c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001010:	2b00      	cmp	r3, #0
 8001012:	db0a      	blt.n	800102a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	b2da      	uxtb	r2, r3
 8001018:	490c      	ldr	r1, [pc, #48]	; (800104c <__NVIC_SetPriority+0x4c>)
 800101a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101e:	0112      	lsls	r2, r2, #4
 8001020:	b2d2      	uxtb	r2, r2
 8001022:	440b      	add	r3, r1
 8001024:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001028:	e00a      	b.n	8001040 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	b2da      	uxtb	r2, r3
 800102e:	4908      	ldr	r1, [pc, #32]	; (8001050 <__NVIC_SetPriority+0x50>)
 8001030:	79fb      	ldrb	r3, [r7, #7]
 8001032:	f003 030f 	and.w	r3, r3, #15
 8001036:	3b04      	subs	r3, #4
 8001038:	0112      	lsls	r2, r2, #4
 800103a:	b2d2      	uxtb	r2, r2
 800103c:	440b      	add	r3, r1
 800103e:	761a      	strb	r2, [r3, #24]
}
 8001040:	bf00      	nop
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr
 800104c:	e000e100 	.word	0xe000e100
 8001050:	e000ed00 	.word	0xe000ed00

08001054 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001054:	b480      	push	{r7}
 8001056:	b089      	sub	sp, #36	; 0x24
 8001058:	af00      	add	r7, sp, #0
 800105a:	60f8      	str	r0, [r7, #12]
 800105c:	60b9      	str	r1, [r7, #8]
 800105e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	f003 0307 	and.w	r3, r3, #7
 8001066:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	f1c3 0307 	rsb	r3, r3, #7
 800106e:	2b04      	cmp	r3, #4
 8001070:	bf28      	it	cs
 8001072:	2304      	movcs	r3, #4
 8001074:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	3304      	adds	r3, #4
 800107a:	2b06      	cmp	r3, #6
 800107c:	d902      	bls.n	8001084 <NVIC_EncodePriority+0x30>
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	3b03      	subs	r3, #3
 8001082:	e000      	b.n	8001086 <NVIC_EncodePriority+0x32>
 8001084:	2300      	movs	r3, #0
 8001086:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001088:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800108c:	69bb      	ldr	r3, [r7, #24]
 800108e:	fa02 f303 	lsl.w	r3, r2, r3
 8001092:	43da      	mvns	r2, r3
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	401a      	ands	r2, r3
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800109c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	fa01 f303 	lsl.w	r3, r1, r3
 80010a6:	43d9      	mvns	r1, r3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010ac:	4313      	orrs	r3, r2
         );
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3724      	adds	r7, #36	; 0x24
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
	...

080010bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	3b01      	subs	r3, #1
 80010c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010cc:	d301      	bcc.n	80010d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010ce:	2301      	movs	r3, #1
 80010d0:	e00f      	b.n	80010f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010d2:	4a0a      	ldr	r2, [pc, #40]	; (80010fc <SysTick_Config+0x40>)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	3b01      	subs	r3, #1
 80010d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010da:	210f      	movs	r1, #15
 80010dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010e0:	f7ff ff8e 	bl	8001000 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010e4:	4b05      	ldr	r3, [pc, #20]	; (80010fc <SysTick_Config+0x40>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ea:	4b04      	ldr	r3, [pc, #16]	; (80010fc <SysTick_Config+0x40>)
 80010ec:	2207      	movs	r2, #7
 80010ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010f0:	2300      	movs	r3, #0
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	e000e010 	.word	0xe000e010

08001100 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001108:	6878      	ldr	r0, [r7, #4]
 800110a:	f7ff ff47 	bl	8000f9c <__NVIC_SetPriorityGrouping>
}
 800110e:	bf00      	nop
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}

08001116 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001116:	b580      	push	{r7, lr}
 8001118:	b086      	sub	sp, #24
 800111a:	af00      	add	r7, sp, #0
 800111c:	4603      	mov	r3, r0
 800111e:	60b9      	str	r1, [r7, #8]
 8001120:	607a      	str	r2, [r7, #4]
 8001122:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001124:	2300      	movs	r3, #0
 8001126:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001128:	f7ff ff5c 	bl	8000fe4 <__NVIC_GetPriorityGrouping>
 800112c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800112e:	687a      	ldr	r2, [r7, #4]
 8001130:	68b9      	ldr	r1, [r7, #8]
 8001132:	6978      	ldr	r0, [r7, #20]
 8001134:	f7ff ff8e 	bl	8001054 <NVIC_EncodePriority>
 8001138:	4602      	mov	r2, r0
 800113a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800113e:	4611      	mov	r1, r2
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff ff5d 	bl	8001000 <__NVIC_SetPriority>
}
 8001146:	bf00      	nop
 8001148:	3718      	adds	r7, #24
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}

0800114e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800114e:	b580      	push	{r7, lr}
 8001150:	b082      	sub	sp, #8
 8001152:	af00      	add	r7, sp, #0
 8001154:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	f7ff ffb0 	bl	80010bc <SysTick_Config>
 800115c:	4603      	mov	r3, r0
}
 800115e:	4618      	mov	r0, r3
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
	...

08001168 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001168:	b480      	push	{r7}
 800116a:	b087      	sub	sp, #28
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001172:	2300      	movs	r3, #0
 8001174:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001176:	e14e      	b.n	8001416 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	2101      	movs	r1, #1
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	fa01 f303 	lsl.w	r3, r1, r3
 8001184:	4013      	ands	r3, r2
 8001186:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	2b00      	cmp	r3, #0
 800118c:	f000 8140 	beq.w	8001410 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f003 0303 	and.w	r3, r3, #3
 8001198:	2b01      	cmp	r3, #1
 800119a:	d005      	beq.n	80011a8 <HAL_GPIO_Init+0x40>
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f003 0303 	and.w	r3, r3, #3
 80011a4:	2b02      	cmp	r3, #2
 80011a6:	d130      	bne.n	800120a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	689b      	ldr	r3, [r3, #8]
 80011ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	2203      	movs	r2, #3
 80011b4:	fa02 f303 	lsl.w	r3, r2, r3
 80011b8:	43db      	mvns	r3, r3
 80011ba:	693a      	ldr	r2, [r7, #16]
 80011bc:	4013      	ands	r3, r2
 80011be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	68da      	ldr	r2, [r3, #12]
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	693a      	ldr	r2, [r7, #16]
 80011d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011de:	2201      	movs	r2, #1
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	fa02 f303 	lsl.w	r3, r2, r3
 80011e6:	43db      	mvns	r3, r3
 80011e8:	693a      	ldr	r2, [r7, #16]
 80011ea:	4013      	ands	r3, r2
 80011ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	091b      	lsrs	r3, r3, #4
 80011f4:	f003 0201 	and.w	r2, r3, #1
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	fa02 f303 	lsl.w	r3, r2, r3
 80011fe:	693a      	ldr	r2, [r7, #16]
 8001200:	4313      	orrs	r3, r2
 8001202:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	693a      	ldr	r2, [r7, #16]
 8001208:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	f003 0303 	and.w	r3, r3, #3
 8001212:	2b03      	cmp	r3, #3
 8001214:	d017      	beq.n	8001246 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	68db      	ldr	r3, [r3, #12]
 800121a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	005b      	lsls	r3, r3, #1
 8001220:	2203      	movs	r2, #3
 8001222:	fa02 f303 	lsl.w	r3, r2, r3
 8001226:	43db      	mvns	r3, r3
 8001228:	693a      	ldr	r2, [r7, #16]
 800122a:	4013      	ands	r3, r2
 800122c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	689a      	ldr	r2, [r3, #8]
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	fa02 f303 	lsl.w	r3, r2, r3
 800123a:	693a      	ldr	r2, [r7, #16]
 800123c:	4313      	orrs	r3, r2
 800123e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	693a      	ldr	r2, [r7, #16]
 8001244:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	f003 0303 	and.w	r3, r3, #3
 800124e:	2b02      	cmp	r3, #2
 8001250:	d123      	bne.n	800129a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	08da      	lsrs	r2, r3, #3
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	3208      	adds	r2, #8
 800125a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800125e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	f003 0307 	and.w	r3, r3, #7
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	220f      	movs	r2, #15
 800126a:	fa02 f303 	lsl.w	r3, r2, r3
 800126e:	43db      	mvns	r3, r3
 8001270:	693a      	ldr	r2, [r7, #16]
 8001272:	4013      	ands	r3, r2
 8001274:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	691a      	ldr	r2, [r3, #16]
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	f003 0307 	and.w	r3, r3, #7
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	fa02 f303 	lsl.w	r3, r2, r3
 8001286:	693a      	ldr	r2, [r7, #16]
 8001288:	4313      	orrs	r3, r2
 800128a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	08da      	lsrs	r2, r3, #3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	3208      	adds	r2, #8
 8001294:	6939      	ldr	r1, [r7, #16]
 8001296:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	005b      	lsls	r3, r3, #1
 80012a4:	2203      	movs	r2, #3
 80012a6:	fa02 f303 	lsl.w	r3, r2, r3
 80012aa:	43db      	mvns	r3, r3
 80012ac:	693a      	ldr	r2, [r7, #16]
 80012ae:	4013      	ands	r3, r2
 80012b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f003 0203 	and.w	r2, r3, #3
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	fa02 f303 	lsl.w	r3, r2, r3
 80012c2:	693a      	ldr	r2, [r7, #16]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	f000 809a 	beq.w	8001410 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012dc:	4b55      	ldr	r3, [pc, #340]	; (8001434 <HAL_GPIO_Init+0x2cc>)
 80012de:	699b      	ldr	r3, [r3, #24]
 80012e0:	4a54      	ldr	r2, [pc, #336]	; (8001434 <HAL_GPIO_Init+0x2cc>)
 80012e2:	f043 0301 	orr.w	r3, r3, #1
 80012e6:	6193      	str	r3, [r2, #24]
 80012e8:	4b52      	ldr	r3, [pc, #328]	; (8001434 <HAL_GPIO_Init+0x2cc>)
 80012ea:	699b      	ldr	r3, [r3, #24]
 80012ec:	f003 0301 	and.w	r3, r3, #1
 80012f0:	60bb      	str	r3, [r7, #8]
 80012f2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80012f4:	4a50      	ldr	r2, [pc, #320]	; (8001438 <HAL_GPIO_Init+0x2d0>)
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	089b      	lsrs	r3, r3, #2
 80012fa:	3302      	adds	r3, #2
 80012fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001300:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	f003 0303 	and.w	r3, r3, #3
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	220f      	movs	r2, #15
 800130c:	fa02 f303 	lsl.w	r3, r2, r3
 8001310:	43db      	mvns	r3, r3
 8001312:	693a      	ldr	r2, [r7, #16]
 8001314:	4013      	ands	r3, r2
 8001316:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800131e:	d013      	beq.n	8001348 <HAL_GPIO_Init+0x1e0>
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	4a46      	ldr	r2, [pc, #280]	; (800143c <HAL_GPIO_Init+0x2d4>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d00d      	beq.n	8001344 <HAL_GPIO_Init+0x1dc>
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	4a45      	ldr	r2, [pc, #276]	; (8001440 <HAL_GPIO_Init+0x2d8>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d007      	beq.n	8001340 <HAL_GPIO_Init+0x1d8>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	4a44      	ldr	r2, [pc, #272]	; (8001444 <HAL_GPIO_Init+0x2dc>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d101      	bne.n	800133c <HAL_GPIO_Init+0x1d4>
 8001338:	2303      	movs	r3, #3
 800133a:	e006      	b.n	800134a <HAL_GPIO_Init+0x1e2>
 800133c:	2305      	movs	r3, #5
 800133e:	e004      	b.n	800134a <HAL_GPIO_Init+0x1e2>
 8001340:	2302      	movs	r3, #2
 8001342:	e002      	b.n	800134a <HAL_GPIO_Init+0x1e2>
 8001344:	2301      	movs	r3, #1
 8001346:	e000      	b.n	800134a <HAL_GPIO_Init+0x1e2>
 8001348:	2300      	movs	r3, #0
 800134a:	697a      	ldr	r2, [r7, #20]
 800134c:	f002 0203 	and.w	r2, r2, #3
 8001350:	0092      	lsls	r2, r2, #2
 8001352:	4093      	lsls	r3, r2
 8001354:	693a      	ldr	r2, [r7, #16]
 8001356:	4313      	orrs	r3, r2
 8001358:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800135a:	4937      	ldr	r1, [pc, #220]	; (8001438 <HAL_GPIO_Init+0x2d0>)
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	089b      	lsrs	r3, r3, #2
 8001360:	3302      	adds	r3, #2
 8001362:	693a      	ldr	r2, [r7, #16]
 8001364:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001368:	4b37      	ldr	r3, [pc, #220]	; (8001448 <HAL_GPIO_Init+0x2e0>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	43db      	mvns	r3, r3
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	4013      	ands	r3, r2
 8001376:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001380:	2b00      	cmp	r3, #0
 8001382:	d003      	beq.n	800138c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001384:	693a      	ldr	r2, [r7, #16]
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	4313      	orrs	r3, r2
 800138a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800138c:	4a2e      	ldr	r2, [pc, #184]	; (8001448 <HAL_GPIO_Init+0x2e0>)
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001392:	4b2d      	ldr	r3, [pc, #180]	; (8001448 <HAL_GPIO_Init+0x2e0>)
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	43db      	mvns	r3, r3
 800139c:	693a      	ldr	r2, [r7, #16]
 800139e:	4013      	ands	r3, r2
 80013a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d003      	beq.n	80013b6 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80013ae:	693a      	ldr	r2, [r7, #16]
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	4313      	orrs	r3, r2
 80013b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80013b6:	4a24      	ldr	r2, [pc, #144]	; (8001448 <HAL_GPIO_Init+0x2e0>)
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013bc:	4b22      	ldr	r3, [pc, #136]	; (8001448 <HAL_GPIO_Init+0x2e0>)
 80013be:	689b      	ldr	r3, [r3, #8]
 80013c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	43db      	mvns	r3, r3
 80013c6:	693a      	ldr	r2, [r7, #16]
 80013c8:	4013      	ands	r3, r2
 80013ca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d003      	beq.n	80013e0 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80013d8:	693a      	ldr	r2, [r7, #16]
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	4313      	orrs	r3, r2
 80013de:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80013e0:	4a19      	ldr	r2, [pc, #100]	; (8001448 <HAL_GPIO_Init+0x2e0>)
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013e6:	4b18      	ldr	r3, [pc, #96]	; (8001448 <HAL_GPIO_Init+0x2e0>)
 80013e8:	68db      	ldr	r3, [r3, #12]
 80013ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	43db      	mvns	r3, r3
 80013f0:	693a      	ldr	r2, [r7, #16]
 80013f2:	4013      	ands	r3, r2
 80013f4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d003      	beq.n	800140a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001402:	693a      	ldr	r2, [r7, #16]
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	4313      	orrs	r3, r2
 8001408:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800140a:	4a0f      	ldr	r2, [pc, #60]	; (8001448 <HAL_GPIO_Init+0x2e0>)
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	3301      	adds	r3, #1
 8001414:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	fa22 f303 	lsr.w	r3, r2, r3
 8001420:	2b00      	cmp	r3, #0
 8001422:	f47f aea9 	bne.w	8001178 <HAL_GPIO_Init+0x10>
  }
}
 8001426:	bf00      	nop
 8001428:	371c      	adds	r7, #28
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	40021000 	.word	0x40021000
 8001438:	40010000 	.word	0x40010000
 800143c:	48000400 	.word	0x48000400
 8001440:	48000800 	.word	0x48000800
 8001444:	48000c00 	.word	0x48000c00
 8001448:	40010400 	.word	0x40010400

0800144c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	460b      	mov	r3, r1
 8001456:	807b      	strh	r3, [r7, #2]
 8001458:	4613      	mov	r3, r2
 800145a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800145c:	787b      	ldrb	r3, [r7, #1]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d003      	beq.n	800146a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001462:	887a      	ldrh	r2, [r7, #2]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001468:	e002      	b.n	8001470 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800146a:	887a      	ldrh	r2, [r7, #2]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001470:	bf00      	nop
 8001472:	370c      	adds	r7, #12
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr

0800147c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001482:	af00      	add	r7, sp, #0
 8001484:	1d3b      	adds	r3, r7, #4
 8001486:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001488:	1d3b      	adds	r3, r7, #4
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d102      	bne.n	8001496 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001490:	2301      	movs	r3, #1
 8001492:	f000 bef4 	b.w	800227e <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001496:	1d3b      	adds	r3, r7, #4
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f003 0301 	and.w	r3, r3, #1
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	f000 816a 	beq.w	800177a <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80014a6:	4bb3      	ldr	r3, [pc, #716]	; (8001774 <HAL_RCC_OscConfig+0x2f8>)
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	f003 030c 	and.w	r3, r3, #12
 80014ae:	2b04      	cmp	r3, #4
 80014b0:	d00c      	beq.n	80014cc <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80014b2:	4bb0      	ldr	r3, [pc, #704]	; (8001774 <HAL_RCC_OscConfig+0x2f8>)
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	f003 030c 	and.w	r3, r3, #12
 80014ba:	2b08      	cmp	r3, #8
 80014bc:	d159      	bne.n	8001572 <HAL_RCC_OscConfig+0xf6>
 80014be:	4bad      	ldr	r3, [pc, #692]	; (8001774 <HAL_RCC_OscConfig+0x2f8>)
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014ca:	d152      	bne.n	8001572 <HAL_RCC_OscConfig+0xf6>
 80014cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014d0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014d4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80014d8:	fa93 f3a3 	rbit	r3, r3
 80014dc:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80014e0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014e4:	fab3 f383 	clz	r3, r3
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	095b      	lsrs	r3, r3, #5
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	f043 0301 	orr.w	r3, r3, #1
 80014f2:	b2db      	uxtb	r3, r3
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d102      	bne.n	80014fe <HAL_RCC_OscConfig+0x82>
 80014f8:	4b9e      	ldr	r3, [pc, #632]	; (8001774 <HAL_RCC_OscConfig+0x2f8>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	e015      	b.n	800152a <HAL_RCC_OscConfig+0xae>
 80014fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001502:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001506:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800150a:	fa93 f3a3 	rbit	r3, r3
 800150e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001512:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001516:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800151a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800151e:	fa93 f3a3 	rbit	r3, r3
 8001522:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001526:	4b93      	ldr	r3, [pc, #588]	; (8001774 <HAL_RCC_OscConfig+0x2f8>)
 8001528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800152a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800152e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001532:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001536:	fa92 f2a2 	rbit	r2, r2
 800153a:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800153e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001542:	fab2 f282 	clz	r2, r2
 8001546:	b2d2      	uxtb	r2, r2
 8001548:	f042 0220 	orr.w	r2, r2, #32
 800154c:	b2d2      	uxtb	r2, r2
 800154e:	f002 021f 	and.w	r2, r2, #31
 8001552:	2101      	movs	r1, #1
 8001554:	fa01 f202 	lsl.w	r2, r1, r2
 8001558:	4013      	ands	r3, r2
 800155a:	2b00      	cmp	r3, #0
 800155c:	f000 810c 	beq.w	8001778 <HAL_RCC_OscConfig+0x2fc>
 8001560:	1d3b      	adds	r3, r7, #4
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	2b00      	cmp	r3, #0
 8001568:	f040 8106 	bne.w	8001778 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	f000 be86 	b.w	800227e <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001572:	1d3b      	adds	r3, r7, #4
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800157c:	d106      	bne.n	800158c <HAL_RCC_OscConfig+0x110>
 800157e:	4b7d      	ldr	r3, [pc, #500]	; (8001774 <HAL_RCC_OscConfig+0x2f8>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a7c      	ldr	r2, [pc, #496]	; (8001774 <HAL_RCC_OscConfig+0x2f8>)
 8001584:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001588:	6013      	str	r3, [r2, #0]
 800158a:	e030      	b.n	80015ee <HAL_RCC_OscConfig+0x172>
 800158c:	1d3b      	adds	r3, r7, #4
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d10c      	bne.n	80015b0 <HAL_RCC_OscConfig+0x134>
 8001596:	4b77      	ldr	r3, [pc, #476]	; (8001774 <HAL_RCC_OscConfig+0x2f8>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a76      	ldr	r2, [pc, #472]	; (8001774 <HAL_RCC_OscConfig+0x2f8>)
 800159c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015a0:	6013      	str	r3, [r2, #0]
 80015a2:	4b74      	ldr	r3, [pc, #464]	; (8001774 <HAL_RCC_OscConfig+0x2f8>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a73      	ldr	r2, [pc, #460]	; (8001774 <HAL_RCC_OscConfig+0x2f8>)
 80015a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015ac:	6013      	str	r3, [r2, #0]
 80015ae:	e01e      	b.n	80015ee <HAL_RCC_OscConfig+0x172>
 80015b0:	1d3b      	adds	r3, r7, #4
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015ba:	d10c      	bne.n	80015d6 <HAL_RCC_OscConfig+0x15a>
 80015bc:	4b6d      	ldr	r3, [pc, #436]	; (8001774 <HAL_RCC_OscConfig+0x2f8>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a6c      	ldr	r2, [pc, #432]	; (8001774 <HAL_RCC_OscConfig+0x2f8>)
 80015c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015c6:	6013      	str	r3, [r2, #0]
 80015c8:	4b6a      	ldr	r3, [pc, #424]	; (8001774 <HAL_RCC_OscConfig+0x2f8>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a69      	ldr	r2, [pc, #420]	; (8001774 <HAL_RCC_OscConfig+0x2f8>)
 80015ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015d2:	6013      	str	r3, [r2, #0]
 80015d4:	e00b      	b.n	80015ee <HAL_RCC_OscConfig+0x172>
 80015d6:	4b67      	ldr	r3, [pc, #412]	; (8001774 <HAL_RCC_OscConfig+0x2f8>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a66      	ldr	r2, [pc, #408]	; (8001774 <HAL_RCC_OscConfig+0x2f8>)
 80015dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015e0:	6013      	str	r3, [r2, #0]
 80015e2:	4b64      	ldr	r3, [pc, #400]	; (8001774 <HAL_RCC_OscConfig+0x2f8>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a63      	ldr	r2, [pc, #396]	; (8001774 <HAL_RCC_OscConfig+0x2f8>)
 80015e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015ec:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80015ee:	4b61      	ldr	r3, [pc, #388]	; (8001774 <HAL_RCC_OscConfig+0x2f8>)
 80015f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015f2:	f023 020f 	bic.w	r2, r3, #15
 80015f6:	1d3b      	adds	r3, r7, #4
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	495d      	ldr	r1, [pc, #372]	; (8001774 <HAL_RCC_OscConfig+0x2f8>)
 80015fe:	4313      	orrs	r3, r2
 8001600:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001602:	1d3b      	adds	r3, r7, #4
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d059      	beq.n	80016c0 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800160c:	f7ff fc98 	bl	8000f40 <HAL_GetTick>
 8001610:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001614:	e00a      	b.n	800162c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001616:	f7ff fc93 	bl	8000f40 <HAL_GetTick>
 800161a:	4602      	mov	r2, r0
 800161c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	2b64      	cmp	r3, #100	; 0x64
 8001624:	d902      	bls.n	800162c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	f000 be29 	b.w	800227e <HAL_RCC_OscConfig+0xe02>
 800162c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001630:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001634:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001638:	fa93 f3a3 	rbit	r3, r3
 800163c:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001640:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001644:	fab3 f383 	clz	r3, r3
 8001648:	b2db      	uxtb	r3, r3
 800164a:	095b      	lsrs	r3, r3, #5
 800164c:	b2db      	uxtb	r3, r3
 800164e:	f043 0301 	orr.w	r3, r3, #1
 8001652:	b2db      	uxtb	r3, r3
 8001654:	2b01      	cmp	r3, #1
 8001656:	d102      	bne.n	800165e <HAL_RCC_OscConfig+0x1e2>
 8001658:	4b46      	ldr	r3, [pc, #280]	; (8001774 <HAL_RCC_OscConfig+0x2f8>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	e015      	b.n	800168a <HAL_RCC_OscConfig+0x20e>
 800165e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001662:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001666:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800166a:	fa93 f3a3 	rbit	r3, r3
 800166e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001672:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001676:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800167a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800167e:	fa93 f3a3 	rbit	r3, r3
 8001682:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001686:	4b3b      	ldr	r3, [pc, #236]	; (8001774 <HAL_RCC_OscConfig+0x2f8>)
 8001688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800168a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800168e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001692:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001696:	fa92 f2a2 	rbit	r2, r2
 800169a:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800169e:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80016a2:	fab2 f282 	clz	r2, r2
 80016a6:	b2d2      	uxtb	r2, r2
 80016a8:	f042 0220 	orr.w	r2, r2, #32
 80016ac:	b2d2      	uxtb	r2, r2
 80016ae:	f002 021f 	and.w	r2, r2, #31
 80016b2:	2101      	movs	r1, #1
 80016b4:	fa01 f202 	lsl.w	r2, r1, r2
 80016b8:	4013      	ands	r3, r2
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d0ab      	beq.n	8001616 <HAL_RCC_OscConfig+0x19a>
 80016be:	e05c      	b.n	800177a <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016c0:	f7ff fc3e 	bl	8000f40 <HAL_GetTick>
 80016c4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016c8:	e00a      	b.n	80016e0 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016ca:	f7ff fc39 	bl	8000f40 <HAL_GetTick>
 80016ce:	4602      	mov	r2, r0
 80016d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	2b64      	cmp	r3, #100	; 0x64
 80016d8:	d902      	bls.n	80016e0 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80016da:	2303      	movs	r3, #3
 80016dc:	f000 bdcf 	b.w	800227e <HAL_RCC_OscConfig+0xe02>
 80016e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016e4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016e8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80016ec:	fa93 f3a3 	rbit	r3, r3
 80016f0:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80016f4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016f8:	fab3 f383 	clz	r3, r3
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	095b      	lsrs	r3, r3, #5
 8001700:	b2db      	uxtb	r3, r3
 8001702:	f043 0301 	orr.w	r3, r3, #1
 8001706:	b2db      	uxtb	r3, r3
 8001708:	2b01      	cmp	r3, #1
 800170a:	d102      	bne.n	8001712 <HAL_RCC_OscConfig+0x296>
 800170c:	4b19      	ldr	r3, [pc, #100]	; (8001774 <HAL_RCC_OscConfig+0x2f8>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	e015      	b.n	800173e <HAL_RCC_OscConfig+0x2c2>
 8001712:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001716:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800171a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800171e:	fa93 f3a3 	rbit	r3, r3
 8001722:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001726:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800172a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800172e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001732:	fa93 f3a3 	rbit	r3, r3
 8001736:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800173a:	4b0e      	ldr	r3, [pc, #56]	; (8001774 <HAL_RCC_OscConfig+0x2f8>)
 800173c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800173e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001742:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001746:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800174a:	fa92 f2a2 	rbit	r2, r2
 800174e:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001752:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001756:	fab2 f282 	clz	r2, r2
 800175a:	b2d2      	uxtb	r2, r2
 800175c:	f042 0220 	orr.w	r2, r2, #32
 8001760:	b2d2      	uxtb	r2, r2
 8001762:	f002 021f 	and.w	r2, r2, #31
 8001766:	2101      	movs	r1, #1
 8001768:	fa01 f202 	lsl.w	r2, r1, r2
 800176c:	4013      	ands	r3, r2
 800176e:	2b00      	cmp	r3, #0
 8001770:	d1ab      	bne.n	80016ca <HAL_RCC_OscConfig+0x24e>
 8001772:	e002      	b.n	800177a <HAL_RCC_OscConfig+0x2fe>
 8001774:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001778:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800177a:	1d3b      	adds	r3, r7, #4
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 0302 	and.w	r3, r3, #2
 8001784:	2b00      	cmp	r3, #0
 8001786:	f000 816f 	beq.w	8001a68 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800178a:	4bd0      	ldr	r3, [pc, #832]	; (8001acc <HAL_RCC_OscConfig+0x650>)
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	f003 030c 	and.w	r3, r3, #12
 8001792:	2b00      	cmp	r3, #0
 8001794:	d00b      	beq.n	80017ae <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001796:	4bcd      	ldr	r3, [pc, #820]	; (8001acc <HAL_RCC_OscConfig+0x650>)
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	f003 030c 	and.w	r3, r3, #12
 800179e:	2b08      	cmp	r3, #8
 80017a0:	d16c      	bne.n	800187c <HAL_RCC_OscConfig+0x400>
 80017a2:	4bca      	ldr	r3, [pc, #808]	; (8001acc <HAL_RCC_OscConfig+0x650>)
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d166      	bne.n	800187c <HAL_RCC_OscConfig+0x400>
 80017ae:	2302      	movs	r3, #2
 80017b0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017b4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80017b8:	fa93 f3a3 	rbit	r3, r3
 80017bc:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80017c0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017c4:	fab3 f383 	clz	r3, r3
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	095b      	lsrs	r3, r3, #5
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	f043 0301 	orr.w	r3, r3, #1
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d102      	bne.n	80017de <HAL_RCC_OscConfig+0x362>
 80017d8:	4bbc      	ldr	r3, [pc, #752]	; (8001acc <HAL_RCC_OscConfig+0x650>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	e013      	b.n	8001806 <HAL_RCC_OscConfig+0x38a>
 80017de:	2302      	movs	r3, #2
 80017e0:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017e4:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80017e8:	fa93 f3a3 	rbit	r3, r3
 80017ec:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80017f0:	2302      	movs	r3, #2
 80017f2:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80017f6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80017fa:	fa93 f3a3 	rbit	r3, r3
 80017fe:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001802:	4bb2      	ldr	r3, [pc, #712]	; (8001acc <HAL_RCC_OscConfig+0x650>)
 8001804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001806:	2202      	movs	r2, #2
 8001808:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800180c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001810:	fa92 f2a2 	rbit	r2, r2
 8001814:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001818:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800181c:	fab2 f282 	clz	r2, r2
 8001820:	b2d2      	uxtb	r2, r2
 8001822:	f042 0220 	orr.w	r2, r2, #32
 8001826:	b2d2      	uxtb	r2, r2
 8001828:	f002 021f 	and.w	r2, r2, #31
 800182c:	2101      	movs	r1, #1
 800182e:	fa01 f202 	lsl.w	r2, r1, r2
 8001832:	4013      	ands	r3, r2
 8001834:	2b00      	cmp	r3, #0
 8001836:	d007      	beq.n	8001848 <HAL_RCC_OscConfig+0x3cc>
 8001838:	1d3b      	adds	r3, r7, #4
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	691b      	ldr	r3, [r3, #16]
 800183e:	2b01      	cmp	r3, #1
 8001840:	d002      	beq.n	8001848 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	f000 bd1b 	b.w	800227e <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001848:	4ba0      	ldr	r3, [pc, #640]	; (8001acc <HAL_RCC_OscConfig+0x650>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001850:	1d3b      	adds	r3, r7, #4
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	695b      	ldr	r3, [r3, #20]
 8001856:	21f8      	movs	r1, #248	; 0xf8
 8001858:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800185c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001860:	fa91 f1a1 	rbit	r1, r1
 8001864:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001868:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800186c:	fab1 f181 	clz	r1, r1
 8001870:	b2c9      	uxtb	r1, r1
 8001872:	408b      	lsls	r3, r1
 8001874:	4995      	ldr	r1, [pc, #596]	; (8001acc <HAL_RCC_OscConfig+0x650>)
 8001876:	4313      	orrs	r3, r2
 8001878:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800187a:	e0f5      	b.n	8001a68 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800187c:	1d3b      	adds	r3, r7, #4
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	691b      	ldr	r3, [r3, #16]
 8001882:	2b00      	cmp	r3, #0
 8001884:	f000 8085 	beq.w	8001992 <HAL_RCC_OscConfig+0x516>
 8001888:	2301      	movs	r3, #1
 800188a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800188e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001892:	fa93 f3a3 	rbit	r3, r3
 8001896:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800189a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800189e:	fab3 f383 	clz	r3, r3
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80018a8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	461a      	mov	r2, r3
 80018b0:	2301      	movs	r3, #1
 80018b2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b4:	f7ff fb44 	bl	8000f40 <HAL_GetTick>
 80018b8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018bc:	e00a      	b.n	80018d4 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018be:	f7ff fb3f 	bl	8000f40 <HAL_GetTick>
 80018c2:	4602      	mov	r2, r0
 80018c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	d902      	bls.n	80018d4 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80018ce:	2303      	movs	r3, #3
 80018d0:	f000 bcd5 	b.w	800227e <HAL_RCC_OscConfig+0xe02>
 80018d4:	2302      	movs	r3, #2
 80018d6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018da:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80018de:	fa93 f3a3 	rbit	r3, r3
 80018e2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80018e6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018ea:	fab3 f383 	clz	r3, r3
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	095b      	lsrs	r3, r3, #5
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	f043 0301 	orr.w	r3, r3, #1
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d102      	bne.n	8001904 <HAL_RCC_OscConfig+0x488>
 80018fe:	4b73      	ldr	r3, [pc, #460]	; (8001acc <HAL_RCC_OscConfig+0x650>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	e013      	b.n	800192c <HAL_RCC_OscConfig+0x4b0>
 8001904:	2302      	movs	r3, #2
 8001906:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800190a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800190e:	fa93 f3a3 	rbit	r3, r3
 8001912:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001916:	2302      	movs	r3, #2
 8001918:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800191c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001920:	fa93 f3a3 	rbit	r3, r3
 8001924:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001928:	4b68      	ldr	r3, [pc, #416]	; (8001acc <HAL_RCC_OscConfig+0x650>)
 800192a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800192c:	2202      	movs	r2, #2
 800192e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001932:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001936:	fa92 f2a2 	rbit	r2, r2
 800193a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800193e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001942:	fab2 f282 	clz	r2, r2
 8001946:	b2d2      	uxtb	r2, r2
 8001948:	f042 0220 	orr.w	r2, r2, #32
 800194c:	b2d2      	uxtb	r2, r2
 800194e:	f002 021f 	and.w	r2, r2, #31
 8001952:	2101      	movs	r1, #1
 8001954:	fa01 f202 	lsl.w	r2, r1, r2
 8001958:	4013      	ands	r3, r2
 800195a:	2b00      	cmp	r3, #0
 800195c:	d0af      	beq.n	80018be <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800195e:	4b5b      	ldr	r3, [pc, #364]	; (8001acc <HAL_RCC_OscConfig+0x650>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001966:	1d3b      	adds	r3, r7, #4
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	695b      	ldr	r3, [r3, #20]
 800196c:	21f8      	movs	r1, #248	; 0xf8
 800196e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001972:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001976:	fa91 f1a1 	rbit	r1, r1
 800197a:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800197e:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001982:	fab1 f181 	clz	r1, r1
 8001986:	b2c9      	uxtb	r1, r1
 8001988:	408b      	lsls	r3, r1
 800198a:	4950      	ldr	r1, [pc, #320]	; (8001acc <HAL_RCC_OscConfig+0x650>)
 800198c:	4313      	orrs	r3, r2
 800198e:	600b      	str	r3, [r1, #0]
 8001990:	e06a      	b.n	8001a68 <HAL_RCC_OscConfig+0x5ec>
 8001992:	2301      	movs	r3, #1
 8001994:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001998:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800199c:	fa93 f3a3 	rbit	r3, r3
 80019a0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80019a4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019a8:	fab3 f383 	clz	r3, r3
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80019b2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	461a      	mov	r2, r3
 80019ba:	2300      	movs	r3, #0
 80019bc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019be:	f7ff fabf 	bl	8000f40 <HAL_GetTick>
 80019c2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019c6:	e00a      	b.n	80019de <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019c8:	f7ff faba 	bl	8000f40 <HAL_GetTick>
 80019cc:	4602      	mov	r2, r0
 80019ce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	2b02      	cmp	r3, #2
 80019d6:	d902      	bls.n	80019de <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80019d8:	2303      	movs	r3, #3
 80019da:	f000 bc50 	b.w	800227e <HAL_RCC_OscConfig+0xe02>
 80019de:	2302      	movs	r3, #2
 80019e0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019e4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80019e8:	fa93 f3a3 	rbit	r3, r3
 80019ec:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80019f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019f4:	fab3 f383 	clz	r3, r3
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	095b      	lsrs	r3, r3, #5
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	f043 0301 	orr.w	r3, r3, #1
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d102      	bne.n	8001a0e <HAL_RCC_OscConfig+0x592>
 8001a08:	4b30      	ldr	r3, [pc, #192]	; (8001acc <HAL_RCC_OscConfig+0x650>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	e013      	b.n	8001a36 <HAL_RCC_OscConfig+0x5ba>
 8001a0e:	2302      	movs	r3, #2
 8001a10:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a14:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001a18:	fa93 f3a3 	rbit	r3, r3
 8001a1c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001a20:	2302      	movs	r3, #2
 8001a22:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001a26:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001a2a:	fa93 f3a3 	rbit	r3, r3
 8001a2e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001a32:	4b26      	ldr	r3, [pc, #152]	; (8001acc <HAL_RCC_OscConfig+0x650>)
 8001a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a36:	2202      	movs	r2, #2
 8001a38:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001a3c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001a40:	fa92 f2a2 	rbit	r2, r2
 8001a44:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001a48:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001a4c:	fab2 f282 	clz	r2, r2
 8001a50:	b2d2      	uxtb	r2, r2
 8001a52:	f042 0220 	orr.w	r2, r2, #32
 8001a56:	b2d2      	uxtb	r2, r2
 8001a58:	f002 021f 	and.w	r2, r2, #31
 8001a5c:	2101      	movs	r1, #1
 8001a5e:	fa01 f202 	lsl.w	r2, r1, r2
 8001a62:	4013      	ands	r3, r2
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d1af      	bne.n	80019c8 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a68:	1d3b      	adds	r3, r7, #4
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0308 	and.w	r3, r3, #8
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	f000 80da 	beq.w	8001c2c <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a78:	1d3b      	adds	r3, r7, #4
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	699b      	ldr	r3, [r3, #24]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d069      	beq.n	8001b56 <HAL_RCC_OscConfig+0x6da>
 8001a82:	2301      	movs	r3, #1
 8001a84:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a88:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001a8c:	fa93 f3a3 	rbit	r3, r3
 8001a90:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001a94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a98:	fab3 f383 	clz	r3, r3
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	4b0b      	ldr	r3, [pc, #44]	; (8001ad0 <HAL_RCC_OscConfig+0x654>)
 8001aa2:	4413      	add	r3, r2
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aac:	f7ff fa48 	bl	8000f40 <HAL_GetTick>
 8001ab0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ab4:	e00e      	b.n	8001ad4 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ab6:	f7ff fa43 	bl	8000f40 <HAL_GetTick>
 8001aba:	4602      	mov	r2, r0
 8001abc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d906      	bls.n	8001ad4 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e3d9      	b.n	800227e <HAL_RCC_OscConfig+0xe02>
 8001aca:	bf00      	nop
 8001acc:	40021000 	.word	0x40021000
 8001ad0:	10908120 	.word	0x10908120
 8001ad4:	2302      	movs	r3, #2
 8001ad6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ada:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001ade:	fa93 f3a3 	rbit	r3, r3
 8001ae2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001ae6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001aea:	2202      	movs	r2, #2
 8001aec:	601a      	str	r2, [r3, #0]
 8001aee:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	fa93 f2a3 	rbit	r2, r3
 8001af8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001afc:	601a      	str	r2, [r3, #0]
 8001afe:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001b02:	2202      	movs	r2, #2
 8001b04:	601a      	str	r2, [r3, #0]
 8001b06:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	fa93 f2a3 	rbit	r2, r3
 8001b10:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001b14:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b16:	4ba5      	ldr	r3, [pc, #660]	; (8001dac <HAL_RCC_OscConfig+0x930>)
 8001b18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b1a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001b1e:	2102      	movs	r1, #2
 8001b20:	6019      	str	r1, [r3, #0]
 8001b22:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	fa93 f1a3 	rbit	r1, r3
 8001b2c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001b30:	6019      	str	r1, [r3, #0]
  return result;
 8001b32:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	fab3 f383 	clz	r3, r3
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	f003 031f 	and.w	r3, r3, #31
 8001b48:	2101      	movs	r1, #1
 8001b4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b4e:	4013      	ands	r3, r2
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d0b0      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x63a>
 8001b54:	e06a      	b.n	8001c2c <HAL_RCC_OscConfig+0x7b0>
 8001b56:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b5e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	fa93 f2a3 	rbit	r2, r3
 8001b68:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001b6c:	601a      	str	r2, [r3, #0]
  return result;
 8001b6e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001b72:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b74:	fab3 f383 	clz	r3, r3
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	4b8c      	ldr	r3, [pc, #560]	; (8001db0 <HAL_RCC_OscConfig+0x934>)
 8001b7e:	4413      	add	r3, r2
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	461a      	mov	r2, r3
 8001b84:	2300      	movs	r3, #0
 8001b86:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b88:	f7ff f9da 	bl	8000f40 <HAL_GetTick>
 8001b8c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b90:	e009      	b.n	8001ba6 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b92:	f7ff f9d5 	bl	8000f40 <HAL_GetTick>
 8001b96:	4602      	mov	r2, r0
 8001b98:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	2b02      	cmp	r3, #2
 8001ba0:	d901      	bls.n	8001ba6 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e36b      	b.n	800227e <HAL_RCC_OscConfig+0xe02>
 8001ba6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001baa:	2202      	movs	r2, #2
 8001bac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bae:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	fa93 f2a3 	rbit	r2, r3
 8001bb8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001bbc:	601a      	str	r2, [r3, #0]
 8001bbe:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001bc2:	2202      	movs	r2, #2
 8001bc4:	601a      	str	r2, [r3, #0]
 8001bc6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	fa93 f2a3 	rbit	r2, r3
 8001bd0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001bd4:	601a      	str	r2, [r3, #0]
 8001bd6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001bda:	2202      	movs	r2, #2
 8001bdc:	601a      	str	r2, [r3, #0]
 8001bde:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	fa93 f2a3 	rbit	r2, r3
 8001be8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001bec:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bee:	4b6f      	ldr	r3, [pc, #444]	; (8001dac <HAL_RCC_OscConfig+0x930>)
 8001bf0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bf2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001bf6:	2102      	movs	r1, #2
 8001bf8:	6019      	str	r1, [r3, #0]
 8001bfa:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	fa93 f1a3 	rbit	r1, r3
 8001c04:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001c08:	6019      	str	r1, [r3, #0]
  return result;
 8001c0a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	fab3 f383 	clz	r3, r3
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	f003 031f 	and.w	r3, r3, #31
 8001c20:	2101      	movs	r1, #1
 8001c22:	fa01 f303 	lsl.w	r3, r1, r3
 8001c26:	4013      	ands	r3, r2
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d1b2      	bne.n	8001b92 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c2c:	1d3b      	adds	r3, r7, #4
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0304 	and.w	r3, r3, #4
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	f000 8158 	beq.w	8001eec <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c42:	4b5a      	ldr	r3, [pc, #360]	; (8001dac <HAL_RCC_OscConfig+0x930>)
 8001c44:	69db      	ldr	r3, [r3, #28]
 8001c46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d112      	bne.n	8001c74 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c4e:	4b57      	ldr	r3, [pc, #348]	; (8001dac <HAL_RCC_OscConfig+0x930>)
 8001c50:	69db      	ldr	r3, [r3, #28]
 8001c52:	4a56      	ldr	r2, [pc, #344]	; (8001dac <HAL_RCC_OscConfig+0x930>)
 8001c54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c58:	61d3      	str	r3, [r2, #28]
 8001c5a:	4b54      	ldr	r3, [pc, #336]	; (8001dac <HAL_RCC_OscConfig+0x930>)
 8001c5c:	69db      	ldr	r3, [r3, #28]
 8001c5e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001c62:	f107 0308 	add.w	r3, r7, #8
 8001c66:	601a      	str	r2, [r3, #0]
 8001c68:	f107 0308 	add.w	r3, r7, #8
 8001c6c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c74:	4b4f      	ldr	r3, [pc, #316]	; (8001db4 <HAL_RCC_OscConfig+0x938>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d11a      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c80:	4b4c      	ldr	r3, [pc, #304]	; (8001db4 <HAL_RCC_OscConfig+0x938>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a4b      	ldr	r2, [pc, #300]	; (8001db4 <HAL_RCC_OscConfig+0x938>)
 8001c86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c8a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c8c:	f7ff f958 	bl	8000f40 <HAL_GetTick>
 8001c90:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c94:	e009      	b.n	8001caa <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c96:	f7ff f953 	bl	8000f40 <HAL_GetTick>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	2b64      	cmp	r3, #100	; 0x64
 8001ca4:	d901      	bls.n	8001caa <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e2e9      	b.n	800227e <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001caa:	4b42      	ldr	r3, [pc, #264]	; (8001db4 <HAL_RCC_OscConfig+0x938>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d0ef      	beq.n	8001c96 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cb6:	1d3b      	adds	r3, r7, #4
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d106      	bne.n	8001cce <HAL_RCC_OscConfig+0x852>
 8001cc0:	4b3a      	ldr	r3, [pc, #232]	; (8001dac <HAL_RCC_OscConfig+0x930>)
 8001cc2:	6a1b      	ldr	r3, [r3, #32]
 8001cc4:	4a39      	ldr	r2, [pc, #228]	; (8001dac <HAL_RCC_OscConfig+0x930>)
 8001cc6:	f043 0301 	orr.w	r3, r3, #1
 8001cca:	6213      	str	r3, [r2, #32]
 8001ccc:	e02f      	b.n	8001d2e <HAL_RCC_OscConfig+0x8b2>
 8001cce:	1d3b      	adds	r3, r7, #4
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d10c      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x876>
 8001cd8:	4b34      	ldr	r3, [pc, #208]	; (8001dac <HAL_RCC_OscConfig+0x930>)
 8001cda:	6a1b      	ldr	r3, [r3, #32]
 8001cdc:	4a33      	ldr	r2, [pc, #204]	; (8001dac <HAL_RCC_OscConfig+0x930>)
 8001cde:	f023 0301 	bic.w	r3, r3, #1
 8001ce2:	6213      	str	r3, [r2, #32]
 8001ce4:	4b31      	ldr	r3, [pc, #196]	; (8001dac <HAL_RCC_OscConfig+0x930>)
 8001ce6:	6a1b      	ldr	r3, [r3, #32]
 8001ce8:	4a30      	ldr	r2, [pc, #192]	; (8001dac <HAL_RCC_OscConfig+0x930>)
 8001cea:	f023 0304 	bic.w	r3, r3, #4
 8001cee:	6213      	str	r3, [r2, #32]
 8001cf0:	e01d      	b.n	8001d2e <HAL_RCC_OscConfig+0x8b2>
 8001cf2:	1d3b      	adds	r3, r7, #4
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	2b05      	cmp	r3, #5
 8001cfa:	d10c      	bne.n	8001d16 <HAL_RCC_OscConfig+0x89a>
 8001cfc:	4b2b      	ldr	r3, [pc, #172]	; (8001dac <HAL_RCC_OscConfig+0x930>)
 8001cfe:	6a1b      	ldr	r3, [r3, #32]
 8001d00:	4a2a      	ldr	r2, [pc, #168]	; (8001dac <HAL_RCC_OscConfig+0x930>)
 8001d02:	f043 0304 	orr.w	r3, r3, #4
 8001d06:	6213      	str	r3, [r2, #32]
 8001d08:	4b28      	ldr	r3, [pc, #160]	; (8001dac <HAL_RCC_OscConfig+0x930>)
 8001d0a:	6a1b      	ldr	r3, [r3, #32]
 8001d0c:	4a27      	ldr	r2, [pc, #156]	; (8001dac <HAL_RCC_OscConfig+0x930>)
 8001d0e:	f043 0301 	orr.w	r3, r3, #1
 8001d12:	6213      	str	r3, [r2, #32]
 8001d14:	e00b      	b.n	8001d2e <HAL_RCC_OscConfig+0x8b2>
 8001d16:	4b25      	ldr	r3, [pc, #148]	; (8001dac <HAL_RCC_OscConfig+0x930>)
 8001d18:	6a1b      	ldr	r3, [r3, #32]
 8001d1a:	4a24      	ldr	r2, [pc, #144]	; (8001dac <HAL_RCC_OscConfig+0x930>)
 8001d1c:	f023 0301 	bic.w	r3, r3, #1
 8001d20:	6213      	str	r3, [r2, #32]
 8001d22:	4b22      	ldr	r3, [pc, #136]	; (8001dac <HAL_RCC_OscConfig+0x930>)
 8001d24:	6a1b      	ldr	r3, [r3, #32]
 8001d26:	4a21      	ldr	r2, [pc, #132]	; (8001dac <HAL_RCC_OscConfig+0x930>)
 8001d28:	f023 0304 	bic.w	r3, r3, #4
 8001d2c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d2e:	1d3b      	adds	r3, r7, #4
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d06b      	beq.n	8001e10 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d38:	f7ff f902 	bl	8000f40 <HAL_GetTick>
 8001d3c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d40:	e00b      	b.n	8001d5a <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d42:	f7ff f8fd 	bl	8000f40 <HAL_GetTick>
 8001d46:	4602      	mov	r2, r0
 8001d48:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d901      	bls.n	8001d5a <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8001d56:	2303      	movs	r3, #3
 8001d58:	e291      	b.n	800227e <HAL_RCC_OscConfig+0xe02>
 8001d5a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001d5e:	2202      	movs	r2, #2
 8001d60:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d62:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	fa93 f2a3 	rbit	r2, r3
 8001d6c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001d70:	601a      	str	r2, [r3, #0]
 8001d72:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001d76:	2202      	movs	r2, #2
 8001d78:	601a      	str	r2, [r3, #0]
 8001d7a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	fa93 f2a3 	rbit	r2, r3
 8001d84:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001d88:	601a      	str	r2, [r3, #0]
  return result;
 8001d8a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001d8e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d90:	fab3 f383 	clz	r3, r3
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	095b      	lsrs	r3, r3, #5
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	f043 0302 	orr.w	r3, r3, #2
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d109      	bne.n	8001db8 <HAL_RCC_OscConfig+0x93c>
 8001da4:	4b01      	ldr	r3, [pc, #4]	; (8001dac <HAL_RCC_OscConfig+0x930>)
 8001da6:	6a1b      	ldr	r3, [r3, #32]
 8001da8:	e014      	b.n	8001dd4 <HAL_RCC_OscConfig+0x958>
 8001daa:	bf00      	nop
 8001dac:	40021000 	.word	0x40021000
 8001db0:	10908120 	.word	0x10908120
 8001db4:	40007000 	.word	0x40007000
 8001db8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001dbc:	2202      	movs	r2, #2
 8001dbe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	fa93 f2a3 	rbit	r2, r3
 8001dca:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001dce:	601a      	str	r2, [r3, #0]
 8001dd0:	4bbb      	ldr	r3, [pc, #748]	; (80020c0 <HAL_RCC_OscConfig+0xc44>)
 8001dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001dd8:	2102      	movs	r1, #2
 8001dda:	6011      	str	r1, [r2, #0]
 8001ddc:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001de0:	6812      	ldr	r2, [r2, #0]
 8001de2:	fa92 f1a2 	rbit	r1, r2
 8001de6:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001dea:	6011      	str	r1, [r2, #0]
  return result;
 8001dec:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001df0:	6812      	ldr	r2, [r2, #0]
 8001df2:	fab2 f282 	clz	r2, r2
 8001df6:	b2d2      	uxtb	r2, r2
 8001df8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001dfc:	b2d2      	uxtb	r2, r2
 8001dfe:	f002 021f 	and.w	r2, r2, #31
 8001e02:	2101      	movs	r1, #1
 8001e04:	fa01 f202 	lsl.w	r2, r1, r2
 8001e08:	4013      	ands	r3, r2
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d099      	beq.n	8001d42 <HAL_RCC_OscConfig+0x8c6>
 8001e0e:	e063      	b.n	8001ed8 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e10:	f7ff f896 	bl	8000f40 <HAL_GetTick>
 8001e14:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e18:	e00b      	b.n	8001e32 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e1a:	f7ff f891 	bl	8000f40 <HAL_GetTick>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d901      	bls.n	8001e32 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e225      	b.n	800227e <HAL_RCC_OscConfig+0xe02>
 8001e32:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001e36:	2202      	movs	r2, #2
 8001e38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e3a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	fa93 f2a3 	rbit	r2, r3
 8001e44:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001e48:	601a      	str	r2, [r3, #0]
 8001e4a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001e4e:	2202      	movs	r2, #2
 8001e50:	601a      	str	r2, [r3, #0]
 8001e52:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	fa93 f2a3 	rbit	r2, r3
 8001e5c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001e60:	601a      	str	r2, [r3, #0]
  return result;
 8001e62:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001e66:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e68:	fab3 f383 	clz	r3, r3
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	095b      	lsrs	r3, r3, #5
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	f043 0302 	orr.w	r3, r3, #2
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d102      	bne.n	8001e82 <HAL_RCC_OscConfig+0xa06>
 8001e7c:	4b90      	ldr	r3, [pc, #576]	; (80020c0 <HAL_RCC_OscConfig+0xc44>)
 8001e7e:	6a1b      	ldr	r3, [r3, #32]
 8001e80:	e00d      	b.n	8001e9e <HAL_RCC_OscConfig+0xa22>
 8001e82:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001e86:	2202      	movs	r2, #2
 8001e88:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e8a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	fa93 f2a3 	rbit	r2, r3
 8001e94:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001e98:	601a      	str	r2, [r3, #0]
 8001e9a:	4b89      	ldr	r3, [pc, #548]	; (80020c0 <HAL_RCC_OscConfig+0xc44>)
 8001e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e9e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001ea2:	2102      	movs	r1, #2
 8001ea4:	6011      	str	r1, [r2, #0]
 8001ea6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001eaa:	6812      	ldr	r2, [r2, #0]
 8001eac:	fa92 f1a2 	rbit	r1, r2
 8001eb0:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001eb4:	6011      	str	r1, [r2, #0]
  return result;
 8001eb6:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001eba:	6812      	ldr	r2, [r2, #0]
 8001ebc:	fab2 f282 	clz	r2, r2
 8001ec0:	b2d2      	uxtb	r2, r2
 8001ec2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ec6:	b2d2      	uxtb	r2, r2
 8001ec8:	f002 021f 	and.w	r2, r2, #31
 8001ecc:	2101      	movs	r1, #1
 8001ece:	fa01 f202 	lsl.w	r2, r1, r2
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d1a0      	bne.n	8001e1a <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001ed8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d105      	bne.n	8001eec <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ee0:	4b77      	ldr	r3, [pc, #476]	; (80020c0 <HAL_RCC_OscConfig+0xc44>)
 8001ee2:	69db      	ldr	r3, [r3, #28]
 8001ee4:	4a76      	ldr	r2, [pc, #472]	; (80020c0 <HAL_RCC_OscConfig+0xc44>)
 8001ee6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001eea:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001eec:	1d3b      	adds	r3, r7, #4
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	69db      	ldr	r3, [r3, #28]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	f000 81c2 	beq.w	800227c <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ef8:	4b71      	ldr	r3, [pc, #452]	; (80020c0 <HAL_RCC_OscConfig+0xc44>)
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f003 030c 	and.w	r3, r3, #12
 8001f00:	2b08      	cmp	r3, #8
 8001f02:	f000 819c 	beq.w	800223e <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f06:	1d3b      	adds	r3, r7, #4
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	69db      	ldr	r3, [r3, #28]
 8001f0c:	2b02      	cmp	r3, #2
 8001f0e:	f040 8114 	bne.w	800213a <HAL_RCC_OscConfig+0xcbe>
 8001f12:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001f16:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001f1a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f1c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	fa93 f2a3 	rbit	r2, r3
 8001f26:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001f2a:	601a      	str	r2, [r3, #0]
  return result;
 8001f2c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001f30:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f32:	fab3 f383 	clz	r3, r3
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f3c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	461a      	mov	r2, r3
 8001f44:	2300      	movs	r3, #0
 8001f46:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f48:	f7fe fffa 	bl	8000f40 <HAL_GetTick>
 8001f4c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f50:	e009      	b.n	8001f66 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f52:	f7fe fff5 	bl	8000f40 <HAL_GetTick>
 8001f56:	4602      	mov	r2, r0
 8001f58:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d901      	bls.n	8001f66 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	e18b      	b.n	800227e <HAL_RCC_OscConfig+0xe02>
 8001f66:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001f6a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f6e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f70:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	fa93 f2a3 	rbit	r2, r3
 8001f7a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001f7e:	601a      	str	r2, [r3, #0]
  return result;
 8001f80:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001f84:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f86:	fab3 f383 	clz	r3, r3
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	095b      	lsrs	r3, r3, #5
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	f043 0301 	orr.w	r3, r3, #1
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d102      	bne.n	8001fa0 <HAL_RCC_OscConfig+0xb24>
 8001f9a:	4b49      	ldr	r3, [pc, #292]	; (80020c0 <HAL_RCC_OscConfig+0xc44>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	e01b      	b.n	8001fd8 <HAL_RCC_OscConfig+0xb5c>
 8001fa0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001fa4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fa8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001faa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	fa93 f2a3 	rbit	r2, r3
 8001fb4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001fb8:	601a      	str	r2, [r3, #0]
 8001fba:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001fbe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fc2:	601a      	str	r2, [r3, #0]
 8001fc4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	fa93 f2a3 	rbit	r2, r3
 8001fce:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001fd2:	601a      	str	r2, [r3, #0]
 8001fd4:	4b3a      	ldr	r3, [pc, #232]	; (80020c0 <HAL_RCC_OscConfig+0xc44>)
 8001fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001fdc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001fe0:	6011      	str	r1, [r2, #0]
 8001fe2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001fe6:	6812      	ldr	r2, [r2, #0]
 8001fe8:	fa92 f1a2 	rbit	r1, r2
 8001fec:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001ff0:	6011      	str	r1, [r2, #0]
  return result;
 8001ff2:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001ff6:	6812      	ldr	r2, [r2, #0]
 8001ff8:	fab2 f282 	clz	r2, r2
 8001ffc:	b2d2      	uxtb	r2, r2
 8001ffe:	f042 0220 	orr.w	r2, r2, #32
 8002002:	b2d2      	uxtb	r2, r2
 8002004:	f002 021f 	and.w	r2, r2, #31
 8002008:	2101      	movs	r1, #1
 800200a:	fa01 f202 	lsl.w	r2, r1, r2
 800200e:	4013      	ands	r3, r2
 8002010:	2b00      	cmp	r3, #0
 8002012:	d19e      	bne.n	8001f52 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002014:	4b2a      	ldr	r3, [pc, #168]	; (80020c0 <HAL_RCC_OscConfig+0xc44>)
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800201c:	1d3b      	adds	r3, r7, #4
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002022:	1d3b      	adds	r3, r7, #4
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	6a1b      	ldr	r3, [r3, #32]
 8002028:	430b      	orrs	r3, r1
 800202a:	4925      	ldr	r1, [pc, #148]	; (80020c0 <HAL_RCC_OscConfig+0xc44>)
 800202c:	4313      	orrs	r3, r2
 800202e:	604b      	str	r3, [r1, #4]
 8002030:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002034:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002038:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800203a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	fa93 f2a3 	rbit	r2, r3
 8002044:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002048:	601a      	str	r2, [r3, #0]
  return result;
 800204a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800204e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002050:	fab3 f383 	clz	r3, r3
 8002054:	b2db      	uxtb	r3, r3
 8002056:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800205a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	461a      	mov	r2, r3
 8002062:	2301      	movs	r3, #1
 8002064:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002066:	f7fe ff6b 	bl	8000f40 <HAL_GetTick>
 800206a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800206e:	e009      	b.n	8002084 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002070:	f7fe ff66 	bl	8000f40 <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	2b02      	cmp	r3, #2
 800207e:	d901      	bls.n	8002084 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	e0fc      	b.n	800227e <HAL_RCC_OscConfig+0xe02>
 8002084:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002088:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800208c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800208e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	fa93 f2a3 	rbit	r2, r3
 8002098:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800209c:	601a      	str	r2, [r3, #0]
  return result;
 800209e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80020a2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020a4:	fab3 f383 	clz	r3, r3
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	095b      	lsrs	r3, r3, #5
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	f043 0301 	orr.w	r3, r3, #1
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d105      	bne.n	80020c4 <HAL_RCC_OscConfig+0xc48>
 80020b8:	4b01      	ldr	r3, [pc, #4]	; (80020c0 <HAL_RCC_OscConfig+0xc44>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	e01e      	b.n	80020fc <HAL_RCC_OscConfig+0xc80>
 80020be:	bf00      	nop
 80020c0:	40021000 	.word	0x40021000
 80020c4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80020c8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ce:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	fa93 f2a3 	rbit	r2, r3
 80020d8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80020dc:	601a      	str	r2, [r3, #0]
 80020de:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80020e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020e6:	601a      	str	r2, [r3, #0]
 80020e8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	fa93 f2a3 	rbit	r2, r3
 80020f2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80020f6:	601a      	str	r2, [r3, #0]
 80020f8:	4b63      	ldr	r3, [pc, #396]	; (8002288 <HAL_RCC_OscConfig+0xe0c>)
 80020fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020fc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002100:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002104:	6011      	str	r1, [r2, #0]
 8002106:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800210a:	6812      	ldr	r2, [r2, #0]
 800210c:	fa92 f1a2 	rbit	r1, r2
 8002110:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002114:	6011      	str	r1, [r2, #0]
  return result;
 8002116:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800211a:	6812      	ldr	r2, [r2, #0]
 800211c:	fab2 f282 	clz	r2, r2
 8002120:	b2d2      	uxtb	r2, r2
 8002122:	f042 0220 	orr.w	r2, r2, #32
 8002126:	b2d2      	uxtb	r2, r2
 8002128:	f002 021f 	and.w	r2, r2, #31
 800212c:	2101      	movs	r1, #1
 800212e:	fa01 f202 	lsl.w	r2, r1, r2
 8002132:	4013      	ands	r3, r2
 8002134:	2b00      	cmp	r3, #0
 8002136:	d09b      	beq.n	8002070 <HAL_RCC_OscConfig+0xbf4>
 8002138:	e0a0      	b.n	800227c <HAL_RCC_OscConfig+0xe00>
 800213a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800213e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002142:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002144:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	fa93 f2a3 	rbit	r2, r3
 800214e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002152:	601a      	str	r2, [r3, #0]
  return result;
 8002154:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002158:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800215a:	fab3 f383 	clz	r3, r3
 800215e:	b2db      	uxtb	r3, r3
 8002160:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002164:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	461a      	mov	r2, r3
 800216c:	2300      	movs	r3, #0
 800216e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002170:	f7fe fee6 	bl	8000f40 <HAL_GetTick>
 8002174:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002178:	e009      	b.n	800218e <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800217a:	f7fe fee1 	bl	8000f40 <HAL_GetTick>
 800217e:	4602      	mov	r2, r0
 8002180:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	2b02      	cmp	r3, #2
 8002188:	d901      	bls.n	800218e <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	e077      	b.n	800227e <HAL_RCC_OscConfig+0xe02>
 800218e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002192:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002196:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002198:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	fa93 f2a3 	rbit	r2, r3
 80021a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021a6:	601a      	str	r2, [r3, #0]
  return result;
 80021a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021ac:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021ae:	fab3 f383 	clz	r3, r3
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	095b      	lsrs	r3, r3, #5
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	f043 0301 	orr.w	r3, r3, #1
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d102      	bne.n	80021c8 <HAL_RCC_OscConfig+0xd4c>
 80021c2:	4b31      	ldr	r3, [pc, #196]	; (8002288 <HAL_RCC_OscConfig+0xe0c>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	e01b      	b.n	8002200 <HAL_RCC_OscConfig+0xd84>
 80021c8:	f107 0320 	add.w	r3, r7, #32
 80021cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d2:	f107 0320 	add.w	r3, r7, #32
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	fa93 f2a3 	rbit	r2, r3
 80021dc:	f107 031c 	add.w	r3, r7, #28
 80021e0:	601a      	str	r2, [r3, #0]
 80021e2:	f107 0318 	add.w	r3, r7, #24
 80021e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021ea:	601a      	str	r2, [r3, #0]
 80021ec:	f107 0318 	add.w	r3, r7, #24
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	fa93 f2a3 	rbit	r2, r3
 80021f6:	f107 0314 	add.w	r3, r7, #20
 80021fa:	601a      	str	r2, [r3, #0]
 80021fc:	4b22      	ldr	r3, [pc, #136]	; (8002288 <HAL_RCC_OscConfig+0xe0c>)
 80021fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002200:	f107 0210 	add.w	r2, r7, #16
 8002204:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002208:	6011      	str	r1, [r2, #0]
 800220a:	f107 0210 	add.w	r2, r7, #16
 800220e:	6812      	ldr	r2, [r2, #0]
 8002210:	fa92 f1a2 	rbit	r1, r2
 8002214:	f107 020c 	add.w	r2, r7, #12
 8002218:	6011      	str	r1, [r2, #0]
  return result;
 800221a:	f107 020c 	add.w	r2, r7, #12
 800221e:	6812      	ldr	r2, [r2, #0]
 8002220:	fab2 f282 	clz	r2, r2
 8002224:	b2d2      	uxtb	r2, r2
 8002226:	f042 0220 	orr.w	r2, r2, #32
 800222a:	b2d2      	uxtb	r2, r2
 800222c:	f002 021f 	and.w	r2, r2, #31
 8002230:	2101      	movs	r1, #1
 8002232:	fa01 f202 	lsl.w	r2, r1, r2
 8002236:	4013      	ands	r3, r2
 8002238:	2b00      	cmp	r3, #0
 800223a:	d19e      	bne.n	800217a <HAL_RCC_OscConfig+0xcfe>
 800223c:	e01e      	b.n	800227c <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800223e:	1d3b      	adds	r3, r7, #4
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	69db      	ldr	r3, [r3, #28]
 8002244:	2b01      	cmp	r3, #1
 8002246:	d101      	bne.n	800224c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e018      	b.n	800227e <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800224c:	4b0e      	ldr	r3, [pc, #56]	; (8002288 <HAL_RCC_OscConfig+0xe0c>)
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002254:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002258:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800225c:	1d3b      	adds	r3, r7, #4
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	6a1b      	ldr	r3, [r3, #32]
 8002262:	429a      	cmp	r2, r3
 8002264:	d108      	bne.n	8002278 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002266:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800226a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800226e:	1d3b      	adds	r3, r7, #4
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002274:	429a      	cmp	r2, r3
 8002276:	d001      	beq.n	800227c <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e000      	b.n	800227e <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 800227c:	2300      	movs	r3, #0
}
 800227e:	4618      	mov	r0, r3
 8002280:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	40021000 	.word	0x40021000

0800228c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b09e      	sub	sp, #120	; 0x78
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002296:	2300      	movs	r3, #0
 8002298:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d101      	bne.n	80022a4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	e162      	b.n	800256a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022a4:	4b90      	ldr	r3, [pc, #576]	; (80024e8 <HAL_RCC_ClockConfig+0x25c>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 0307 	and.w	r3, r3, #7
 80022ac:	683a      	ldr	r2, [r7, #0]
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d910      	bls.n	80022d4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022b2:	4b8d      	ldr	r3, [pc, #564]	; (80024e8 <HAL_RCC_ClockConfig+0x25c>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f023 0207 	bic.w	r2, r3, #7
 80022ba:	498b      	ldr	r1, [pc, #556]	; (80024e8 <HAL_RCC_ClockConfig+0x25c>)
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	4313      	orrs	r3, r2
 80022c0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022c2:	4b89      	ldr	r3, [pc, #548]	; (80024e8 <HAL_RCC_ClockConfig+0x25c>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0307 	and.w	r3, r3, #7
 80022ca:	683a      	ldr	r2, [r7, #0]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d001      	beq.n	80022d4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e14a      	b.n	800256a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0302 	and.w	r3, r3, #2
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d008      	beq.n	80022f2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022e0:	4b82      	ldr	r3, [pc, #520]	; (80024ec <HAL_RCC_ClockConfig+0x260>)
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	497f      	ldr	r1, [pc, #508]	; (80024ec <HAL_RCC_ClockConfig+0x260>)
 80022ee:	4313      	orrs	r3, r2
 80022f0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0301 	and.w	r3, r3, #1
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	f000 80dc 	beq.w	80024b8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	2b01      	cmp	r3, #1
 8002306:	d13c      	bne.n	8002382 <HAL_RCC_ClockConfig+0xf6>
 8002308:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800230c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800230e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002310:	fa93 f3a3 	rbit	r3, r3
 8002314:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002316:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002318:	fab3 f383 	clz	r3, r3
 800231c:	b2db      	uxtb	r3, r3
 800231e:	095b      	lsrs	r3, r3, #5
 8002320:	b2db      	uxtb	r3, r3
 8002322:	f043 0301 	orr.w	r3, r3, #1
 8002326:	b2db      	uxtb	r3, r3
 8002328:	2b01      	cmp	r3, #1
 800232a:	d102      	bne.n	8002332 <HAL_RCC_ClockConfig+0xa6>
 800232c:	4b6f      	ldr	r3, [pc, #444]	; (80024ec <HAL_RCC_ClockConfig+0x260>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	e00f      	b.n	8002352 <HAL_RCC_ClockConfig+0xc6>
 8002332:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002336:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002338:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800233a:	fa93 f3a3 	rbit	r3, r3
 800233e:	667b      	str	r3, [r7, #100]	; 0x64
 8002340:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002344:	663b      	str	r3, [r7, #96]	; 0x60
 8002346:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002348:	fa93 f3a3 	rbit	r3, r3
 800234c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800234e:	4b67      	ldr	r3, [pc, #412]	; (80024ec <HAL_RCC_ClockConfig+0x260>)
 8002350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002352:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002356:	65ba      	str	r2, [r7, #88]	; 0x58
 8002358:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800235a:	fa92 f2a2 	rbit	r2, r2
 800235e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002360:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002362:	fab2 f282 	clz	r2, r2
 8002366:	b2d2      	uxtb	r2, r2
 8002368:	f042 0220 	orr.w	r2, r2, #32
 800236c:	b2d2      	uxtb	r2, r2
 800236e:	f002 021f 	and.w	r2, r2, #31
 8002372:	2101      	movs	r1, #1
 8002374:	fa01 f202 	lsl.w	r2, r1, r2
 8002378:	4013      	ands	r3, r2
 800237a:	2b00      	cmp	r3, #0
 800237c:	d17b      	bne.n	8002476 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e0f3      	b.n	800256a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	2b02      	cmp	r3, #2
 8002388:	d13c      	bne.n	8002404 <HAL_RCC_ClockConfig+0x178>
 800238a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800238e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002390:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002392:	fa93 f3a3 	rbit	r3, r3
 8002396:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002398:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800239a:	fab3 f383 	clz	r3, r3
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	095b      	lsrs	r3, r3, #5
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	f043 0301 	orr.w	r3, r3, #1
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d102      	bne.n	80023b4 <HAL_RCC_ClockConfig+0x128>
 80023ae:	4b4f      	ldr	r3, [pc, #316]	; (80024ec <HAL_RCC_ClockConfig+0x260>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	e00f      	b.n	80023d4 <HAL_RCC_ClockConfig+0x148>
 80023b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023b8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023bc:	fa93 f3a3 	rbit	r3, r3
 80023c0:	647b      	str	r3, [r7, #68]	; 0x44
 80023c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023c6:	643b      	str	r3, [r7, #64]	; 0x40
 80023c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023ca:	fa93 f3a3 	rbit	r3, r3
 80023ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023d0:	4b46      	ldr	r3, [pc, #280]	; (80024ec <HAL_RCC_ClockConfig+0x260>)
 80023d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023d8:	63ba      	str	r2, [r7, #56]	; 0x38
 80023da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80023dc:	fa92 f2a2 	rbit	r2, r2
 80023e0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80023e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80023e4:	fab2 f282 	clz	r2, r2
 80023e8:	b2d2      	uxtb	r2, r2
 80023ea:	f042 0220 	orr.w	r2, r2, #32
 80023ee:	b2d2      	uxtb	r2, r2
 80023f0:	f002 021f 	and.w	r2, r2, #31
 80023f4:	2101      	movs	r1, #1
 80023f6:	fa01 f202 	lsl.w	r2, r1, r2
 80023fa:	4013      	ands	r3, r2
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d13a      	bne.n	8002476 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e0b2      	b.n	800256a <HAL_RCC_ClockConfig+0x2de>
 8002404:	2302      	movs	r3, #2
 8002406:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800240a:	fa93 f3a3 	rbit	r3, r3
 800240e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002412:	fab3 f383 	clz	r3, r3
 8002416:	b2db      	uxtb	r3, r3
 8002418:	095b      	lsrs	r3, r3, #5
 800241a:	b2db      	uxtb	r3, r3
 800241c:	f043 0301 	orr.w	r3, r3, #1
 8002420:	b2db      	uxtb	r3, r3
 8002422:	2b01      	cmp	r3, #1
 8002424:	d102      	bne.n	800242c <HAL_RCC_ClockConfig+0x1a0>
 8002426:	4b31      	ldr	r3, [pc, #196]	; (80024ec <HAL_RCC_ClockConfig+0x260>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	e00d      	b.n	8002448 <HAL_RCC_ClockConfig+0x1bc>
 800242c:	2302      	movs	r3, #2
 800242e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002432:	fa93 f3a3 	rbit	r3, r3
 8002436:	627b      	str	r3, [r7, #36]	; 0x24
 8002438:	2302      	movs	r3, #2
 800243a:	623b      	str	r3, [r7, #32]
 800243c:	6a3b      	ldr	r3, [r7, #32]
 800243e:	fa93 f3a3 	rbit	r3, r3
 8002442:	61fb      	str	r3, [r7, #28]
 8002444:	4b29      	ldr	r3, [pc, #164]	; (80024ec <HAL_RCC_ClockConfig+0x260>)
 8002446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002448:	2202      	movs	r2, #2
 800244a:	61ba      	str	r2, [r7, #24]
 800244c:	69ba      	ldr	r2, [r7, #24]
 800244e:	fa92 f2a2 	rbit	r2, r2
 8002452:	617a      	str	r2, [r7, #20]
  return result;
 8002454:	697a      	ldr	r2, [r7, #20]
 8002456:	fab2 f282 	clz	r2, r2
 800245a:	b2d2      	uxtb	r2, r2
 800245c:	f042 0220 	orr.w	r2, r2, #32
 8002460:	b2d2      	uxtb	r2, r2
 8002462:	f002 021f 	and.w	r2, r2, #31
 8002466:	2101      	movs	r1, #1
 8002468:	fa01 f202 	lsl.w	r2, r1, r2
 800246c:	4013      	ands	r3, r2
 800246e:	2b00      	cmp	r3, #0
 8002470:	d101      	bne.n	8002476 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e079      	b.n	800256a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002476:	4b1d      	ldr	r3, [pc, #116]	; (80024ec <HAL_RCC_ClockConfig+0x260>)
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	f023 0203 	bic.w	r2, r3, #3
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	491a      	ldr	r1, [pc, #104]	; (80024ec <HAL_RCC_ClockConfig+0x260>)
 8002484:	4313      	orrs	r3, r2
 8002486:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002488:	f7fe fd5a 	bl	8000f40 <HAL_GetTick>
 800248c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800248e:	e00a      	b.n	80024a6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002490:	f7fe fd56 	bl	8000f40 <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	f241 3288 	movw	r2, #5000	; 0x1388
 800249e:	4293      	cmp	r3, r2
 80024a0:	d901      	bls.n	80024a6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e061      	b.n	800256a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024a6:	4b11      	ldr	r3, [pc, #68]	; (80024ec <HAL_RCC_ClockConfig+0x260>)
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	f003 020c 	and.w	r2, r3, #12
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d1eb      	bne.n	8002490 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024b8:	4b0b      	ldr	r3, [pc, #44]	; (80024e8 <HAL_RCC_ClockConfig+0x25c>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0307 	and.w	r3, r3, #7
 80024c0:	683a      	ldr	r2, [r7, #0]
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d214      	bcs.n	80024f0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024c6:	4b08      	ldr	r3, [pc, #32]	; (80024e8 <HAL_RCC_ClockConfig+0x25c>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f023 0207 	bic.w	r2, r3, #7
 80024ce:	4906      	ldr	r1, [pc, #24]	; (80024e8 <HAL_RCC_ClockConfig+0x25c>)
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024d6:	4b04      	ldr	r3, [pc, #16]	; (80024e8 <HAL_RCC_ClockConfig+0x25c>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0307 	and.w	r3, r3, #7
 80024de:	683a      	ldr	r2, [r7, #0]
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d005      	beq.n	80024f0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e040      	b.n	800256a <HAL_RCC_ClockConfig+0x2de>
 80024e8:	40022000 	.word	0x40022000
 80024ec:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0304 	and.w	r3, r3, #4
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d008      	beq.n	800250e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024fc:	4b1d      	ldr	r3, [pc, #116]	; (8002574 <HAL_RCC_ClockConfig+0x2e8>)
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	491a      	ldr	r1, [pc, #104]	; (8002574 <HAL_RCC_ClockConfig+0x2e8>)
 800250a:	4313      	orrs	r3, r2
 800250c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0308 	and.w	r3, r3, #8
 8002516:	2b00      	cmp	r3, #0
 8002518:	d009      	beq.n	800252e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800251a:	4b16      	ldr	r3, [pc, #88]	; (8002574 <HAL_RCC_ClockConfig+0x2e8>)
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	691b      	ldr	r3, [r3, #16]
 8002526:	00db      	lsls	r3, r3, #3
 8002528:	4912      	ldr	r1, [pc, #72]	; (8002574 <HAL_RCC_ClockConfig+0x2e8>)
 800252a:	4313      	orrs	r3, r2
 800252c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800252e:	f000 f829 	bl	8002584 <HAL_RCC_GetSysClockFreq>
 8002532:	4601      	mov	r1, r0
 8002534:	4b0f      	ldr	r3, [pc, #60]	; (8002574 <HAL_RCC_ClockConfig+0x2e8>)
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800253c:	22f0      	movs	r2, #240	; 0xf0
 800253e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002540:	693a      	ldr	r2, [r7, #16]
 8002542:	fa92 f2a2 	rbit	r2, r2
 8002546:	60fa      	str	r2, [r7, #12]
  return result;
 8002548:	68fa      	ldr	r2, [r7, #12]
 800254a:	fab2 f282 	clz	r2, r2
 800254e:	b2d2      	uxtb	r2, r2
 8002550:	40d3      	lsrs	r3, r2
 8002552:	4a09      	ldr	r2, [pc, #36]	; (8002578 <HAL_RCC_ClockConfig+0x2ec>)
 8002554:	5cd3      	ldrb	r3, [r2, r3]
 8002556:	fa21 f303 	lsr.w	r3, r1, r3
 800255a:	4a08      	ldr	r2, [pc, #32]	; (800257c <HAL_RCC_ClockConfig+0x2f0>)
 800255c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800255e:	4b08      	ldr	r3, [pc, #32]	; (8002580 <HAL_RCC_ClockConfig+0x2f4>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4618      	mov	r0, r3
 8002564:	f7fe fca8 	bl	8000eb8 <HAL_InitTick>
  
  return HAL_OK;
 8002568:	2300      	movs	r3, #0
}
 800256a:	4618      	mov	r0, r3
 800256c:	3778      	adds	r7, #120	; 0x78
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	40021000 	.word	0x40021000
 8002578:	08003c04 	.word	0x08003c04
 800257c:	20000008 	.word	0x20000008
 8002580:	2000000c 	.word	0x2000000c

08002584 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002584:	b480      	push	{r7}
 8002586:	b08b      	sub	sp, #44	; 0x2c
 8002588:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800258a:	2300      	movs	r3, #0
 800258c:	61fb      	str	r3, [r7, #28]
 800258e:	2300      	movs	r3, #0
 8002590:	61bb      	str	r3, [r7, #24]
 8002592:	2300      	movs	r3, #0
 8002594:	627b      	str	r3, [r7, #36]	; 0x24
 8002596:	2300      	movs	r3, #0
 8002598:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800259a:	2300      	movs	r3, #0
 800259c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800259e:	4b29      	ldr	r3, [pc, #164]	; (8002644 <HAL_RCC_GetSysClockFreq+0xc0>)
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	f003 030c 	and.w	r3, r3, #12
 80025aa:	2b04      	cmp	r3, #4
 80025ac:	d002      	beq.n	80025b4 <HAL_RCC_GetSysClockFreq+0x30>
 80025ae:	2b08      	cmp	r3, #8
 80025b0:	d003      	beq.n	80025ba <HAL_RCC_GetSysClockFreq+0x36>
 80025b2:	e03c      	b.n	800262e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80025b4:	4b24      	ldr	r3, [pc, #144]	; (8002648 <HAL_RCC_GetSysClockFreq+0xc4>)
 80025b6:	623b      	str	r3, [r7, #32]
      break;
 80025b8:	e03c      	b.n	8002634 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80025c0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80025c4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c6:	68ba      	ldr	r2, [r7, #8]
 80025c8:	fa92 f2a2 	rbit	r2, r2
 80025cc:	607a      	str	r2, [r7, #4]
  return result;
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	fab2 f282 	clz	r2, r2
 80025d4:	b2d2      	uxtb	r2, r2
 80025d6:	40d3      	lsrs	r3, r2
 80025d8:	4a1c      	ldr	r2, [pc, #112]	; (800264c <HAL_RCC_GetSysClockFreq+0xc8>)
 80025da:	5cd3      	ldrb	r3, [r2, r3]
 80025dc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80025de:	4b19      	ldr	r3, [pc, #100]	; (8002644 <HAL_RCC_GetSysClockFreq+0xc0>)
 80025e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e2:	f003 030f 	and.w	r3, r3, #15
 80025e6:	220f      	movs	r2, #15
 80025e8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ea:	693a      	ldr	r2, [r7, #16]
 80025ec:	fa92 f2a2 	rbit	r2, r2
 80025f0:	60fa      	str	r2, [r7, #12]
  return result;
 80025f2:	68fa      	ldr	r2, [r7, #12]
 80025f4:	fab2 f282 	clz	r2, r2
 80025f8:	b2d2      	uxtb	r2, r2
 80025fa:	40d3      	lsrs	r3, r2
 80025fc:	4a14      	ldr	r2, [pc, #80]	; (8002650 <HAL_RCC_GetSysClockFreq+0xcc>)
 80025fe:	5cd3      	ldrb	r3, [r2, r3]
 8002600:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002608:	2b00      	cmp	r3, #0
 800260a:	d008      	beq.n	800261e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800260c:	4a0e      	ldr	r2, [pc, #56]	; (8002648 <HAL_RCC_GetSysClockFreq+0xc4>)
 800260e:	69bb      	ldr	r3, [r7, #24]
 8002610:	fbb2 f2f3 	udiv	r2, r2, r3
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	fb02 f303 	mul.w	r3, r2, r3
 800261a:	627b      	str	r3, [r7, #36]	; 0x24
 800261c:	e004      	b.n	8002628 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	4a0c      	ldr	r2, [pc, #48]	; (8002654 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002622:	fb02 f303 	mul.w	r3, r2, r3
 8002626:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262a:	623b      	str	r3, [r7, #32]
      break;
 800262c:	e002      	b.n	8002634 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800262e:	4b06      	ldr	r3, [pc, #24]	; (8002648 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002630:	623b      	str	r3, [r7, #32]
      break;
 8002632:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002634:	6a3b      	ldr	r3, [r7, #32]
}
 8002636:	4618      	mov	r0, r3
 8002638:	372c      	adds	r7, #44	; 0x2c
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
 8002644:	40021000 	.word	0x40021000
 8002648:	007a1200 	.word	0x007a1200
 800264c:	08003c1c 	.word	0x08003c1c
 8002650:	08003c2c 	.word	0x08003c2c
 8002654:	003d0900 	.word	0x003d0900

08002658 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002658:	b480      	push	{r7}
 800265a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800265c:	4b03      	ldr	r3, [pc, #12]	; (800266c <HAL_RCC_GetHCLKFreq+0x14>)
 800265e:	681b      	ldr	r3, [r3, #0]
}
 8002660:	4618      	mov	r0, r3
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	20000008 	.word	0x20000008

08002670 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002676:	f7ff ffef 	bl	8002658 <HAL_RCC_GetHCLKFreq>
 800267a:	4601      	mov	r1, r0
 800267c:	4b0b      	ldr	r3, [pc, #44]	; (80026ac <HAL_RCC_GetPCLK1Freq+0x3c>)
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002684:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002688:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	fa92 f2a2 	rbit	r2, r2
 8002690:	603a      	str	r2, [r7, #0]
  return result;
 8002692:	683a      	ldr	r2, [r7, #0]
 8002694:	fab2 f282 	clz	r2, r2
 8002698:	b2d2      	uxtb	r2, r2
 800269a:	40d3      	lsrs	r3, r2
 800269c:	4a04      	ldr	r2, [pc, #16]	; (80026b0 <HAL_RCC_GetPCLK1Freq+0x40>)
 800269e:	5cd3      	ldrb	r3, [r2, r3]
 80026a0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80026a4:	4618      	mov	r0, r3
 80026a6:	3708      	adds	r7, #8
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	40021000 	.word	0x40021000
 80026b0:	08003c14 	.word	0x08003c14

080026b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80026ba:	f7ff ffcd 	bl	8002658 <HAL_RCC_GetHCLKFreq>
 80026be:	4601      	mov	r1, r0
 80026c0:	4b0b      	ldr	r3, [pc, #44]	; (80026f0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80026c8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80026cc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	fa92 f2a2 	rbit	r2, r2
 80026d4:	603a      	str	r2, [r7, #0]
  return result;
 80026d6:	683a      	ldr	r2, [r7, #0]
 80026d8:	fab2 f282 	clz	r2, r2
 80026dc:	b2d2      	uxtb	r2, r2
 80026de:	40d3      	lsrs	r3, r2
 80026e0:	4a04      	ldr	r2, [pc, #16]	; (80026f4 <HAL_RCC_GetPCLK2Freq+0x40>)
 80026e2:	5cd3      	ldrb	r3, [r2, r3]
 80026e4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80026e8:	4618      	mov	r0, r3
 80026ea:	3708      	adds	r7, #8
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	40021000 	.word	0x40021000
 80026f4:	08003c14 	.word	0x08003c14

080026f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d101      	bne.n	800270a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e09d      	b.n	8002846 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270e:	2b00      	cmp	r3, #0
 8002710:	d108      	bne.n	8002724 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800271a:	d009      	beq.n	8002730 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2200      	movs	r2, #0
 8002720:	61da      	str	r2, [r3, #28]
 8002722:	e005      	b.n	8002730 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2200      	movs	r2, #0
 8002728:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2200      	movs	r2, #0
 800272e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2200      	movs	r2, #0
 8002734:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800273c:	b2db      	uxtb	r3, r3
 800273e:	2b00      	cmp	r3, #0
 8002740:	d106      	bne.n	8002750 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f7fd feba 	bl	80004c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2202      	movs	r2, #2
 8002754:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002766:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002770:	d902      	bls.n	8002778 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002772:	2300      	movs	r3, #0
 8002774:	60fb      	str	r3, [r7, #12]
 8002776:	e002      	b.n	800277e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002778:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800277c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002786:	d007      	beq.n	8002798 <HAL_SPI_Init+0xa0>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002790:	d002      	beq.n	8002798 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80027a8:	431a      	orrs	r2, r3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	691b      	ldr	r3, [r3, #16]
 80027ae:	f003 0302 	and.w	r3, r3, #2
 80027b2:	431a      	orrs	r2, r3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	695b      	ldr	r3, [r3, #20]
 80027b8:	f003 0301 	and.w	r3, r3, #1
 80027bc:	431a      	orrs	r2, r3
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	699b      	ldr	r3, [r3, #24]
 80027c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027c6:	431a      	orrs	r2, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	69db      	ldr	r3, [r3, #28]
 80027cc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80027d0:	431a      	orrs	r2, r3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6a1b      	ldr	r3, [r3, #32]
 80027d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027da:	ea42 0103 	orr.w	r1, r2, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	430a      	orrs	r2, r1
 80027ec:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	699b      	ldr	r3, [r3, #24]
 80027f2:	0c1b      	lsrs	r3, r3, #16
 80027f4:	f003 0204 	and.w	r2, r3, #4
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fc:	f003 0310 	and.w	r3, r3, #16
 8002800:	431a      	orrs	r2, r3
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002806:	f003 0308 	and.w	r3, r3, #8
 800280a:	431a      	orrs	r2, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002814:	ea42 0103 	orr.w	r1, r2, r3
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	430a      	orrs	r2, r1
 8002824:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	69da      	ldr	r2, [r3, #28]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002834:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2201      	movs	r2, #1
 8002840:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002844:	2300      	movs	r3, #0
}
 8002846:	4618      	mov	r0, r3
 8002848:	3710      	adds	r7, #16
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}

0800284e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800284e:	b580      	push	{r7, lr}
 8002850:	b088      	sub	sp, #32
 8002852:	af00      	add	r7, sp, #0
 8002854:	60f8      	str	r0, [r7, #12]
 8002856:	60b9      	str	r1, [r7, #8]
 8002858:	603b      	str	r3, [r7, #0]
 800285a:	4613      	mov	r3, r2
 800285c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800285e:	2300      	movs	r3, #0
 8002860:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002868:	2b01      	cmp	r3, #1
 800286a:	d101      	bne.n	8002870 <HAL_SPI_Transmit+0x22>
 800286c:	2302      	movs	r3, #2
 800286e:	e158      	b.n	8002b22 <HAL_SPI_Transmit+0x2d4>
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002878:	f7fe fb62 	bl	8000f40 <HAL_GetTick>
 800287c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800287e:	88fb      	ldrh	r3, [r7, #6]
 8002880:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002888:	b2db      	uxtb	r3, r3
 800288a:	2b01      	cmp	r3, #1
 800288c:	d002      	beq.n	8002894 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800288e:	2302      	movs	r3, #2
 8002890:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002892:	e13d      	b.n	8002b10 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d002      	beq.n	80028a0 <HAL_SPI_Transmit+0x52>
 800289a:	88fb      	ldrh	r3, [r7, #6]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d102      	bne.n	80028a6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80028a4:	e134      	b.n	8002b10 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2203      	movs	r2, #3
 80028aa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2200      	movs	r2, #0
 80028b2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	68ba      	ldr	r2, [r7, #8]
 80028b8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	88fa      	ldrh	r2, [r7, #6]
 80028be:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	88fa      	ldrh	r2, [r7, #6]
 80028c4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2200      	movs	r2, #0
 80028ca:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2200      	movs	r2, #0
 80028d0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2200      	movs	r2, #0
 80028d8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2200      	movs	r2, #0
 80028e0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2200      	movs	r2, #0
 80028e6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028f0:	d10f      	bne.n	8002912 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002900:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002910:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800291c:	2b40      	cmp	r3, #64	; 0x40
 800291e:	d007      	beq.n	8002930 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800292e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002938:	d94b      	bls.n	80029d2 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d002      	beq.n	8002948 <HAL_SPI_Transmit+0xfa>
 8002942:	8afb      	ldrh	r3, [r7, #22]
 8002944:	2b01      	cmp	r3, #1
 8002946:	d13e      	bne.n	80029c6 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800294c:	881a      	ldrh	r2, [r3, #0]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002958:	1c9a      	adds	r2, r3, #2
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002962:	b29b      	uxth	r3, r3
 8002964:	3b01      	subs	r3, #1
 8002966:	b29a      	uxth	r2, r3
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800296c:	e02b      	b.n	80029c6 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	f003 0302 	and.w	r3, r3, #2
 8002978:	2b02      	cmp	r3, #2
 800297a:	d112      	bne.n	80029a2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002980:	881a      	ldrh	r2, [r3, #0]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800298c:	1c9a      	adds	r2, r3, #2
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002996:	b29b      	uxth	r3, r3
 8002998:	3b01      	subs	r3, #1
 800299a:	b29a      	uxth	r2, r3
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	87da      	strh	r2, [r3, #62]	; 0x3e
 80029a0:	e011      	b.n	80029c6 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80029a2:	f7fe facd 	bl	8000f40 <HAL_GetTick>
 80029a6:	4602      	mov	r2, r0
 80029a8:	69bb      	ldr	r3, [r7, #24]
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	683a      	ldr	r2, [r7, #0]
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d803      	bhi.n	80029ba <HAL_SPI_Transmit+0x16c>
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029b8:	d102      	bne.n	80029c0 <HAL_SPI_Transmit+0x172>
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d102      	bne.n	80029c6 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80029c0:	2303      	movs	r3, #3
 80029c2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80029c4:	e0a4      	b.n	8002b10 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029ca:	b29b      	uxth	r3, r3
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d1ce      	bne.n	800296e <HAL_SPI_Transmit+0x120>
 80029d0:	e07c      	b.n	8002acc <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d002      	beq.n	80029e0 <HAL_SPI_Transmit+0x192>
 80029da:	8afb      	ldrh	r3, [r7, #22]
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d170      	bne.n	8002ac2 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d912      	bls.n	8002a10 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ee:	881a      	ldrh	r2, [r3, #0]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029fa:	1c9a      	adds	r2, r3, #2
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a04:	b29b      	uxth	r3, r3
 8002a06:	3b02      	subs	r3, #2
 8002a08:	b29a      	uxth	r2, r3
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002a0e:	e058      	b.n	8002ac2 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	330c      	adds	r3, #12
 8002a1a:	7812      	ldrb	r2, [r2, #0]
 8002a1c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a22:	1c5a      	adds	r2, r3, #1
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	3b01      	subs	r3, #1
 8002a30:	b29a      	uxth	r2, r3
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002a36:	e044      	b.n	8002ac2 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	f003 0302 	and.w	r3, r3, #2
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d12b      	bne.n	8002a9e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d912      	bls.n	8002a76 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a54:	881a      	ldrh	r2, [r3, #0]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a60:	1c9a      	adds	r2, r3, #2
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	3b02      	subs	r3, #2
 8002a6e:	b29a      	uxth	r2, r3
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002a74:	e025      	b.n	8002ac2 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	330c      	adds	r3, #12
 8002a80:	7812      	ldrb	r2, [r2, #0]
 8002a82:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a88:	1c5a      	adds	r2, r3, #1
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a92:	b29b      	uxth	r3, r3
 8002a94:	3b01      	subs	r3, #1
 8002a96:	b29a      	uxth	r2, r3
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002a9c:	e011      	b.n	8002ac2 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a9e:	f7fe fa4f 	bl	8000f40 <HAL_GetTick>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	69bb      	ldr	r3, [r7, #24]
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	683a      	ldr	r2, [r7, #0]
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d803      	bhi.n	8002ab6 <HAL_SPI_Transmit+0x268>
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ab4:	d102      	bne.n	8002abc <HAL_SPI_Transmit+0x26e>
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d102      	bne.n	8002ac2 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8002abc:	2303      	movs	r3, #3
 8002abe:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002ac0:	e026      	b.n	8002b10 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d1b5      	bne.n	8002a38 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002acc:	69ba      	ldr	r2, [r7, #24]
 8002ace:	6839      	ldr	r1, [r7, #0]
 8002ad0:	68f8      	ldr	r0, [r7, #12]
 8002ad2:	f000 fce3 	bl	800349c <SPI_EndRxTxTransaction>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d002      	beq.n	8002ae2 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2220      	movs	r2, #32
 8002ae0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d10a      	bne.n	8002b00 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002aea:	2300      	movs	r3, #0
 8002aec:	613b      	str	r3, [r7, #16]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	613b      	str	r3, [r7, #16]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	613b      	str	r3, [r7, #16]
 8002afe:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d002      	beq.n	8002b0e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	77fb      	strb	r3, [r7, #31]
 8002b0c:	e000      	b.n	8002b10 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8002b0e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2201      	movs	r2, #1
 8002b14:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002b20:	7ffb      	ldrb	r3, [r7, #31]
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3720      	adds	r7, #32
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}

08002b2a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b2a:	b580      	push	{r7, lr}
 8002b2c:	b088      	sub	sp, #32
 8002b2e:	af02      	add	r7, sp, #8
 8002b30:	60f8      	str	r0, [r7, #12]
 8002b32:	60b9      	str	r1, [r7, #8]
 8002b34:	603b      	str	r3, [r7, #0]
 8002b36:	4613      	mov	r3, r2
 8002b38:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b46:	d112      	bne.n	8002b6e <HAL_SPI_Receive+0x44>
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d10e      	bne.n	8002b6e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2204      	movs	r2, #4
 8002b54:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002b58:	88fa      	ldrh	r2, [r7, #6]
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	9300      	str	r3, [sp, #0]
 8002b5e:	4613      	mov	r3, r2
 8002b60:	68ba      	ldr	r2, [r7, #8]
 8002b62:	68b9      	ldr	r1, [r7, #8]
 8002b64:	68f8      	ldr	r0, [r7, #12]
 8002b66:	f000 f910 	bl	8002d8a <HAL_SPI_TransmitReceive>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	e109      	b.n	8002d82 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d101      	bne.n	8002b7c <HAL_SPI_Receive+0x52>
 8002b78:	2302      	movs	r3, #2
 8002b7a:	e102      	b.n	8002d82 <HAL_SPI_Receive+0x258>
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002b84:	f7fe f9dc 	bl	8000f40 <HAL_GetTick>
 8002b88:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d002      	beq.n	8002b9c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002b96:	2302      	movs	r3, #2
 8002b98:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002b9a:	e0e9      	b.n	8002d70 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d002      	beq.n	8002ba8 <HAL_SPI_Receive+0x7e>
 8002ba2:	88fb      	ldrh	r3, [r7, #6]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d102      	bne.n	8002bae <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002bac:	e0e0      	b.n	8002d70 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2204      	movs	r2, #4
 8002bb2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	68ba      	ldr	r2, [r7, #8]
 8002bc0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	88fa      	ldrh	r2, [r7, #6]
 8002bc6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	88fa      	ldrh	r2, [r7, #6]
 8002bce:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2200      	movs	r2, #0
 8002be2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2200      	movs	r2, #0
 8002be8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2200      	movs	r2, #0
 8002bee:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002bf8:	d908      	bls.n	8002c0c <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	685a      	ldr	r2, [r3, #4]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002c08:	605a      	str	r2, [r3, #4]
 8002c0a:	e007      	b.n	8002c1c <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	685a      	ldr	r2, [r3, #4]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002c1a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c24:	d10f      	bne.n	8002c46 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c34:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002c44:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c50:	2b40      	cmp	r3, #64	; 0x40
 8002c52:	d007      	beq.n	8002c64 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c62:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002c6c:	d867      	bhi.n	8002d3e <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002c6e:	e030      	b.n	8002cd2 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	f003 0301 	and.w	r3, r3, #1
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d117      	bne.n	8002cae <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f103 020c 	add.w	r2, r3, #12
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8a:	7812      	ldrb	r2, [r2, #0]
 8002c8c:	b2d2      	uxtb	r2, r2
 8002c8e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c94:	1c5a      	adds	r2, r3, #1
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	3b01      	subs	r3, #1
 8002ca4:	b29a      	uxth	r2, r3
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8002cac:	e011      	b.n	8002cd2 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002cae:	f7fe f947 	bl	8000f40 <HAL_GetTick>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	683a      	ldr	r2, [r7, #0]
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d803      	bhi.n	8002cc6 <HAL_SPI_Receive+0x19c>
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002cc4:	d102      	bne.n	8002ccc <HAL_SPI_Receive+0x1a2>
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d102      	bne.n	8002cd2 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002cd0:	e04e      	b.n	8002d70 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002cd8:	b29b      	uxth	r3, r3
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d1c8      	bne.n	8002c70 <HAL_SPI_Receive+0x146>
 8002cde:	e034      	b.n	8002d4a <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	f003 0301 	and.w	r3, r3, #1
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d115      	bne.n	8002d1a <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	68da      	ldr	r2, [r3, #12]
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf8:	b292      	uxth	r2, r2
 8002cfa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d00:	1c9a      	adds	r2, r3, #2
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	3b01      	subs	r3, #1
 8002d10:	b29a      	uxth	r2, r3
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8002d18:	e011      	b.n	8002d3e <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d1a:	f7fe f911 	bl	8000f40 <HAL_GetTick>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	683a      	ldr	r2, [r7, #0]
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d803      	bhi.n	8002d32 <HAL_SPI_Receive+0x208>
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d30:	d102      	bne.n	8002d38 <HAL_SPI_Receive+0x20e>
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d102      	bne.n	8002d3e <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002d3c:	e018      	b.n	8002d70 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d1ca      	bne.n	8002ce0 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d4a:	693a      	ldr	r2, [r7, #16]
 8002d4c:	6839      	ldr	r1, [r7, #0]
 8002d4e:	68f8      	ldr	r0, [r7, #12]
 8002d50:	f000 fb4c 	bl	80033ec <SPI_EndRxTransaction>
 8002d54:	4603      	mov	r3, r0
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d002      	beq.n	8002d60 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2220      	movs	r2, #32
 8002d5e:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d002      	beq.n	8002d6e <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	75fb      	strb	r3, [r7, #23]
 8002d6c:	e000      	b.n	8002d70 <HAL_SPI_Receive+0x246>
  }

error :
 8002d6e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002d80:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3718      	adds	r7, #24
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}

08002d8a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002d8a:	b580      	push	{r7, lr}
 8002d8c:	b08a      	sub	sp, #40	; 0x28
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	60f8      	str	r0, [r7, #12]
 8002d92:	60b9      	str	r1, [r7, #8]
 8002d94:	607a      	str	r2, [r7, #4]
 8002d96:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d101      	bne.n	8002db0 <HAL_SPI_TransmitReceive+0x26>
 8002dac:	2302      	movs	r3, #2
 8002dae:	e1fb      	b.n	80031a8 <HAL_SPI_TransmitReceive+0x41e>
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2201      	movs	r2, #1
 8002db4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002db8:	f7fe f8c2 	bl	8000f40 <HAL_GetTick>
 8002dbc:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002dc4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002dcc:	887b      	ldrh	r3, [r7, #2]
 8002dce:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8002dd0:	887b      	ldrh	r3, [r7, #2]
 8002dd2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002dd4:	7efb      	ldrb	r3, [r7, #27]
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d00e      	beq.n	8002df8 <HAL_SPI_TransmitReceive+0x6e>
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002de0:	d106      	bne.n	8002df0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d102      	bne.n	8002df0 <HAL_SPI_TransmitReceive+0x66>
 8002dea:	7efb      	ldrb	r3, [r7, #27]
 8002dec:	2b04      	cmp	r3, #4
 8002dee:	d003      	beq.n	8002df8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8002df0:	2302      	movs	r3, #2
 8002df2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002df6:	e1cd      	b.n	8003194 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d005      	beq.n	8002e0a <HAL_SPI_TransmitReceive+0x80>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d002      	beq.n	8002e0a <HAL_SPI_TransmitReceive+0x80>
 8002e04:	887b      	ldrh	r3, [r7, #2]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d103      	bne.n	8002e12 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002e10:	e1c0      	b.n	8003194 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	2b04      	cmp	r3, #4
 8002e1c:	d003      	beq.n	8002e26 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2205      	movs	r2, #5
 8002e22:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	887a      	ldrh	r2, [r7, #2]
 8002e36:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	887a      	ldrh	r2, [r7, #2]
 8002e3e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	68ba      	ldr	r2, [r7, #8]
 8002e46:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	887a      	ldrh	r2, [r7, #2]
 8002e4c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	887a      	ldrh	r2, [r7, #2]
 8002e52:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2200      	movs	r2, #0
 8002e58:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002e68:	d802      	bhi.n	8002e70 <HAL_SPI_TransmitReceive+0xe6>
 8002e6a:	8a3b      	ldrh	r3, [r7, #16]
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d908      	bls.n	8002e82 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	685a      	ldr	r2, [r3, #4]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002e7e:	605a      	str	r2, [r3, #4]
 8002e80:	e007      	b.n	8002e92 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	685a      	ldr	r2, [r3, #4]
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002e90:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e9c:	2b40      	cmp	r3, #64	; 0x40
 8002e9e:	d007      	beq.n	8002eb0 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002eae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002eb8:	d97c      	bls.n	8002fb4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d002      	beq.n	8002ec8 <HAL_SPI_TransmitReceive+0x13e>
 8002ec2:	8a7b      	ldrh	r3, [r7, #18]
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d169      	bne.n	8002f9c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ecc:	881a      	ldrh	r2, [r3, #0]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ed8:	1c9a      	adds	r2, r3, #2
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	3b01      	subs	r3, #1
 8002ee6:	b29a      	uxth	r2, r3
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002eec:	e056      	b.n	8002f9c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	f003 0302 	and.w	r3, r3, #2
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d11b      	bne.n	8002f34 <HAL_SPI_TransmitReceive+0x1aa>
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d016      	beq.n	8002f34 <HAL_SPI_TransmitReceive+0x1aa>
 8002f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d113      	bne.n	8002f34 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f10:	881a      	ldrh	r2, [r3, #0]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f1c:	1c9a      	adds	r2, r3, #2
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	3b01      	subs	r3, #1
 8002f2a:	b29a      	uxth	r2, r3
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002f30:	2300      	movs	r3, #0
 8002f32:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	f003 0301 	and.w	r3, r3, #1
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d11c      	bne.n	8002f7c <HAL_SPI_TransmitReceive+0x1f2>
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002f48:	b29b      	uxth	r3, r3
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d016      	beq.n	8002f7c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	68da      	ldr	r2, [r3, #12]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f58:	b292      	uxth	r2, r2
 8002f5a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f60:	1c9a      	adds	r2, r3, #2
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	3b01      	subs	r3, #1
 8002f70:	b29a      	uxth	r2, r3
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002f7c:	f7fd ffe0 	bl	8000f40 <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d807      	bhi.n	8002f9c <HAL_SPI_TransmitReceive+0x212>
 8002f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f92:	d003      	beq.n	8002f9c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8002f94:	2303      	movs	r3, #3
 8002f96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002f9a:	e0fb      	b.n	8003194 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fa0:	b29b      	uxth	r3, r3
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d1a3      	bne.n	8002eee <HAL_SPI_TransmitReceive+0x164>
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d19d      	bne.n	8002eee <HAL_SPI_TransmitReceive+0x164>
 8002fb2:	e0df      	b.n	8003174 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d003      	beq.n	8002fc4 <HAL_SPI_TransmitReceive+0x23a>
 8002fbc:	8a7b      	ldrh	r3, [r7, #18]
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	f040 80cb 	bne.w	800315a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fc8:	b29b      	uxth	r3, r3
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d912      	bls.n	8002ff4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fd2:	881a      	ldrh	r2, [r3, #0]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fde:	1c9a      	adds	r2, r3, #2
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	3b02      	subs	r3, #2
 8002fec:	b29a      	uxth	r2, r3
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002ff2:	e0b2      	b.n	800315a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	330c      	adds	r3, #12
 8002ffe:	7812      	ldrb	r2, [r2, #0]
 8003000:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003006:	1c5a      	adds	r2, r3, #1
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003010:	b29b      	uxth	r3, r3
 8003012:	3b01      	subs	r3, #1
 8003014:	b29a      	uxth	r2, r3
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800301a:	e09e      	b.n	800315a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f003 0302 	and.w	r3, r3, #2
 8003026:	2b02      	cmp	r3, #2
 8003028:	d134      	bne.n	8003094 <HAL_SPI_TransmitReceive+0x30a>
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800302e:	b29b      	uxth	r3, r3
 8003030:	2b00      	cmp	r3, #0
 8003032:	d02f      	beq.n	8003094 <HAL_SPI_TransmitReceive+0x30a>
 8003034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003036:	2b01      	cmp	r3, #1
 8003038:	d12c      	bne.n	8003094 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800303e:	b29b      	uxth	r3, r3
 8003040:	2b01      	cmp	r3, #1
 8003042:	d912      	bls.n	800306a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003048:	881a      	ldrh	r2, [r3, #0]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003054:	1c9a      	adds	r2, r3, #2
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800305e:	b29b      	uxth	r3, r3
 8003060:	3b02      	subs	r3, #2
 8003062:	b29a      	uxth	r2, r3
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003068:	e012      	b.n	8003090 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	330c      	adds	r3, #12
 8003074:	7812      	ldrb	r2, [r2, #0]
 8003076:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800307c:	1c5a      	adds	r2, r3, #1
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003086:	b29b      	uxth	r3, r3
 8003088:	3b01      	subs	r3, #1
 800308a:	b29a      	uxth	r2, r3
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003090:	2300      	movs	r3, #0
 8003092:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	f003 0301 	and.w	r3, r3, #1
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d148      	bne.n	8003134 <HAL_SPI_TransmitReceive+0x3aa>
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d042      	beq.n	8003134 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d923      	bls.n	8003102 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	68da      	ldr	r2, [r3, #12]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c4:	b292      	uxth	r2, r2
 80030c6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030cc:	1c9a      	adds	r2, r3, #2
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80030d8:	b29b      	uxth	r3, r3
 80030da:	3b02      	subs	r3, #2
 80030dc:	b29a      	uxth	r2, r3
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d81f      	bhi.n	8003130 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	685a      	ldr	r2, [r3, #4]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80030fe:	605a      	str	r2, [r3, #4]
 8003100:	e016      	b.n	8003130 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f103 020c 	add.w	r2, r3, #12
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310e:	7812      	ldrb	r2, [r2, #0]
 8003110:	b2d2      	uxtb	r2, r2
 8003112:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003118:	1c5a      	adds	r2, r3, #1
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003124:	b29b      	uxth	r3, r3
 8003126:	3b01      	subs	r3, #1
 8003128:	b29a      	uxth	r2, r3
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003130:	2301      	movs	r3, #1
 8003132:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003134:	f7fd ff04 	bl	8000f40 <HAL_GetTick>
 8003138:	4602      	mov	r2, r0
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003140:	429a      	cmp	r2, r3
 8003142:	d803      	bhi.n	800314c <HAL_SPI_TransmitReceive+0x3c2>
 8003144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003146:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800314a:	d102      	bne.n	8003152 <HAL_SPI_TransmitReceive+0x3c8>
 800314c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800314e:	2b00      	cmp	r3, #0
 8003150:	d103      	bne.n	800315a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003158:	e01c      	b.n	8003194 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800315e:	b29b      	uxth	r3, r3
 8003160:	2b00      	cmp	r3, #0
 8003162:	f47f af5b 	bne.w	800301c <HAL_SPI_TransmitReceive+0x292>
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800316c:	b29b      	uxth	r3, r3
 800316e:	2b00      	cmp	r3, #0
 8003170:	f47f af54 	bne.w	800301c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003174:	69fa      	ldr	r2, [r7, #28]
 8003176:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003178:	68f8      	ldr	r0, [r7, #12]
 800317a:	f000 f98f 	bl	800349c <SPI_EndRxTxTransaction>
 800317e:	4603      	mov	r3, r0
 8003180:	2b00      	cmp	r3, #0
 8003182:	d006      	beq.n	8003192 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2220      	movs	r2, #32
 800318e:	661a      	str	r2, [r3, #96]	; 0x60
 8003190:	e000      	b.n	8003194 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8003192:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2200      	movs	r2, #0
 80031a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80031a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	3728      	adds	r7, #40	; 0x28
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}

080031b0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b088      	sub	sp, #32
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	60f8      	str	r0, [r7, #12]
 80031b8:	60b9      	str	r1, [r7, #8]
 80031ba:	603b      	str	r3, [r7, #0]
 80031bc:	4613      	mov	r3, r2
 80031be:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80031c0:	f7fd febe 	bl	8000f40 <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031c8:	1a9b      	subs	r3, r3, r2
 80031ca:	683a      	ldr	r2, [r7, #0]
 80031cc:	4413      	add	r3, r2
 80031ce:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80031d0:	f7fd feb6 	bl	8000f40 <HAL_GetTick>
 80031d4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80031d6:	4b39      	ldr	r3, [pc, #228]	; (80032bc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	015b      	lsls	r3, r3, #5
 80031dc:	0d1b      	lsrs	r3, r3, #20
 80031de:	69fa      	ldr	r2, [r7, #28]
 80031e0:	fb02 f303 	mul.w	r3, r2, r3
 80031e4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80031e6:	e054      	b.n	8003292 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80031ee:	d050      	beq.n	8003292 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80031f0:	f7fd fea6 	bl	8000f40 <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	69bb      	ldr	r3, [r7, #24]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	69fa      	ldr	r2, [r7, #28]
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d902      	bls.n	8003206 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d13d      	bne.n	8003282 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	685a      	ldr	r2, [r3, #4]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003214:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800321e:	d111      	bne.n	8003244 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003228:	d004      	beq.n	8003234 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003232:	d107      	bne.n	8003244 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003242:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003248:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800324c:	d10f      	bne.n	800326e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800325c:	601a      	str	r2, [r3, #0]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800326c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2201      	movs	r2, #1
 8003272:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2200      	movs	r2, #0
 800327a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800327e:	2303      	movs	r3, #3
 8003280:	e017      	b.n	80032b2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d101      	bne.n	800328c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003288:	2300      	movs	r3, #0
 800328a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	3b01      	subs	r3, #1
 8003290:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	689a      	ldr	r2, [r3, #8]
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	4013      	ands	r3, r2
 800329c:	68ba      	ldr	r2, [r7, #8]
 800329e:	429a      	cmp	r2, r3
 80032a0:	bf0c      	ite	eq
 80032a2:	2301      	moveq	r3, #1
 80032a4:	2300      	movne	r3, #0
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	461a      	mov	r2, r3
 80032aa:	79fb      	ldrb	r3, [r7, #7]
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d19b      	bne.n	80031e8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80032b0:	2300      	movs	r3, #0
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3720      	adds	r7, #32
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	20000008 	.word	0x20000008

080032c0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b08a      	sub	sp, #40	; 0x28
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	60f8      	str	r0, [r7, #12]
 80032c8:	60b9      	str	r1, [r7, #8]
 80032ca:	607a      	str	r2, [r7, #4]
 80032cc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80032ce:	2300      	movs	r3, #0
 80032d0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80032d2:	f7fd fe35 	bl	8000f40 <HAL_GetTick>
 80032d6:	4602      	mov	r2, r0
 80032d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032da:	1a9b      	subs	r3, r3, r2
 80032dc:	683a      	ldr	r2, [r7, #0]
 80032de:	4413      	add	r3, r2
 80032e0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80032e2:	f7fd fe2d 	bl	8000f40 <HAL_GetTick>
 80032e6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	330c      	adds	r3, #12
 80032ee:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80032f0:	4b3d      	ldr	r3, [pc, #244]	; (80033e8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	4613      	mov	r3, r2
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	4413      	add	r3, r2
 80032fa:	00da      	lsls	r2, r3, #3
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	0d1b      	lsrs	r3, r3, #20
 8003300:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003302:	fb02 f303 	mul.w	r3, r2, r3
 8003306:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003308:	e060      	b.n	80033cc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003310:	d107      	bne.n	8003322 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d104      	bne.n	8003322 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	b2db      	uxtb	r3, r3
 800331e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003320:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003328:	d050      	beq.n	80033cc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800332a:	f7fd fe09 	bl	8000f40 <HAL_GetTick>
 800332e:	4602      	mov	r2, r0
 8003330:	6a3b      	ldr	r3, [r7, #32]
 8003332:	1ad3      	subs	r3, r2, r3
 8003334:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003336:	429a      	cmp	r2, r3
 8003338:	d902      	bls.n	8003340 <SPI_WaitFifoStateUntilTimeout+0x80>
 800333a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800333c:	2b00      	cmp	r3, #0
 800333e:	d13d      	bne.n	80033bc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	685a      	ldr	r2, [r3, #4]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800334e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003358:	d111      	bne.n	800337e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003362:	d004      	beq.n	800336e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800336c:	d107      	bne.n	800337e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800337c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003382:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003386:	d10f      	bne.n	80033a8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003396:	601a      	str	r2, [r3, #0]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80033a6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80033b8:	2303      	movs	r3, #3
 80033ba:	e010      	b.n	80033de <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80033bc:	69bb      	ldr	r3, [r7, #24]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d101      	bne.n	80033c6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80033c2:	2300      	movs	r3, #0
 80033c4:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 80033c6:	69bb      	ldr	r3, [r7, #24]
 80033c8:	3b01      	subs	r3, #1
 80033ca:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	689a      	ldr	r2, [r3, #8]
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	4013      	ands	r3, r2
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	429a      	cmp	r2, r3
 80033da:	d196      	bne.n	800330a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80033dc:	2300      	movs	r3, #0
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3728      	adds	r7, #40	; 0x28
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop
 80033e8:	20000008 	.word	0x20000008

080033ec <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b086      	sub	sp, #24
 80033f0:	af02      	add	r7, sp, #8
 80033f2:	60f8      	str	r0, [r7, #12]
 80033f4:	60b9      	str	r1, [r7, #8]
 80033f6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003400:	d111      	bne.n	8003426 <SPI_EndRxTransaction+0x3a>
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800340a:	d004      	beq.n	8003416 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003414:	d107      	bne.n	8003426 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003424:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	9300      	str	r3, [sp, #0]
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	2200      	movs	r2, #0
 800342e:	2180      	movs	r1, #128	; 0x80
 8003430:	68f8      	ldr	r0, [r7, #12]
 8003432:	f7ff febd 	bl	80031b0 <SPI_WaitFlagStateUntilTimeout>
 8003436:	4603      	mov	r3, r0
 8003438:	2b00      	cmp	r3, #0
 800343a:	d007      	beq.n	800344c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003440:	f043 0220 	orr.w	r2, r3, #32
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003448:	2303      	movs	r3, #3
 800344a:	e023      	b.n	8003494 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003454:	d11d      	bne.n	8003492 <SPI_EndRxTransaction+0xa6>
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800345e:	d004      	beq.n	800346a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003468:	d113      	bne.n	8003492 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	9300      	str	r3, [sp, #0]
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	2200      	movs	r2, #0
 8003472:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003476:	68f8      	ldr	r0, [r7, #12]
 8003478:	f7ff ff22 	bl	80032c0 <SPI_WaitFifoStateUntilTimeout>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d007      	beq.n	8003492 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003486:	f043 0220 	orr.w	r2, r3, #32
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	e000      	b.n	8003494 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8003492:	2300      	movs	r3, #0
}
 8003494:	4618      	mov	r0, r3
 8003496:	3710      	adds	r7, #16
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}

0800349c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b086      	sub	sp, #24
 80034a0:	af02      	add	r7, sp, #8
 80034a2:	60f8      	str	r0, [r7, #12]
 80034a4:	60b9      	str	r1, [r7, #8]
 80034a6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	9300      	str	r3, [sp, #0]
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	2200      	movs	r2, #0
 80034b0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80034b4:	68f8      	ldr	r0, [r7, #12]
 80034b6:	f7ff ff03 	bl	80032c0 <SPI_WaitFifoStateUntilTimeout>
 80034ba:	4603      	mov	r3, r0
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d007      	beq.n	80034d0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034c4:	f043 0220 	orr.w	r2, r3, #32
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80034cc:	2303      	movs	r3, #3
 80034ce:	e027      	b.n	8003520 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	9300      	str	r3, [sp, #0]
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	2200      	movs	r2, #0
 80034d8:	2180      	movs	r1, #128	; 0x80
 80034da:	68f8      	ldr	r0, [r7, #12]
 80034dc:	f7ff fe68 	bl	80031b0 <SPI_WaitFlagStateUntilTimeout>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d007      	beq.n	80034f6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034ea:	f043 0220 	orr.w	r2, r3, #32
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80034f2:	2303      	movs	r3, #3
 80034f4:	e014      	b.n	8003520 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	9300      	str	r3, [sp, #0]
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	2200      	movs	r2, #0
 80034fe:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003502:	68f8      	ldr	r0, [r7, #12]
 8003504:	f7ff fedc 	bl	80032c0 <SPI_WaitFifoStateUntilTimeout>
 8003508:	4603      	mov	r3, r0
 800350a:	2b00      	cmp	r3, #0
 800350c:	d007      	beq.n	800351e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003512:	f043 0220 	orr.w	r2, r3, #32
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800351a:	2303      	movs	r3, #3
 800351c:	e000      	b.n	8003520 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800351e:	2300      	movs	r3, #0
}
 8003520:	4618      	mov	r0, r3
 8003522:	3710      	adds	r7, #16
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}

08003528 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b082      	sub	sp, #8
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d101      	bne.n	800353a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e040      	b.n	80035bc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800353e:	2b00      	cmp	r3, #0
 8003540:	d106      	bne.n	8003550 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f7fc fffe 	bl	800054c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2224      	movs	r2, #36	; 0x24
 8003554:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f022 0201 	bic.w	r2, r2, #1
 8003564:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f000 f82c 	bl	80035c4 <UART_SetConfig>
 800356c:	4603      	mov	r3, r0
 800356e:	2b01      	cmp	r3, #1
 8003570:	d101      	bne.n	8003576 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e022      	b.n	80035bc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357a:	2b00      	cmp	r3, #0
 800357c:	d002      	beq.n	8003584 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f000 f958 	bl	8003834 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	685a      	ldr	r2, [r3, #4]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003592:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	689a      	ldr	r2, [r3, #8]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80035a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f042 0201 	orr.w	r2, r2, #1
 80035b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f000 f9df 	bl	8003978 <UART_CheckIdleState>
 80035ba:	4603      	mov	r3, r0
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3708      	adds	r7, #8
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}

080035c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b088      	sub	sp, #32
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80035cc:	2300      	movs	r3, #0
 80035ce:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	689a      	ldr	r2, [r3, #8]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	691b      	ldr	r3, [r3, #16]
 80035d8:	431a      	orrs	r2, r3
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	695b      	ldr	r3, [r3, #20]
 80035de:	431a      	orrs	r2, r3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	69db      	ldr	r3, [r3, #28]
 80035e4:	4313      	orrs	r3, r2
 80035e6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	4b8b      	ldr	r3, [pc, #556]	; (800381c <UART_SetConfig+0x258>)
 80035f0:	4013      	ands	r3, r2
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	6812      	ldr	r2, [r2, #0]
 80035f6:	6979      	ldr	r1, [r7, #20]
 80035f8:	430b      	orrs	r3, r1
 80035fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	68da      	ldr	r2, [r3, #12]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	430a      	orrs	r2, r1
 8003610:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	699b      	ldr	r3, [r3, #24]
 8003616:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6a1b      	ldr	r3, [r3, #32]
 800361c:	697a      	ldr	r2, [r7, #20]
 800361e:	4313      	orrs	r3, r2
 8003620:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	697a      	ldr	r2, [r7, #20]
 8003632:	430a      	orrs	r2, r1
 8003634:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a79      	ldr	r2, [pc, #484]	; (8003820 <UART_SetConfig+0x25c>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d121      	bne.n	8003684 <UART_SetConfig+0xc0>
 8003640:	4b78      	ldr	r3, [pc, #480]	; (8003824 <UART_SetConfig+0x260>)
 8003642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003644:	f003 0303 	and.w	r3, r3, #3
 8003648:	2b03      	cmp	r3, #3
 800364a:	d817      	bhi.n	800367c <UART_SetConfig+0xb8>
 800364c:	a201      	add	r2, pc, #4	; (adr r2, 8003654 <UART_SetConfig+0x90>)
 800364e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003652:	bf00      	nop
 8003654:	08003665 	.word	0x08003665
 8003658:	08003671 	.word	0x08003671
 800365c:	08003677 	.word	0x08003677
 8003660:	0800366b 	.word	0x0800366b
 8003664:	2300      	movs	r3, #0
 8003666:	77fb      	strb	r3, [r7, #31]
 8003668:	e01e      	b.n	80036a8 <UART_SetConfig+0xe4>
 800366a:	2302      	movs	r3, #2
 800366c:	77fb      	strb	r3, [r7, #31]
 800366e:	e01b      	b.n	80036a8 <UART_SetConfig+0xe4>
 8003670:	2304      	movs	r3, #4
 8003672:	77fb      	strb	r3, [r7, #31]
 8003674:	e018      	b.n	80036a8 <UART_SetConfig+0xe4>
 8003676:	2308      	movs	r3, #8
 8003678:	77fb      	strb	r3, [r7, #31]
 800367a:	e015      	b.n	80036a8 <UART_SetConfig+0xe4>
 800367c:	2310      	movs	r3, #16
 800367e:	77fb      	strb	r3, [r7, #31]
 8003680:	bf00      	nop
 8003682:	e011      	b.n	80036a8 <UART_SetConfig+0xe4>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a67      	ldr	r2, [pc, #412]	; (8003828 <UART_SetConfig+0x264>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d102      	bne.n	8003694 <UART_SetConfig+0xd0>
 800368e:	2300      	movs	r3, #0
 8003690:	77fb      	strb	r3, [r7, #31]
 8003692:	e009      	b.n	80036a8 <UART_SetConfig+0xe4>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a64      	ldr	r2, [pc, #400]	; (800382c <UART_SetConfig+0x268>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d102      	bne.n	80036a4 <UART_SetConfig+0xe0>
 800369e:	2300      	movs	r3, #0
 80036a0:	77fb      	strb	r3, [r7, #31]
 80036a2:	e001      	b.n	80036a8 <UART_SetConfig+0xe4>
 80036a4:	2310      	movs	r3, #16
 80036a6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	69db      	ldr	r3, [r3, #28]
 80036ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036b0:	d15c      	bne.n	800376c <UART_SetConfig+0x1a8>
  {
    switch (clocksource)
 80036b2:	7ffb      	ldrb	r3, [r7, #31]
 80036b4:	2b08      	cmp	r3, #8
 80036b6:	d828      	bhi.n	800370a <UART_SetConfig+0x146>
 80036b8:	a201      	add	r2, pc, #4	; (adr r2, 80036c0 <UART_SetConfig+0xfc>)
 80036ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036be:	bf00      	nop
 80036c0:	080036e5 	.word	0x080036e5
 80036c4:	080036ed 	.word	0x080036ed
 80036c8:	080036f5 	.word	0x080036f5
 80036cc:	0800370b 	.word	0x0800370b
 80036d0:	080036fb 	.word	0x080036fb
 80036d4:	0800370b 	.word	0x0800370b
 80036d8:	0800370b 	.word	0x0800370b
 80036dc:	0800370b 	.word	0x0800370b
 80036e0:	08003703 	.word	0x08003703
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036e4:	f7fe ffc4 	bl	8002670 <HAL_RCC_GetPCLK1Freq>
 80036e8:	61b8      	str	r0, [r7, #24]
        break;
 80036ea:	e013      	b.n	8003714 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80036ec:	f7fe ffe2 	bl	80026b4 <HAL_RCC_GetPCLK2Freq>
 80036f0:	61b8      	str	r0, [r7, #24]
        break;
 80036f2:	e00f      	b.n	8003714 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036f4:	4b4e      	ldr	r3, [pc, #312]	; (8003830 <UART_SetConfig+0x26c>)
 80036f6:	61bb      	str	r3, [r7, #24]
        break;
 80036f8:	e00c      	b.n	8003714 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036fa:	f7fe ff43 	bl	8002584 <HAL_RCC_GetSysClockFreq>
 80036fe:	61b8      	str	r0, [r7, #24]
        break;
 8003700:	e008      	b.n	8003714 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003702:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003706:	61bb      	str	r3, [r7, #24]
        break;
 8003708:	e004      	b.n	8003714 <UART_SetConfig+0x150>
      default:
        pclk = 0U;
 800370a:	2300      	movs	r3, #0
 800370c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	77bb      	strb	r3, [r7, #30]
        break;
 8003712:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003714:	69bb      	ldr	r3, [r7, #24]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d074      	beq.n	8003804 <UART_SetConfig+0x240>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800371a:	69bb      	ldr	r3, [r7, #24]
 800371c:	005a      	lsls	r2, r3, #1
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	085b      	lsrs	r3, r3, #1
 8003724:	441a      	add	r2, r3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	fbb2 f3f3 	udiv	r3, r2, r3
 800372e:	b29b      	uxth	r3, r3
 8003730:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	2b0f      	cmp	r3, #15
 8003736:	d916      	bls.n	8003766 <UART_SetConfig+0x1a2>
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800373e:	d212      	bcs.n	8003766 <UART_SetConfig+0x1a2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	b29b      	uxth	r3, r3
 8003744:	f023 030f 	bic.w	r3, r3, #15
 8003748:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	085b      	lsrs	r3, r3, #1
 800374e:	b29b      	uxth	r3, r3
 8003750:	f003 0307 	and.w	r3, r3, #7
 8003754:	b29a      	uxth	r2, r3
 8003756:	89fb      	ldrh	r3, [r7, #14]
 8003758:	4313      	orrs	r3, r2
 800375a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	89fa      	ldrh	r2, [r7, #14]
 8003762:	60da      	str	r2, [r3, #12]
 8003764:	e04e      	b.n	8003804 <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	77bb      	strb	r3, [r7, #30]
 800376a:	e04b      	b.n	8003804 <UART_SetConfig+0x240>
      }
    }
  }
  else
  {
    switch (clocksource)
 800376c:	7ffb      	ldrb	r3, [r7, #31]
 800376e:	2b08      	cmp	r3, #8
 8003770:	d827      	bhi.n	80037c2 <UART_SetConfig+0x1fe>
 8003772:	a201      	add	r2, pc, #4	; (adr r2, 8003778 <UART_SetConfig+0x1b4>)
 8003774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003778:	0800379d 	.word	0x0800379d
 800377c:	080037a5 	.word	0x080037a5
 8003780:	080037ad 	.word	0x080037ad
 8003784:	080037c3 	.word	0x080037c3
 8003788:	080037b3 	.word	0x080037b3
 800378c:	080037c3 	.word	0x080037c3
 8003790:	080037c3 	.word	0x080037c3
 8003794:	080037c3 	.word	0x080037c3
 8003798:	080037bb 	.word	0x080037bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800379c:	f7fe ff68 	bl	8002670 <HAL_RCC_GetPCLK1Freq>
 80037a0:	61b8      	str	r0, [r7, #24]
        break;
 80037a2:	e013      	b.n	80037cc <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80037a4:	f7fe ff86 	bl	80026b4 <HAL_RCC_GetPCLK2Freq>
 80037a8:	61b8      	str	r0, [r7, #24]
        break;
 80037aa:	e00f      	b.n	80037cc <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037ac:	4b20      	ldr	r3, [pc, #128]	; (8003830 <UART_SetConfig+0x26c>)
 80037ae:	61bb      	str	r3, [r7, #24]
        break;
 80037b0:	e00c      	b.n	80037cc <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037b2:	f7fe fee7 	bl	8002584 <HAL_RCC_GetSysClockFreq>
 80037b6:	61b8      	str	r0, [r7, #24]
        break;
 80037b8:	e008      	b.n	80037cc <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037be:	61bb      	str	r3, [r7, #24]
        break;
 80037c0:	e004      	b.n	80037cc <UART_SetConfig+0x208>
      default:
        pclk = 0U;
 80037c2:	2300      	movs	r3, #0
 80037c4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	77bb      	strb	r3, [r7, #30]
        break;
 80037ca:	bf00      	nop
    }

    if (pclk != 0U)
 80037cc:	69bb      	ldr	r3, [r7, #24]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d018      	beq.n	8003804 <UART_SetConfig+0x240>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	085a      	lsrs	r2, r3, #1
 80037d8:	69bb      	ldr	r3, [r7, #24]
 80037da:	441a      	add	r2, r3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	2b0f      	cmp	r3, #15
 80037ec:	d908      	bls.n	8003800 <UART_SetConfig+0x23c>
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037f4:	d204      	bcs.n	8003800 <UART_SetConfig+0x23c>
      {
        huart->Instance->BRR = usartdiv;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	693a      	ldr	r2, [r7, #16]
 80037fc:	60da      	str	r2, [r3, #12]
 80037fe:	e001      	b.n	8003804 <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2200      	movs	r2, #0
 8003808:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003810:	7fbb      	ldrb	r3, [r7, #30]
}
 8003812:	4618      	mov	r0, r3
 8003814:	3720      	adds	r7, #32
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	efff69f3 	.word	0xefff69f3
 8003820:	40013800 	.word	0x40013800
 8003824:	40021000 	.word	0x40021000
 8003828:	40004400 	.word	0x40004400
 800382c:	40004800 	.word	0x40004800
 8003830:	007a1200 	.word	0x007a1200

08003834 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003834:	b480      	push	{r7}
 8003836:	b083      	sub	sp, #12
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003840:	f003 0301 	and.w	r3, r3, #1
 8003844:	2b00      	cmp	r3, #0
 8003846:	d00a      	beq.n	800385e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	430a      	orrs	r2, r1
 800385c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003862:	f003 0302 	and.w	r3, r3, #2
 8003866:	2b00      	cmp	r3, #0
 8003868:	d00a      	beq.n	8003880 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	430a      	orrs	r2, r1
 800387e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003884:	f003 0304 	and.w	r3, r3, #4
 8003888:	2b00      	cmp	r3, #0
 800388a:	d00a      	beq.n	80038a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	430a      	orrs	r2, r1
 80038a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a6:	f003 0308 	and.w	r3, r3, #8
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d00a      	beq.n	80038c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	430a      	orrs	r2, r1
 80038c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c8:	f003 0310 	and.w	r3, r3, #16
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d00a      	beq.n	80038e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	430a      	orrs	r2, r1
 80038e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ea:	f003 0320 	and.w	r3, r3, #32
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d00a      	beq.n	8003908 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	430a      	orrs	r2, r1
 8003906:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003910:	2b00      	cmp	r3, #0
 8003912:	d01a      	beq.n	800394a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	430a      	orrs	r2, r1
 8003928:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003932:	d10a      	bne.n	800394a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	430a      	orrs	r2, r1
 8003948:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003952:	2b00      	cmp	r3, #0
 8003954:	d00a      	beq.n	800396c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	430a      	orrs	r2, r1
 800396a:	605a      	str	r2, [r3, #4]
  }
}
 800396c:	bf00      	nop
 800396e:	370c      	adds	r7, #12
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr

08003978 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b086      	sub	sp, #24
 800397c:	af02      	add	r7, sp, #8
 800397e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2200      	movs	r2, #0
 8003984:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003988:	f7fd fada 	bl	8000f40 <HAL_GetTick>
 800398c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 0308 	and.w	r3, r3, #8
 8003998:	2b08      	cmp	r3, #8
 800399a:	d10e      	bne.n	80039ba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800399c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80039a0:	9300      	str	r3, [sp, #0]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2200      	movs	r2, #0
 80039a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f000 f82d 	bl	8003a0a <UART_WaitOnFlagUntilTimeout>
 80039b0:	4603      	mov	r3, r0
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d001      	beq.n	80039ba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e023      	b.n	8003a02 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 0304 	and.w	r3, r3, #4
 80039c4:	2b04      	cmp	r3, #4
 80039c6:	d10e      	bne.n	80039e6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80039cc:	9300      	str	r3, [sp, #0]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2200      	movs	r2, #0
 80039d2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f000 f817 	bl	8003a0a <UART_WaitOnFlagUntilTimeout>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d001      	beq.n	80039e6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	e00d      	b.n	8003a02 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2220      	movs	r2, #32
 80039ea:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2220      	movs	r2, #32
 80039f0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2200      	movs	r2, #0
 80039fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3710      	adds	r7, #16
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}

08003a0a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003a0a:	b580      	push	{r7, lr}
 8003a0c:	b09c      	sub	sp, #112	; 0x70
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	60f8      	str	r0, [r7, #12]
 8003a12:	60b9      	str	r1, [r7, #8]
 8003a14:	603b      	str	r3, [r7, #0]
 8003a16:	4613      	mov	r3, r2
 8003a18:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a1a:	e0a5      	b.n	8003b68 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a22:	f000 80a1 	beq.w	8003b68 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a26:	f7fd fa8b 	bl	8000f40 <HAL_GetTick>
 8003a2a:	4602      	mov	r2, r0
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	1ad3      	subs	r3, r2, r3
 8003a30:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d302      	bcc.n	8003a3c <UART_WaitOnFlagUntilTimeout+0x32>
 8003a36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d13e      	bne.n	8003aba <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a44:	e853 3f00 	ldrex	r3, [r3]
 8003a48:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003a4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a4c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003a50:	667b      	str	r3, [r7, #100]	; 0x64
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	461a      	mov	r2, r3
 8003a58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a5a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a5c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a5e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003a60:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003a62:	e841 2300 	strex	r3, r2, [r1]
 8003a66:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003a68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d1e6      	bne.n	8003a3c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	3308      	adds	r3, #8
 8003a74:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a78:	e853 3f00 	ldrex	r3, [r3]
 8003a7c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a80:	f023 0301 	bic.w	r3, r3, #1
 8003a84:	663b      	str	r3, [r7, #96]	; 0x60
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	3308      	adds	r3, #8
 8003a8c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003a8e:	64ba      	str	r2, [r7, #72]	; 0x48
 8003a90:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a92:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003a94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a96:	e841 2300 	strex	r3, r2, [r1]
 8003a9a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003a9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d1e5      	bne.n	8003a6e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2220      	movs	r2, #32
 8003aa6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2220      	movs	r2, #32
 8003aac:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	e067      	b.n	8003b8a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 0304 	and.w	r3, r3, #4
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d04f      	beq.n	8003b68 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	69db      	ldr	r3, [r3, #28]
 8003ace:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ad2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ad6:	d147      	bne.n	8003b68 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ae0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aea:	e853 3f00 	ldrex	r3, [r3]
 8003aee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003af6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	461a      	mov	r2, r3
 8003afe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b00:	637b      	str	r3, [r7, #52]	; 0x34
 8003b02:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b04:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b08:	e841 2300 	strex	r3, r2, [r1]
 8003b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d1e6      	bne.n	8003ae2 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	3308      	adds	r3, #8
 8003b1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	e853 3f00 	ldrex	r3, [r3]
 8003b22:	613b      	str	r3, [r7, #16]
   return(result);
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	f023 0301 	bic.w	r3, r3, #1
 8003b2a:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	3308      	adds	r3, #8
 8003b32:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003b34:	623a      	str	r2, [r7, #32]
 8003b36:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b38:	69f9      	ldr	r1, [r7, #28]
 8003b3a:	6a3a      	ldr	r2, [r7, #32]
 8003b3c:	e841 2300 	strex	r3, r2, [r1]
 8003b40:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b42:	69bb      	ldr	r3, [r7, #24]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d1e5      	bne.n	8003b14 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2220      	movs	r2, #32
 8003b4c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2220      	movs	r2, #32
 8003b52:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2220      	movs	r2, #32
 8003b58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003b64:	2303      	movs	r3, #3
 8003b66:	e010      	b.n	8003b8a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	69da      	ldr	r2, [r3, #28]
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	4013      	ands	r3, r2
 8003b72:	68ba      	ldr	r2, [r7, #8]
 8003b74:	429a      	cmp	r2, r3
 8003b76:	bf0c      	ite	eq
 8003b78:	2301      	moveq	r3, #1
 8003b7a:	2300      	movne	r3, #0
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	461a      	mov	r2, r3
 8003b80:	79fb      	ldrb	r3, [r7, #7]
 8003b82:	429a      	cmp	r2, r3
 8003b84:	f43f af4a 	beq.w	8003a1c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b88:	2300      	movs	r3, #0
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3770      	adds	r7, #112	; 0x70
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
	...

08003b94 <__libc_init_array>:
 8003b94:	b570      	push	{r4, r5, r6, lr}
 8003b96:	4e0d      	ldr	r6, [pc, #52]	; (8003bcc <__libc_init_array+0x38>)
 8003b98:	4c0d      	ldr	r4, [pc, #52]	; (8003bd0 <__libc_init_array+0x3c>)
 8003b9a:	1ba4      	subs	r4, r4, r6
 8003b9c:	10a4      	asrs	r4, r4, #2
 8003b9e:	2500      	movs	r5, #0
 8003ba0:	42a5      	cmp	r5, r4
 8003ba2:	d109      	bne.n	8003bb8 <__libc_init_array+0x24>
 8003ba4:	4e0b      	ldr	r6, [pc, #44]	; (8003bd4 <__libc_init_array+0x40>)
 8003ba6:	4c0c      	ldr	r4, [pc, #48]	; (8003bd8 <__libc_init_array+0x44>)
 8003ba8:	f000 f820 	bl	8003bec <_init>
 8003bac:	1ba4      	subs	r4, r4, r6
 8003bae:	10a4      	asrs	r4, r4, #2
 8003bb0:	2500      	movs	r5, #0
 8003bb2:	42a5      	cmp	r5, r4
 8003bb4:	d105      	bne.n	8003bc2 <__libc_init_array+0x2e>
 8003bb6:	bd70      	pop	{r4, r5, r6, pc}
 8003bb8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003bbc:	4798      	blx	r3
 8003bbe:	3501      	adds	r5, #1
 8003bc0:	e7ee      	b.n	8003ba0 <__libc_init_array+0xc>
 8003bc2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003bc6:	4798      	blx	r3
 8003bc8:	3501      	adds	r5, #1
 8003bca:	e7f2      	b.n	8003bb2 <__libc_init_array+0x1e>
 8003bcc:	08003c3c 	.word	0x08003c3c
 8003bd0:	08003c3c 	.word	0x08003c3c
 8003bd4:	08003c3c 	.word	0x08003c3c
 8003bd8:	08003c40 	.word	0x08003c40

08003bdc <memset>:
 8003bdc:	4402      	add	r2, r0
 8003bde:	4603      	mov	r3, r0
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d100      	bne.n	8003be6 <memset+0xa>
 8003be4:	4770      	bx	lr
 8003be6:	f803 1b01 	strb.w	r1, [r3], #1
 8003bea:	e7f9      	b.n	8003be0 <memset+0x4>

08003bec <_init>:
 8003bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bee:	bf00      	nop
 8003bf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bf2:	bc08      	pop	{r3}
 8003bf4:	469e      	mov	lr, r3
 8003bf6:	4770      	bx	lr

08003bf8 <_fini>:
 8003bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bfa:	bf00      	nop
 8003bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bfe:	bc08      	pop	{r3}
 8003c00:	469e      	mov	lr, r3
 8003c02:	4770      	bx	lr
